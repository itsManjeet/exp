{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "0fd88e3c_2d98f0cc",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 26615
      },
      "writtenOn": "2020-12-06T23:07:30Z",
      "side": 1,
      "message": "Sorry for the slow response, gopls has been taking my 20%. Back now. \u003d)\n\nTook a whack at some of the easier comments. Will return this week for reals.",
      "revId": "a5e827eaa1bd474a6c04743961d6811c782052dc",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2d22c946_d6188e4e",
        "filename": "cmd/gorelease/gorelease.go",
        "patchSetId": 11
      },
      "lineNbr": 362,
      "author": {
        "id": 17092
      },
      "writtenOn": "2020-11-30T21:22:37Z",
      "side": 1,
      "message": "Let\u0027s try to avoid adding too much code to this function (loadLocalModule). It\u0027s already pretty big.\n\nInstead, I\u0027d suggest moving this to either prepareLoadDir or loadPackages, with some preference for prepareLoadDir.\n\nThe command `go get -d .` is coupled with prepareLoadDir since it depends on the tmp.go file we generate there.\n\nOn the other hand, we need to report diagnostics if go.mod or go.sum end up with extra requirements or sums, and loadPackages has a way to do that already.",
      "revId": "a5e827eaa1bd474a6c04743961d6811c782052dc",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "81bab196_90c9e8a0",
        "filename": "cmd/gorelease/gorelease.go",
        "patchSetId": 11
      },
      "lineNbr": 362,
      "author": {
        "id": 17092
      },
      "writtenOn": "2020-11-30T21:22:37Z",
      "side": 1,
      "message": "\"Fetch\" isn\u0027t quite the right verb: maybe instead \"Add missing requirements\"?",
      "range": {
        "startLine": 362,
        "startChar": 4,
        "endLine": 362,
        "endChar": 9
      },
      "revId": "a5e827eaa1bd474a6c04743961d6811c782052dc",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "baacca7c_b984a94a",
        "filename": "cmd/gorelease/gorelease.go",
        "patchSetId": 11
      },
      "lineNbr": 362,
      "author": {
        "id": 26615
      },
      "writtenOn": "2020-12-06T23:07:30Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "81bab196_90c9e8a0",
      "range": {
        "startLine": 362,
        "startChar": 4,
        "endLine": 362,
        "endChar": 9
      },
      "revId": "a5e827eaa1bd474a6c04743961d6811c782052dc",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ec8409c8_f27ceff3",
        "filename": "cmd/gorelease/gorelease.go",
        "patchSetId": 11
      },
      "lineNbr": 362,
      "author": {
        "id": 26615
      },
      "writtenOn": "2020-12-07T00:02:39Z",
      "side": 1,
      "message": "So, tricky thing here is that we only want to do this for the local module case, not the downloaded module.\n\nNotes:\n\n- I don\u0027t _fulllly_ understand the difference between the two, and imagine that we could consolidate to prepareLoadDir/loadPackages and do it for both, but...\n- TestRelease/nomod/nomod breaks if we try to do it for the downloaded module case with \"[...]/go.mod: no such file or directory\". I didn\u0027t fully understand that error _either_ (a lot of edge cases to try to mentally work through heh), so maybe it\u0027s something to solve generally.\n\nAny thoughts on the above as to why the difference is relevant to nomod, why the test fails for nomod, and whether it\u0027s something to solve or not?\n\nI had thought about solving this by creating a go.mod in the nomod case but figured it was odd to go put go.mod files in modules we\u0027ve downloaded. It\u0027s sketchy enough as it is to do so for the local module, but yeah, the downloaded ones seem more \"keep as-is\".\n\nAnyways, that\u0027s as far as my thinking got on this, let me know which direction you think best. Also happy to just make this blob into its own function if we\u0027re mostly concerned about not making loadLocalModule not too huge.",
      "parentUuid": "2d22c946_d6188e4e",
      "revId": "a5e827eaa1bd474a6c04743961d6811c782052dc",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c0c7c004_09501564",
        "filename": "cmd/gorelease/gorelease.go",
        "patchSetId": 11
      },
      "lineNbr": 362,
      "author": {
        "id": 17092
      },
      "writtenOn": "2020-12-07T17:00:03Z",
      "side": 1,
      "message": "Might be easier to hash all this out over VC? Feel free to drop some time on my calendar this week.\n\nAt the beginning of gorelease, the base version was always downloaded (in the module cache), and the release version was always local. We\u0027re kind of in the middle of decoupling base/release from downloaded/local. There are cases where you want to compare two downloaded versions (like in the nomod test) or two local versions (not supported yet).\n\nI\u0027m not sure what\u0027s happening with the nomod test; it looks like the test compares a downloaded base with a downloaded remote; neither version has a go.mod file. That\u0027s common for modules that never added go.mod; the go command will synthesize a .mod file, but it won\u0027t be in the module\u0027s directory.",
      "parentUuid": "ec8409c8_f27ceff3",
      "revId": "a5e827eaa1bd474a6c04743961d6811c782052dc",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "89669efe_af910e39",
        "filename": "cmd/gorelease/gorelease.go",
        "patchSetId": 11
      },
      "lineNbr": 362,
      "author": {
        "id": 26615
      },
      "writtenOn": "2020-12-08T16:33:19Z",
      "side": 1,
      "message": "GVC set up!",
      "parentUuid": "c0c7c004_09501564",
      "revId": "a5e827eaa1bd474a6c04743961d6811c782052dc",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2f7fdf96_9a88212c",
        "filename": "cmd/gorelease/gorelease.go",
        "patchSetId": 11
      },
      "lineNbr": 366,
      "author": {
        "id": 17092
      },
      "writtenOn": "2020-11-30T21:22:37Z",
      "side": 1,
      "message": "I don\u0027t think this will be meaningful for users; mentioning \u0027go get\u0027 may be misleading.\n\nPerhaps instead \"error loading packages for \"module %s@%s: %v\"? \n\ndownloadError in errors.go is similar. Maybe add a new error type in that file or adapt that one?",
      "revId": "a5e827eaa1bd474a6c04743961d6811c782052dc",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1e499789_daa67031",
        "filename": "cmd/gorelease/gorelease.go",
        "patchSetId": 11
      },
      "lineNbr": 366,
      "author": {
        "id": 26615
      },
      "writtenOn": "2020-12-08T16:33:19Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2f7fdf96_9a88212c",
      "revId": "a5e827eaa1bd474a6c04743961d6811c782052dc",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c94831eb_8b54a198",
        "filename": "cmd/gorelease/gorelease.go",
        "patchSetId": 11
      },
      "lineNbr": 386,
      "author": {
        "id": 17092
      },
      "writtenOn": "2020-11-30T21:22:37Z",
      "side": 1,
      "message": "This message won\u0027t be meaningful to users: it mentions a local variable. Better to just return err, since ParseLax should already name the file and say what the error was.\n\nSame with the two errors below.",
      "revId": "a5e827eaa1bd474a6c04743961d6811c782052dc",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fdf9e95c_530f5e86",
        "filename": "cmd/gorelease/gorelease.go",
        "patchSetId": 11
      },
      "lineNbr": 386,
      "author": {
        "id": 26615
      },
      "writtenOn": "2020-12-06T23:07:30Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c94831eb_8b54a198",
      "revId": "a5e827eaa1bd474a6c04743961d6811c782052dc",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b1fb3b50_f2c55db0",
        "filename": "cmd/gorelease/gorelease.go",
        "patchSetId": 11
      },
      "lineNbr": 417,
      "author": {
        "id": 17092
      },
      "writtenOn": "2020-11-30T21:22:37Z",
      "side": 1,
      "message": "No need to add more information here. The error returned by ioutil.ReadFile should be enough.",
      "revId": "a5e827eaa1bd474a6c04743961d6811c782052dc",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "040d13eb_a8d164b7",
        "filename": "cmd/gorelease/gorelease.go",
        "patchSetId": 11
      },
      "lineNbr": 417,
      "author": {
        "id": 26615
      },
      "writtenOn": "2020-12-06T23:07:30Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b1fb3b50_f2c55db0",
      "revId": "a5e827eaa1bd474a6c04743961d6811c782052dc",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "45d56243_9087af1a",
        "filename": "cmd/gorelease/gorelease.go",
        "patchSetId": 11
      },
      "lineNbr": 1017,
      "author": {
        "id": 17092
      },
      "writtenOn": "2020-11-30T21:22:37Z",
      "side": 1,
      "message": "Use filepath.Base instead of Split",
      "revId": "a5e827eaa1bd474a6c04743961d6811c782052dc",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0dd3b0d5_22612819",
        "filename": "cmd/gorelease/gorelease.go",
        "patchSetId": 11
      },
      "lineNbr": 1017,
      "author": {
        "id": 26615
      },
      "writtenOn": "2020-12-06T23:07:30Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "45d56243_9087af1a",
      "revId": "a5e827eaa1bd474a6c04743961d6811c782052dc",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9920d1ad_2e2e10e5",
        "filename": "cmd/gorelease/gorelease.go",
        "patchSetId": 11
      },
      "lineNbr": 1018,
      "author": {
        "id": 17092
      },
      "writtenOn": "2020-11-30T21:22:37Z",
      "side": 1,
      "message": "Avoid recursing into hidden and testdata directories. We can skip \"internal\", too.\n\n  if !fi.IsDir() {\n    return nil\n  }\n  base :\u003d filepath.Base(path)\n  if strings.HasPrefix(base, \".\") || strings.HasPrefix(base, \"_\") || base \u003d\u003d \"testdata\" || base \u003d\u003d \"internal\" {\n    return filepath.SkipDir\n  }",
      "revId": "a5e827eaa1bd474a6c04743961d6811c782052dc",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b9818625_d462aa05",
        "filename": "cmd/gorelease/gorelease.go",
        "patchSetId": 11
      },
      "lineNbr": 1018,
      "author": {
        "id": 26615
      },
      "writtenOn": "2020-12-08T16:33:19Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9920d1ad_2e2e10e5",
      "revId": "a5e827eaa1bd474a6c04743961d6811c782052dc",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "231c923b_0388ef55",
        "filename": "cmd/gorelease/gorelease.go",
        "patchSetId": 11
      },
      "lineNbr": 1024,
      "author": {
        "id": 17092
      },
      "writtenOn": "2020-11-30T21:22:37Z",
      "side": 1,
      "message": "No need to run \u0027go list\u0027 here. We only need to list the packages in the main module, not anything they import. It could fail anyway if it needs to update go.mod or go.sum.\n\nSo this function will need to take two strings, modPath and modRoot. In each directory, we\u0027ll file the relative path from modRoot to path, then join that with modPath to give us an import path.\n\nWe\u0027ll need to test whether a directory is a package or not. go/build.ImportDir is the best tool for that: it will return an error if a directory can\u0027t be imported. We can also check that p.Name !\u003d \"main\": we can\u0027t import main packages, and they don\u0027t affect the module\u0027s public API.",
      "revId": "a5e827eaa1bd474a6c04743961d6811c782052dc",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1311e543_523d2168",
        "filename": "cmd/gorelease/gorelease.go",
        "patchSetId": 11
      },
      "lineNbr": 1024,
      "author": {
        "id": 26615
      },
      "writtenOn": "2020-12-08T16:33:19Z",
      "side": 1,
      "message": "Two questions:\n\n1.\n\n\u003e We only need to list the packages in the main module,\n\nCould you elaborate? My understanding:\n\nGiven somemod, we are trying to augment its go.mod by creating a temp.go file with all the imports in (the real version of) somemod and then running `go get . -d`.\n\nI think you\u0027re saying, we only need to import each package within somemod rather than its packages\u0027 imports. Is that right?\n\n2. If so: what if main imports a bunch of stuff? Since we can\u0027t import main itself, would we not have to add all of main\u0027s imports?",
      "parentUuid": "231c923b_0388ef55",
      "revId": "a5e827eaa1bd474a6c04743961d6811c782052dc",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b3db2f2b_efbb90dc",
        "filename": "cmd/gorelease/gorelease.go",
        "patchSetId": 11
      },
      "lineNbr": 1034,
      "author": {
        "id": 17092
      },
      "writtenOn": "2020-11-30T21:22:37Z",
      "side": 1,
      "message": "FYI, the -json and -f flags can\u0027t be used together. If you\u0027re using \u0027-f {{.Imports}}\u0027, it would print one package path per line.",
      "revId": "a5e827eaa1bd474a6c04743961d6811c782052dc",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dd98a35e_db0150c9",
        "filename": "cmd/gorelease/gorelease.go",
        "patchSetId": 11
      },
      "lineNbr": 1046,
      "author": {
        "id": 17092
      },
      "writtenOn": "2020-11-30T21:22:37Z",
      "side": 1,
      "message": "This is a little jarring since the assignment to err takes multiple lines. Better split that into a separate statement, then have a simple if statement here.",
      "revId": "a5e827eaa1bd474a6c04743961d6811c782052dc",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "879f1fea_2d832ac6",
        "filename": "cmd/gorelease/gorelease.go",
        "patchSetId": 11
      },
      "lineNbr": 1046,
      "author": {
        "id": 26615
      },
      "writtenOn": "2020-12-06T23:07:30Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "dd98a35e_db0150c9",
      "revId": "a5e827eaa1bd474a6c04743961d6811c782052dc",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "664ef85d_3332fb4b",
        "filename": "cmd/gorelease/gorelease.go",
        "patchSetId": 11
      },
      "lineNbr": 1068,
      "author": {
        "id": 17092
      },
      "writtenOn": "2020-11-30T21:22:37Z",
      "side": 1,
      "message": "If we list the importable packages in collectImports, we can pass that list in as a parameter. Then we can delete everything down to L1091.",
      "revId": "a5e827eaa1bd474a6c04743961d6811c782052dc",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}