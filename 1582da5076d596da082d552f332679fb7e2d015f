{
  "comments": [
    {
      "key": {
        "uuid": "124aacb3_2ba6dfac",
        "filename": "errors/errors.go",
        "patchSetId": 2
      },
      "lineNbr": 28,
      "author": {
        "id": 14570
      },
      "writtenOn": "2018-09-21T21:05:22Z",
      "side": 1,
      "message": "Our draft design never talked about how to create errors. You could argue, though, that this package should replace the standard errors package, and this is implementation of errors.New.",
      "range": {
        "startLine": 23,
        "startChar": 0,
        "endLine": 28,
        "endChar": 1
      },
      "revId": "1582da5076d596da082d552f332679fb7e2d015f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "375e6b65_ab8be538",
        "filename": "errors/errors.go",
        "patchSetId": 2
      },
      "lineNbr": 28,
      "author": {
        "id": 5305
      },
      "writtenOn": "2018-09-21T21:53:53Z",
      "side": 1,
      "message": "Yes, since this is intended to explore ideas that may be incorporated into the standard errors package it should be usable as a drop-in replacement to that package.",
      "parentUuid": "124aacb3_2ba6dfac",
      "range": {
        "startLine": 23,
        "startChar": 0,
        "endLine": 28,
        "endChar": 1
      },
      "revId": "1582da5076d596da082d552f332679fb7e2d015f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "05931f2d_9f91d266",
        "filename": "errors/errors.go",
        "patchSetId": 2
      },
      "lineNbr": 51,
      "author": {
        "id": 14570
      },
      "writtenOn": "2018-09-21T21:05:22Z",
      "side": 1,
      "message": "Here you have a truly new function not covered in the draft design. We\u0027d have to bikeshed the name (\"Annotate\" is a long-winded way of saying \"Note\", IMO; Cheney\u0027s package calls this \"Wrap\"). We\u0027d also want an \"f\" variant. But then whither fmt.Errorf?",
      "range": {
        "startLine": 51,
        "startChar": 5,
        "endLine": 51,
        "endChar": 13
      },
      "revId": "1582da5076d596da082d552f332679fb7e2d015f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7b4d0710_9c8192dd",
        "filename": "errors/errors.go",
        "patchSetId": 2
      },
      "lineNbr": 51,
      "author": {
        "id": 5305
      },
      "writtenOn": "2018-09-21T21:53:53Z",
      "side": 1,
      "message": "Perhaps theres should be Errorf/Annotatef functions in here to stand in for fmt.Errorf et al.",
      "parentUuid": "05931f2d_9f91d266",
      "range": {
        "startLine": 51,
        "startChar": 5,
        "endLine": 51,
        "endChar": 13
      },
      "revId": "1582da5076d596da082d552f332679fb7e2d015f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f8c9c064_baa15abf",
        "filename": "errors/errors.go",
        "patchSetId": 2
      },
      "lineNbr": 51,
      "author": {
        "id": 5182
      },
      "writtenOn": "2018-10-02T16:51:01Z",
      "side": 1,
      "message": "There should be a drop-in replacement package for fmt with an implementation of Errorf to handle this. This is change would give the biggest bang for the buck and is worth giving it a shot.\n\nThere is a value in having an Annotate or Wrap function in this package to support similar functionality without creating a dependency on fmt, but for now I think this is too confusing. I suggest stripping this from the implementation for now.",
      "parentUuid": "7b4d0710_9c8192dd",
      "range": {
        "startLine": 51,
        "startChar": 5,
        "endLine": 51,
        "endChar": 13
      },
      "revId": "1582da5076d596da082d552f332679fb7e2d015f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8bab6cf1_12739b08",
        "filename": "errors/errors.go",
        "patchSetId": 2
      },
      "lineNbr": 84,
      "author": {
        "id": 14570
      },
      "writtenOn": "2018-09-21T21:05:22Z",
      "side": 1,
      "message": "I don\u0027t understand what this means. Equivalent in what way?",
      "range": {
        "startLine": 83,
        "startChar": 1,
        "endLine": 84,
        "endChar": 17
      },
      "revId": "1582da5076d596da082d552f332679fb7e2d015f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "48aa2b61_6243fe8c",
        "filename": "errors/errors.go",
        "patchSetId": 2
      },
      "lineNbr": 84,
      "author": {
        "id": 5305
      },
      "writtenOn": "2018-09-21T21:53:53Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "8bab6cf1_12739b08",
      "range": {
        "startLine": 83,
        "startChar": 1,
        "endLine": 84,
        "endChar": 17
      },
      "revId": "1582da5076d596da082d552f332679fb7e2d015f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f019f085_5b40a344",
        "filename": "errors/errors.go",
        "patchSetId": 2
      },
      "lineNbr": 84,
      "author": {
        "id": 5182
      },
      "writtenOn": "2018-10-02T16:51:01Z",
      "side": 1,
      "message": "agreed.",
      "parentUuid": "48aa2b61_6243fe8c",
      "range": {
        "startLine": 83,
        "startChar": 1,
        "endLine": 84,
        "endChar": 17
      },
      "revId": "1582da5076d596da082d552f332679fb7e2d015f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "61ae9689_acda2a2c",
        "filename": "errors/errors.go",
        "patchSetId": 2
      },
      "lineNbr": 103,
      "author": {
        "id": 14570
      },
      "writtenOn": "2018-09-21T21:05:22Z",
      "side": 1,
      "message": "Oh, *that* way. But I thought we weren\u0027t doing this?",
      "range": {
        "startLine": 103,
        "startChar": 25,
        "endLine": 103,
        "endChar": 27
      },
      "revId": "1582da5076d596da082d552f332679fb7e2d015f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c2b615b5_d852befb",
        "filename": "errors/errors.go",
        "patchSetId": 2
      },
      "lineNbr": 103,
      "author": {
        "id": 5305
      },
      "writtenOn": "2018-09-21T21:53:53Z",
      "side": 1,
      "message": "We\u0027ve kicked this idea around quite a lot, but never quite settled entirely for or against it. It does allow for some wonderfully simple error handling. From predicate_example_test.go:\n\n  if err :\u003d Do(tries); errors.Is(err, ErrRetriable) { ... }\n\nWith an Iser interface, you can use errors.Is for almost all error tests. Packages can consistently expose all their testable error conditions as values of type error, without exposing the underlying implementation.\n\nI also found Chris Siebenmann feedback on the proposal to make a quite compelling argument on this point:\nhttps://utcc.utoronto.ca/~cks/space/blog/programming/Go2ErrorInspectionViews\n\nBut it does add a fair bit of complexity. As you point out elsewhere, you need to decide whether Is is symmetrical or not, and either choice comes with downsides.\n\nThis may be an area where we need to gain practical experience with the feature before we can really say whether it\u0027s a good idea or not. To do that, we need to have an implementation that can be tested out in practice.",
      "parentUuid": "61ae9689_acda2a2c",
      "range": {
        "startLine": 103,
        "startChar": 25,
        "endLine": 103,
        "endChar": 27
      },
      "revId": "1582da5076d596da082d552f332679fb7e2d015f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1395cf2b_5da153a7",
        "filename": "errors/errors.go",
        "patchSetId": 2
      },
      "lineNbr": 103,
      "author": {
        "id": 14570
      },
      "writtenOn": "2018-09-27T13:16:18Z",
      "side": 1,
      "message": "Chris Siebenmann\u0027s article can also be used to argue the other way:\n\n\u003e I expect that pretty much every boolean \u0027is this a ....\u0027 method call on errors today would likely be more ergonomic if it was expressed as a sentinel value this way.\n\nYes, and that would be an abuse -- it would confuse sentinel errors with xerror-style tags.\n\n\u003e Once general sentinels are available, people may be tempted to implement \u0027is this a temporary error\u0027 and the like purely through sentinels, which would make the error method interface less and less useful.\n\nI\u0027d prefer a world where Temporary was an interface to one where it was a sentinel.",
      "parentUuid": "c2b615b5_d852befb",
      "range": {
        "startLine": 103,
        "startChar": 25,
        "endLine": 103,
        "endChar": 27
      },
      "revId": "1582da5076d596da082d552f332679fb7e2d015f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bda4e12c_c63a2a8c",
        "filename": "errors/errors.go",
        "patchSetId": 2
      },
      "lineNbr": 103,
      "author": {
        "id": 5182
      },
      "writtenOn": "2018-10-02T16:51:01Z",
      "side": 1,
      "message": "I am not fully on board with the abuse argument. I like the sentinel approach personally.\n\nI would punt on NewPredicate for the first version.",
      "parentUuid": "1395cf2b_5da153a7",
      "range": {
        "startLine": 103,
        "startChar": 25,
        "endLine": 103,
        "endChar": 27
      },
      "revId": "1582da5076d596da082d552f332679fb7e2d015f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4d30eaa0_841d55ab",
        "filename": "errors/format.go",
        "patchSetId": 2
      },
      "lineNbr": 14,
      "author": {
        "id": 14570
      },
      "writtenOn": "2018-09-21T21:05:22Z",
      "side": 1,
      "message": "FormatError",
      "range": {
        "startLine": 14,
        "startChar": 4,
        "endLine": 14,
        "endChar": 10
      },
      "revId": "1582da5076d596da082d552f332679fb7e2d015f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "24c36f20_af7dff0a",
        "filename": "errors/format.go",
        "patchSetId": 2
      },
      "lineNbr": 16,
      "author": {
        "id": 5182
      },
      "writtenOn": "2018-10-02T16:51:01Z",
      "side": 1,
      "message": "This really should be called Format and not FormatError. Allowing types to implement both fmt.Formatter and errors.Formatter results in unnecessary ambiguity. It only makes sense for a type to implement one.",
      "revId": "1582da5076d596da082d552f332679fb7e2d015f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "794f8a6f_6d98df5f",
        "filename": "errors/format.go",
        "patchSetId": 2
      },
      "lineNbr": 16,
      "author": {
        "id": 5305
      },
      "writtenOn": "2018-10-02T18:53:07Z",
      "side": 1,
      "message": "The problem is that we want errors produced by this package to respond appropriately to %v and %+v today, with the existing fmt package. The only way I can see to do that is to implement Format.\n\nIf you\u0027ve got a better way, I\u0027m all ears.",
      "parentUuid": "24c36f20_af7dff0a",
      "revId": "1582da5076d596da082d552f332679fb7e2d015f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4e3ccac7_b9fcaffd",
        "filename": "errors/format.go",
        "patchSetId": 2
      },
      "lineNbr": 16,
      "author": {
        "id": 5182
      },
      "writtenOn": "2018-10-03T16:04:43Z",
      "side": 1,
      "message": "The design assumes the implementation is in fmt and it will only work well if it is. I can see this approach as a temporary measure, but I don\u0027t favor an approach where we introduce API that is guaranteed to change again later.\n\nI think we should have a plugin replacement for fmt in x/exp/errors/fmt to use used along with the plugin replacement for errors and then aim to have this in Go core, possibly as an experiment, in 1.13.\n\nI believe we can use mod\u0027s replace directive to manage this in the mean time.",
      "parentUuid": "794f8a6f_6d98df5f",
      "revId": "1582da5076d596da082d552f332679fb7e2d015f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e63ce8ee_1cec759c",
        "filename": "errors/format.go",
        "patchSetId": 2
      },
      "lineNbr": 22,
      "author": {
        "id": 14570
      },
      "writtenOn": "2018-09-21T21:05:22Z",
      "side": 1,
      "message": "How can a package implement an interface?",
      "range": {
        "startLine": 22,
        "startChar": 3,
        "endLine": 22,
        "endChar": 32
      },
      "revId": "1582da5076d596da082d552f332679fb7e2d015f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "958d0c9b_56def605",
        "filename": "errors/format.go",
        "patchSetId": 2
      },
      "lineNbr": 42,
      "author": {
        "id": 5182
      },
      "writtenOn": "2018-10-02T16:51:01Z",
      "side": 1,
      "message": "This should not be in the errors package. Assuming that this ultimately makes its way to pkg errors in core, it would create a dependency on fmt in errors.\n\nThe interface has been designed for the implementation to be in pkg fmt.\n\nI suggest creating a plugin compatible version in x/exp/errors/fmt for this purpose. I am intimately familiar with this package so I can implement the necessary stuff in there.",
      "revId": "1582da5076d596da082d552f332679fb7e2d015f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9982e96e_8393a091",
        "filename": "errors/format.go",
        "patchSetId": 2
      },
      "lineNbr": 69,
      "author": {
        "id": 5182
      },
      "writtenOn": "2018-10-02T16:51:01Z",
      "side": 1,
      "message": "ditto",
      "revId": "1582da5076d596da082d552f332679fb7e2d015f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6e33e480_e72f0ba7",
        "filename": "errors/stack.go",
        "patchSetId": 2
      },
      "lineNbr": 21,
      "author": {
        "id": 14570
      },
      "writtenOn": "2018-09-21T21:05:22Z",
      "side": 1,
      "message": "People will naturally assume that you\u0027re capturing the entire call stack. I\u0027d prefer the word \"Frame\" be used instead of \"Stack,\" though \"NewFrame\" seems wrong to me.",
      "range": {
        "startLine": 21,
        "startChar": 3,
        "endLine": 21,
        "endChar": 11
      },
      "revId": "1582da5076d596da082d552f332679fb7e2d015f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e42bc75b_fdc80ba6",
        "filename": "errors/stack.go",
        "patchSetId": 2
      },
      "lineNbr": 21,
      "author": {
        "id": 5305
      },
      "writtenOn": "2018-09-21T21:53:53Z",
      "side": 1,
      "message": "Yeah, I\u0027m not happy with the naming here.\n\nI think \u0027Stack\u0027 is probably right, because there\u0027s no reason it couldn\u0027t contain a full stack. (You could imagine errors.NewStack/errors.NewFrame functions which capture all or part of the stack respectively.)\n\nNewStack should indicate that it\u0027s only capturing one frame, though. errors.Frame, with the \"New\" implied? Better suggestions welcome.",
      "parentUuid": "6e33e480_e72f0ba7",
      "range": {
        "startLine": 21,
        "startChar": 3,
        "endLine": 21,
        "endChar": 11
      },
      "revId": "1582da5076d596da082d552f332679fb7e2d015f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "735f006f_20110bff",
        "filename": "errors/stack.go",
        "patchSetId": 2
      },
      "lineNbr": 21,
      "author": {
        "id": 5182
      },
      "writtenOn": "2018-10-02T16:51:01Z",
      "side": 1,
      "message": "I expect the underlying data types for a full stack capture vs a Frame would be different.\n\nI like the Frame / NewFrame naming for this implementation.",
      "parentUuid": "e42bc75b_fdc80ba6",
      "range": {
        "startLine": 21,
        "startChar": 3,
        "endLine": 21,
        "endChar": 11
      },
      "revId": "1582da5076d596da082d552f332679fb7e2d015f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b85b2ca6_942fdc15",
        "filename": "errors/stack.go",
        "patchSetId": 2
      },
      "lineNbr": 29,
      "author": {
        "id": 5182
      },
      "writtenOn": "2018-10-02T16:51:01Z",
      "side": 1,
      "message": "A common use of Stack/Frame would be to include it in a custom error type. I think we should allow for the user case where the user embeds the Frame value, as this will allow Frame to implement some standard way of exposing the stack info in a structured way. This has been requested by people.\n\ntype MyError struct {\n   ...\n   errors.Frame\n}\n\nIt is probably fine for Frame to have a String method here, (MyError already implements Error) but it makes me a bit squirmy.",
      "revId": "1582da5076d596da082d552f332679fb7e2d015f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f2faa2d5_1981a77e",
        "filename": "errors/stack.go",
        "patchSetId": 2
      },
      "lineNbr": 42,
      "author": {
        "id": 5182
      },
      "writtenOn": "2018-10-02T16:51:01Z",
      "side": 1,
      "message": "Package errors should not have an dependency on package fmt. Should not be hard to avoid in this case.\n\nAt least add a TODO",
      "revId": "1582da5076d596da082d552f332679fb7e2d015f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bda217f0_1d8875cf",
        "filename": "errors/stack.go",
        "patchSetId": 2
      },
      "lineNbr": 46,
      "author": {
        "id": 5182
      },
      "writtenOn": "2018-10-02T16:51:01Z",
      "side": 1,
      "message": "Stack should probably not implement errors.Formatter for the simple reason it is not an error in and of itself. Embedding it in a custom error type would cause it to implement this interface, causing the error type to print an empty string in the common case if the error itself does not implement this interface.\n\nI suggest something like \n\nfunc (s Stack) Print(p Printer)",
      "revId": "1582da5076d596da082d552f332679fb7e2d015f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fe148153_9499009d",
        "filename": "errors/unwrap.go",
        "patchSetId": 2
      },
      "lineNbr": 12,
      "author": {
        "id": 14570
      },
      "writtenOn": "2018-09-21T21:05:22Z",
      "side": 1,
      "message": "The draft design calls this Wrapper.",
      "range": {
        "startLine": 12,
        "startChar": 5,
        "endLine": 12,
        "endChar": 14
      },
      "revId": "1582da5076d596da082d552f332679fb7e2d015f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "391ee1be_19156591",
        "filename": "errors/unwrap.go",
        "patchSetId": 2
      },
      "lineNbr": 12,
      "author": {
        "id": 5182
      },
      "writtenOn": "2018-10-02T16:51:01Z",
      "side": 1,
      "message": "Some people has suggested to call it this way.\n\nI personally still like Wrapper.",
      "parentUuid": "fe148153_9499009d",
      "range": {
        "startLine": 12,
        "startChar": 5,
        "endLine": 12,
        "endChar": 14
      },
      "revId": "1582da5076d596da082d552f332679fb7e2d015f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0746f0aa_bf566ce1",
        "filename": "errors/unwrap.go",
        "patchSetId": 2
      },
      "lineNbr": 13,
      "author": {
        "id": 14570
      },
      "writtenOn": "2018-09-21T21:05:22Z",
      "side": 1,
      "message": "You used the same phrase \"the error chain\" in the description of FormatError, but the chains aren\u0027t the same. You might want to format nested errors that are implementation details, but not allow programs to traverse them.",
      "range": {
        "startLine": 13,
        "startChar": 37,
        "endLine": 13,
        "endChar": 52
      },
      "revId": "1582da5076d596da082d552f332679fb7e2d015f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9283b84a_3d1f2a18",
        "filename": "errors/unwrap.go",
        "patchSetId": 2
      },
      "lineNbr": 13,
      "author": {
        "id": 5182
      },
      "writtenOn": "2018-10-02T16:51:01Z",
      "side": 1,
      "message": "Correct, they are explicitly distinct concepts, albeit often identical.\n\nWe should different names for these two different concepts.",
      "parentUuid": "0746f0aa_bf566ce1",
      "range": {
        "startLine": 13,
        "startChar": 37,
        "endLine": 13,
        "endChar": 52
      },
      "revId": "1582da5076d596da082d552f332679fb7e2d015f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "23be3f5f_d2ab03d5",
        "filename": "errors/unwrap.go",
        "patchSetId": 2
      },
      "lineNbr": 28,
      "author": {
        "id": 5182
      },
      "writtenOn": "2018-10-02T16:51:01Z",
      "side": 1,
      "message": "As far as I understand English morphology and how it relates to phonology (based on Dutch, actually, and thus strikingly similar), this would be pronounced as \"īsər\" (ice-er), rather than \"izer\" (is-er). Should it not be Isser? Same with Aser below would be pronounced as \"āsər\"(Acer).",
      "revId": "1582da5076d596da082d552f332679fb7e2d015f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8fb2d3ce_add04325",
        "filename": "errors/unwrap.go",
        "patchSetId": 2
      },
      "lineNbr": 48,
      "author": {
        "id": 14570
      },
      "writtenOn": "2018-09-21T21:05:22Z",
      "side": 1,
      "message": "I think you\u0027ve pointed out how confusing this asymmetry can be.",
      "range": {
        "startLine": 43,
        "startChar": 2,
        "endLine": 48,
        "endChar": 3
      },
      "revId": "1582da5076d596da082d552f332679fb7e2d015f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4422c364_2648719d",
        "filename": "errors/unwrap.go",
        "patchSetId": 2
      },
      "lineNbr": 48,
      "author": {
        "id": 5182
      },
      "writtenOn": "2018-10-02T16:51:01Z",
      "side": 1,
      "message": "I would expect only Is on err to be called. This would also be consistent with As.\n\nDo you have a reason to call it both ways? Is this to allow testing on a set of errors?",
      "parentUuid": "8fb2d3ce_add04325",
      "range": {
        "startLine": 43,
        "startChar": 2,
        "endLine": 48,
        "endChar": 3
      },
      "revId": "1582da5076d596da082d552f332679fb7e2d015f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7595dcf4_1c482839",
        "filename": "errors/unwrap.go",
        "patchSetId": 2
      },
      "lineNbr": 48,
      "author": {
        "id": 5305
      },
      "writtenOn": "2018-10-02T18:53:07Z",
      "side": 1,
      "message": "Two reasons:\n\n- Asymmetric identity (a is b, but b is not a) is surprising. Unfortunately, errors.Is is still asymmetric (because only one of the chains is unwrapped), but this does reduce the amount of asymmetry.\n\n- I think there are some very nice patterns enabled by sentinel errors which can perform programmatic identity comparisons. For example, there is no need for io.IsPermission if io.ErrPermission can test itself against syscall.EPERM et al.",
      "parentUuid": "4422c364_2648719d",
      "range": {
        "startLine": 43,
        "startChar": 2,
        "endLine": 48,
        "endChar": 3
      },
      "revId": "1582da5076d596da082d552f332679fb7e2d015f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4d9cd636_9d9b38a6",
        "filename": "errors/unwrap.go",
        "patchSetId": 2
      },
      "lineNbr": 73,
      "author": {
        "id": 14570
      },
      "writtenOn": "2018-09-21T21:05:22Z",
      "side": 1,
      "message": "We would give this another name, to reserve \"As\" for the generic version.",
      "range": {
        "startLine": 73,
        "startChar": 5,
        "endLine": 73,
        "endChar": 7
      },
      "revId": "1582da5076d596da082d552f332679fb7e2d015f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d088d6cf_33bb148b",
        "filename": "errors/unwrap.go",
        "patchSetId": 2
      },
      "lineNbr": 73,
      "author": {
        "id": 5182
      },
      "writtenOn": "2018-10-02T16:51:01Z",
      "side": 1,
      "message": "Russ has suggested, IIRC, implementing this as an alternative to using templates:\n\nfunc As(err error, target interface{}) bool\n\nallowing for something like\n\nif as :\u003d \u0026PathError{}; errors.As(err, \u0026as) {\n    // do something \n}\n\nCompare this to\n\nif as, ok :\u003d errors.As(err, \u0026PathError{}); ok {\n    // do something\n}\n\nor \n\nif as, ok :\u003d errors.As(*PathError)(err); ok {\n    // do something\n}\n\nusing generics\n\nNote that this alternative is even shorter than using generics. It can be implemented with minimal use of reflection.",
      "parentUuid": "4d9cd636_9d9b38a6",
      "range": {
        "startLine": 73,
        "startChar": 5,
        "endLine": 73,
        "endChar": 7
      },
      "revId": "1582da5076d596da082d552f332679fb7e2d015f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "edbb28b2_f0db2892",
        "filename": "errors/unwrap.go",
        "patchSetId": 2
      },
      "lineNbr": 73,
      "author": {
        "id": 5305
      },
      "writtenOn": "2018-10-02T18:53:07Z",
      "side": 1,
      "message": "I like this.",
      "parentUuid": "d088d6cf_33bb148b",
      "range": {
        "startLine": 73,
        "startChar": 5,
        "endLine": 73,
        "endChar": 7
      },
      "revId": "1582da5076d596da082d552f332679fb7e2d015f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    }
  ]
}