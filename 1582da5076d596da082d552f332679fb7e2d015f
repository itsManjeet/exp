{
  "comments": [
    {
      "key": {
        "uuid": "124aacb3_2ba6dfac",
        "filename": "errors/errors.go",
        "patchSetId": 2
      },
      "lineNbr": 28,
      "author": {
        "id": 14570
      },
      "writtenOn": "2018-09-21T21:05:22Z",
      "side": 1,
      "message": "Our draft design never talked about how to create errors. You could argue, though, that this package should replace the standard errors package, and this is implementation of errors.New.",
      "range": {
        "startLine": 23,
        "startChar": 0,
        "endLine": 28,
        "endChar": 1
      },
      "revId": "1582da5076d596da082d552f332679fb7e2d015f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "375e6b65_ab8be538",
        "filename": "errors/errors.go",
        "patchSetId": 2
      },
      "lineNbr": 28,
      "author": {
        "id": 5305
      },
      "writtenOn": "2018-09-21T21:53:53Z",
      "side": 1,
      "message": "Yes, since this is intended to explore ideas that may be incorporated into the standard errors package it should be usable as a drop-in replacement to that package.",
      "parentUuid": "124aacb3_2ba6dfac",
      "range": {
        "startLine": 23,
        "startChar": 0,
        "endLine": 28,
        "endChar": 1
      },
      "revId": "1582da5076d596da082d552f332679fb7e2d015f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "05931f2d_9f91d266",
        "filename": "errors/errors.go",
        "patchSetId": 2
      },
      "lineNbr": 51,
      "author": {
        "id": 14570
      },
      "writtenOn": "2018-09-21T21:05:22Z",
      "side": 1,
      "message": "Here you have a truly new function not covered in the draft design. We\u0027d have to bikeshed the name (\"Annotate\" is a long-winded way of saying \"Note\", IMO; Cheney\u0027s package calls this \"Wrap\"). We\u0027d also want an \"f\" variant. But then whither fmt.Errorf?",
      "range": {
        "startLine": 51,
        "startChar": 5,
        "endLine": 51,
        "endChar": 13
      },
      "revId": "1582da5076d596da082d552f332679fb7e2d015f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7b4d0710_9c8192dd",
        "filename": "errors/errors.go",
        "patchSetId": 2
      },
      "lineNbr": 51,
      "author": {
        "id": 5305
      },
      "writtenOn": "2018-09-21T21:53:53Z",
      "side": 1,
      "message": "Perhaps theres should be Errorf/Annotatef functions in here to stand in for fmt.Errorf et al.",
      "parentUuid": "05931f2d_9f91d266",
      "range": {
        "startLine": 51,
        "startChar": 5,
        "endLine": 51,
        "endChar": 13
      },
      "revId": "1582da5076d596da082d552f332679fb7e2d015f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8bab6cf1_12739b08",
        "filename": "errors/errors.go",
        "patchSetId": 2
      },
      "lineNbr": 84,
      "author": {
        "id": 14570
      },
      "writtenOn": "2018-09-21T21:05:22Z",
      "side": 1,
      "message": "I don\u0027t understand what this means. Equivalent in what way?",
      "range": {
        "startLine": 83,
        "startChar": 1,
        "endLine": 84,
        "endChar": 17
      },
      "revId": "1582da5076d596da082d552f332679fb7e2d015f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "48aa2b61_6243fe8c",
        "filename": "errors/errors.go",
        "patchSetId": 2
      },
      "lineNbr": 84,
      "author": {
        "id": 5305
      },
      "writtenOn": "2018-09-21T21:53:53Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "8bab6cf1_12739b08",
      "range": {
        "startLine": 83,
        "startChar": 1,
        "endLine": 84,
        "endChar": 17
      },
      "revId": "1582da5076d596da082d552f332679fb7e2d015f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "61ae9689_acda2a2c",
        "filename": "errors/errors.go",
        "patchSetId": 2
      },
      "lineNbr": 103,
      "author": {
        "id": 14570
      },
      "writtenOn": "2018-09-21T21:05:22Z",
      "side": 1,
      "message": "Oh, *that* way. But I thought we weren\u0027t doing this?",
      "range": {
        "startLine": 103,
        "startChar": 25,
        "endLine": 103,
        "endChar": 27
      },
      "revId": "1582da5076d596da082d552f332679fb7e2d015f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c2b615b5_d852befb",
        "filename": "errors/errors.go",
        "patchSetId": 2
      },
      "lineNbr": 103,
      "author": {
        "id": 5305
      },
      "writtenOn": "2018-09-21T21:53:53Z",
      "side": 1,
      "message": "We\u0027ve kicked this idea around quite a lot, but never quite settled entirely for or against it. It does allow for some wonderfully simple error handling. From predicate_example_test.go:\n\n  if err :\u003d Do(tries); errors.Is(err, ErrRetriable) { ... }\n\nWith an Iser interface, you can use errors.Is for almost all error tests. Packages can consistently expose all their testable error conditions as values of type error, without exposing the underlying implementation.\n\nI also found Chris Siebenmann feedback on the proposal to make a quite compelling argument on this point:\nhttps://utcc.utoronto.ca/~cks/space/blog/programming/Go2ErrorInspectionViews\n\nBut it does add a fair bit of complexity. As you point out elsewhere, you need to decide whether Is is symmetrical or not, and either choice comes with downsides.\n\nThis may be an area where we need to gain practical experience with the feature before we can really say whether it\u0027s a good idea or not. To do that, we need to have an implementation that can be tested out in practice.",
      "parentUuid": "61ae9689_acda2a2c",
      "range": {
        "startLine": 103,
        "startChar": 25,
        "endLine": 103,
        "endChar": 27
      },
      "revId": "1582da5076d596da082d552f332679fb7e2d015f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1395cf2b_5da153a7",
        "filename": "errors/errors.go",
        "patchSetId": 2
      },
      "lineNbr": 103,
      "author": {
        "id": 14570
      },
      "writtenOn": "2018-09-27T13:16:18Z",
      "side": 1,
      "message": "Chris Siebenmann\u0027s article can also be used to argue the other way:\n\n\u003e I expect that pretty much every boolean \u0027is this a ....\u0027 method call on errors today would likely be more ergonomic if it was expressed as a sentinel value this way.\n\nYes, and that would be an abuse -- it would confuse sentinel errors with xerror-style tags.\n\n\u003e Once general sentinels are available, people may be tempted to implement \u0027is this a temporary error\u0027 and the like purely through sentinels, which would make the error method interface less and less useful.\n\nI\u0027d prefer a world where Temporary was an interface to one where it was a sentinel.",
      "parentUuid": "c2b615b5_d852befb",
      "range": {
        "startLine": 103,
        "startChar": 25,
        "endLine": 103,
        "endChar": 27
      },
      "revId": "1582da5076d596da082d552f332679fb7e2d015f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4d30eaa0_841d55ab",
        "filename": "errors/format.go",
        "patchSetId": 2
      },
      "lineNbr": 14,
      "author": {
        "id": 14570
      },
      "writtenOn": "2018-09-21T21:05:22Z",
      "side": 1,
      "message": "FormatError",
      "range": {
        "startLine": 14,
        "startChar": 4,
        "endLine": 14,
        "endChar": 10
      },
      "revId": "1582da5076d596da082d552f332679fb7e2d015f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e63ce8ee_1cec759c",
        "filename": "errors/format.go",
        "patchSetId": 2
      },
      "lineNbr": 22,
      "author": {
        "id": 14570
      },
      "writtenOn": "2018-09-21T21:05:22Z",
      "side": 1,
      "message": "How can a package implement an interface?",
      "range": {
        "startLine": 22,
        "startChar": 3,
        "endLine": 22,
        "endChar": 32
      },
      "revId": "1582da5076d596da082d552f332679fb7e2d015f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6e33e480_e72f0ba7",
        "filename": "errors/stack.go",
        "patchSetId": 2
      },
      "lineNbr": 21,
      "author": {
        "id": 14570
      },
      "writtenOn": "2018-09-21T21:05:22Z",
      "side": 1,
      "message": "People will naturally assume that you\u0027re capturing the entire call stack. I\u0027d prefer the word \"Frame\" be used instead of \"Stack,\" though \"NewFrame\" seems wrong to me.",
      "range": {
        "startLine": 21,
        "startChar": 3,
        "endLine": 21,
        "endChar": 11
      },
      "revId": "1582da5076d596da082d552f332679fb7e2d015f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e42bc75b_fdc80ba6",
        "filename": "errors/stack.go",
        "patchSetId": 2
      },
      "lineNbr": 21,
      "author": {
        "id": 5305
      },
      "writtenOn": "2018-09-21T21:53:53Z",
      "side": 1,
      "message": "Yeah, I\u0027m not happy with the naming here.\n\nI think \u0027Stack\u0027 is probably right, because there\u0027s no reason it couldn\u0027t contain a full stack. (You could imagine errors.NewStack/errors.NewFrame functions which capture all or part of the stack respectively.)\n\nNewStack should indicate that it\u0027s only capturing one frame, though. errors.Frame, with the \"New\" implied? Better suggestions welcome.",
      "parentUuid": "6e33e480_e72f0ba7",
      "range": {
        "startLine": 21,
        "startChar": 3,
        "endLine": 21,
        "endChar": 11
      },
      "revId": "1582da5076d596da082d552f332679fb7e2d015f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fe148153_9499009d",
        "filename": "errors/unwrap.go",
        "patchSetId": 2
      },
      "lineNbr": 12,
      "author": {
        "id": 14570
      },
      "writtenOn": "2018-09-21T21:05:22Z",
      "side": 1,
      "message": "The draft design calls this Wrapper.",
      "range": {
        "startLine": 12,
        "startChar": 5,
        "endLine": 12,
        "endChar": 14
      },
      "revId": "1582da5076d596da082d552f332679fb7e2d015f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0746f0aa_bf566ce1",
        "filename": "errors/unwrap.go",
        "patchSetId": 2
      },
      "lineNbr": 13,
      "author": {
        "id": 14570
      },
      "writtenOn": "2018-09-21T21:05:22Z",
      "side": 1,
      "message": "You used the same phrase \"the error chain\" in the description of FormatError, but the chains aren\u0027t the same. You might want to format nested errors that are implementation details, but not allow programs to traverse them.",
      "range": {
        "startLine": 13,
        "startChar": 37,
        "endLine": 13,
        "endChar": 52
      },
      "revId": "1582da5076d596da082d552f332679fb7e2d015f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8fb2d3ce_add04325",
        "filename": "errors/unwrap.go",
        "patchSetId": 2
      },
      "lineNbr": 48,
      "author": {
        "id": 14570
      },
      "writtenOn": "2018-09-21T21:05:22Z",
      "side": 1,
      "message": "I think you\u0027ve pointed out how confusing this asymmetry can be.",
      "range": {
        "startLine": 43,
        "startChar": 2,
        "endLine": 48,
        "endChar": 3
      },
      "revId": "1582da5076d596da082d552f332679fb7e2d015f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4d9cd636_9d9b38a6",
        "filename": "errors/unwrap.go",
        "patchSetId": 2
      },
      "lineNbr": 73,
      "author": {
        "id": 14570
      },
      "writtenOn": "2018-09-21T21:05:22Z",
      "side": 1,
      "message": "We would give this another name, to reserve \"As\" for the generic version.",
      "range": {
        "startLine": 73,
        "startChar": 5,
        "endLine": 73,
        "endChar": 7
      },
      "revId": "1582da5076d596da082d552f332679fb7e2d015f",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    }
  ]
}