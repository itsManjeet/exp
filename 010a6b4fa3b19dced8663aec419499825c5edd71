{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "2e59a713_b8d6f11e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 49673
      },
      "writtenOn": "2022-04-14T06:36:37Z",
      "side": 1,
      "message": "Please take a look, thanks!\n\nSync with previous CL without any modifications.\n\nTips:\n- This CL also fixes a minor bug for slices/zsordered.go when sorting float64 slice. (`!(a\u003cb)` doesn\u0027t equal to `(a\u003e\u003db)`)\n- Use a 64-bit XORSHIFT",
      "revId": "010a6b4fa3b19dced8663aec419499825c5edd71",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a2046b5f_5574f245",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 5200
      },
      "writtenOn": "2022-04-14T16:43:05Z",
      "side": 1,
      "message": "Where is gen_sort_variants.go?\n",
      "revId": "010a6b4fa3b19dced8663aec419499825c5edd71",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3fffa7ce_5a4a8b2f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 49673
      },
      "writtenOn": "2022-04-14T17:20:52Z",
      "side": 1,
      "message": "It locates in the Go repo, we can generate these codes by  `go run gen_sort_variants.go -generic`, ref https://go-review.googlesource.com/c/go/+/353069",
      "parentUuid": "a2046b5f_5574f245",
      "revId": "010a6b4fa3b19dced8663aec419499825c5edd71",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a2e76dc1_c3707f3b",
        "filename": "slices/sort.go",
        "patchSetId": 5
      },
      "lineNbr": 32,
      "author": {
        "id": 5200
      },
      "writtenOn": "2022-04-14T16:43:05Z",
      "side": 1,
      "message": "I think the outer cast here is unnecessary.\n\nThe stdlib needs some of them because we need to bootstrap from 1.4, and 1.4 doesn\u0027t allow signed things on the RHS of a shift. But a signed RHS here should be fine.",
      "revId": "010a6b4fa3b19dced8663aec419499825c5edd71",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b8b0c6d5_3957f4cb",
        "filename": "slices/sort.go",
        "patchSetId": 5
      },
      "lineNbr": 32,
      "author": {
        "id": 49673
      },
      "writtenOn": "2022-04-14T17:20:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a2e76dc1_c3707f3b",
      "revId": "010a6b4fa3b19dced8663aec419499825c5edd71",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "25e500fe_44a5acd1",
        "filename": "slices/zsortordered.go",
        "patchSetId": 5
      },
      "lineNbr": 110,
      "author": {
        "id": 49673
      },
      "writtenOn": "2022-04-14T17:20:52Z",
      "side": 1,
      "message": "This case we can ensure that `data[a-1]` always smaller or equal to `data[pivot]`. So if `(data[a-1] \u003e\u003d data[pivot])` is true, we can say that `data[a-1]\u003d\u003ddata[pivot]`.\n\nFor the float64 slice, it has a bad case, so we should use `(a\u003e\u003db)` instead of `!(a\u003cb)` to handle NaNs. For example, `!(1.0\u003cNaN)` is true, but 1.0 !\u003d NaN.",
      "revId": "010a6b4fa3b19dced8663aec419499825c5edd71",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "05f7cfc6_8d4bea89",
        "filename": "slices/zsortordered.go",
        "patchSetId": 5
      },
      "lineNbr": 416,
      "author": {
        "id": 5200
      },
      "writtenOn": "2022-04-14T16:43:05Z",
      "side": 1,
      "message": "Why is this changing? To handle NaNs differently somehow?\n\nI feel like this should be in a separate CL. With a test.",
      "revId": "010a6b4fa3b19dced8663aec419499825c5edd71",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f3f71043_0b1dbc02",
        "filename": "slices/zsortordered.go",
        "patchSetId": 5
      },
      "lineNbr": 416,
      "author": {
        "id": 49673
      },
      "writtenOn": "2022-04-14T17:20:52Z",
      "side": 1,
      "message": "\u003e Why is this changing? To handle NaNs differently somehow?\nYes! For the float64 slice, we can not say that  !(a\u003cb)  is always equal to  (a\u003e\u003db).\n\n```\nvar x float64\nprintln(!(math.NaN() \u003c x)) // true\nprintln(math.NaN() \u003e\u003d x) // false\n```\n\nWithout this change, the test for unstable sort will fail.\n\nComment a bad case in the `zsortordered.go`.\n\nBut for StableSort, using the previous implementation is better. Agree it should be in a separate CL with a test.",
      "parentUuid": "05f7cfc6_8d4bea89",
      "revId": "010a6b4fa3b19dced8663aec419499825c5edd71",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "19759d25_f3a8ee97",
        "filename": "slices/zsortordered.go",
        "patchSetId": 5
      },
      "lineNbr": 416,
      "author": {
        "id": 30696
      },
      "writtenOn": "2022-04-14T17:31:00Z",
      "side": 1,
      "message": "Just a note that this has to be 100% synced with the main repo, and whatever change is done should be done in the templated code in gen_sort_variants.go",
      "parentUuid": "f3f71043_0b1dbc02",
      "revId": "010a6b4fa3b19dced8663aec419499825c5edd71",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a301ff27_e7e5d2ed",
        "filename": "slices/zsortordered.go",
        "patchSetId": 5
      },
      "lineNbr": 416,
      "author": {
        "id": 44188
      },
      "writtenOn": "2022-04-15T08:33:20Z",
      "side": 1,
      "message": "Agree! Create a related CL https://go-review.googlesource.com/c/go/+/400534, this CL will sync with this change(please merge CL 400534 before this).\n\nWe need to keep the previous implementation for StableSort.",
      "parentUuid": "19759d25_f3a8ee97",
      "revId": "010a6b4fa3b19dced8663aec419499825c5edd71",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "04feee54_494b1169",
        "filename": "slices/zsortordered.go",
        "patchSetId": 5
      },
      "lineNbr": 416,
      "author": {
        "id": 49673
      },
      "writtenOn": "2022-04-15T14:54:24Z",
      "side": 1,
      "message": "Update: add a simple fuzz test for this case in sort_test.go:TestSortOrderedConsistency as Eli suggested. \n\nIf we use the original gen_sort_variants.go to generate these codes, the test will fail. With CL 400534, the test will succeed.\n\nThe test will check\n`SortStableFunc(data1, func(a, b float64) bool {return a \u003c b})`\nEqual to \n`stableOrdered(data2, len(data2))`\n\nIn this case, if we replace `!(a\u003cb)` to `(a\u003e\u003db)` in stableOrdered will destroy the consistency.",
      "parentUuid": "a301ff27_e7e5d2ed",
      "revId": "010a6b4fa3b19dced8663aec419499825c5edd71",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}