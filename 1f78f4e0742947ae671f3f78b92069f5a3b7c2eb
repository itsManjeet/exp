{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "f495d28c_68e75a52",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-10-19T15:37:25Z",
      "side": 1,
      "message": "TryBots beginning. Status page: https://farmer.golang.org/try?commit\u003d1f78f4e0\n",
      "tag": "autogenerated:trybots~beginning",
      "revId": "1f78f4e0742947ae671f3f78b92069f5a3b7c2eb",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6aa15b0d_c765fc72",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-10-19T15:38:32Z",
      "side": 1,
      "message": "Build is still in progress... Status page: https://farmer.golang.org/try?commit\u003d1f78f4e0\nFailed on linux-amd64: https://storage.googleapis.com/go-build-log/1f068f0d/linux-amd64_8e8e2524.log\nOther builds still in progress; subsequent failure notices suppressed until final report.\n\nConsult https://build.golang.org/ to see whether they are new failures. Keep in mind that TryBots currently test *exactly* your git commit, without rebasing. If your commit\u0027s git parent is old, the failure might\u0027ve already been fixed.\n",
      "parentUuid": "f495d28c_68e75a52",
      "tag": "autogenerated:trybots~progress",
      "revId": "1f78f4e0742947ae671f3f78b92069f5a3b7c2eb",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8c07a16c_82b57610",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-10-19T15:39:10Z",
      "side": 1,
      "message": "4 of 4 TryBots failed.\nFailed on linux-amd64: https://storage.googleapis.com/go-build-log/1f068f0d/linux-amd64_8e8e2524.log\nFailed on linux-amd64-race: https://storage.googleapis.com/go-build-log/1f068f0d/linux-amd64-race_dde468b0.log\nFailed on windows-amd64-2016: https://storage.googleapis.com/go-build-log/1f068f0d/windows-amd64-2016_f928c9e9.log\nFailed on windows-386-2008: https://storage.googleapis.com/go-build-log/1f068f0d/windows-386-2008_33b98101.log\n\nConsult https://build.golang.org/ to see whether they are new failures. Keep in mind that TryBots currently test *exactly* your git commit, without rebasing. If your commit\u0027s git parent is old, the failure might\u0027ve already been fixed.\n\n",
      "parentUuid": "f495d28c_68e75a52",
      "tag": "autogenerated:trybots~failed",
      "revId": "1f78f4e0742947ae671f3f78b92069f5a3b7c2eb",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b4b9ba9f_df5f0e5d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 14570
      },
      "writtenOn": "2022-10-26T15:06:24Z",
      "side": 1,
      "message": "The upgrade to tools v0.2.0 fixed the problem that these changes were made for, so I\u0027m going to abandon this CL. Thanks for the review.\n\nOnly one of your comments still applies, and I made a CL for it.",
      "revId": "1f78f4e0742947ae671f3f78b92069f5a3b7c2eb",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4c234599_b11f712d",
        "filename": "apidiff/apidiff_test.go",
        "patchSetId": 1
      },
      "lineNbr": 70,
      "author": {
        "id": 31647
      },
      "writtenOn": "2022-10-19T17:21:37Z",
      "side": 1,
      "message": "Not really a review comment, but genuinely curious about how these permission bits were chosen. Most commonly I see 0755 for dirs and 0644 for files, but in this case the dir permissions are more restrictive and the file permissions more permissive. Is there a reason?",
      "range": {
        "startLine": 70,
        "startChar": 59,
        "endLine": 70,
        "endChar": 62
      },
      "revId": "1f78f4e0742947ae671f3f78b92069f5a3b7c2eb",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e219b991_3bdf8539",
        "filename": "apidiff/apidiff_test.go",
        "patchSetId": 1
      },
      "lineNbr": 70,
      "author": {
        "id": 14570
      },
      "writtenOn": "2022-10-26T15:06:24Z",
      "side": 1,
      "message": "No reason for go+rw. Removed. See https://go-review.googlesource.com/c/exp/+/445577.",
      "parentUuid": "4c234599_b11f712d",
      "range": {
        "startLine": 70,
        "startChar": 59,
        "endLine": 70,
        "endChar": 62
      },
      "revId": "1f78f4e0742947ae671f3f78b92069f5a3b7c2eb",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "64fe12a6_8dfd3ea9",
        "filename": "apidiff/compatibility.go",
        "patchSetId": 1
      },
      "lineNbr": 284,
      "author": {
        "id": 31647
      },
      "writtenOn": "2022-10-19T17:21:37Z",
      "side": 1,
      "message": "Optional: Is the \u0027o\u0027 here for \u0027old\u0027? If so, maybe call it \u0027oldtn\u0027 or \u0027oldName\u0027 to be consistent with oldt, newt.\n\nBut also, I assume this is comparing two method sets of the same logical name in the API. In that case, maybe it is more logically correct to pass in the single name. In this case, I think it could just be a string.\n\ncheckMethodSet(typeName string, oldt, newt types.Type, addcompat bool)",
      "range": {
        "startLine": 284,
        "startChar": 32,
        "endLine": 284,
        "endChar": 35
      },
      "revId": "1f78f4e0742947ae671f3f78b92069f5a3b7c2eb",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "52bb8a81_94c5ba41",
        "filename": "apidiff/compatibility.go",
        "patchSetId": 1
      },
      "lineNbr": 294,
      "author": {
        "id": 31647
      },
      "writtenOn": "2022-10-19T17:21:37Z",
      "side": 1,
      "message": "Were these commented print statements left in intentionally?\n\nProbably best to remove.",
      "range": {
        "startLine": 294,
        "startChar": 2,
        "endLine": 294,
        "endChar": 40
      },
      "revId": "1f78f4e0742947ae671f3f78b92069f5a3b7c2eb",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "abd0925f_1b92c3f8",
        "filename": "apidiff/compatibility.go",
        "patchSetId": 1
      },
      "lineNbr": 294,
      "author": {
        "id": 14570
      },
      "writtenOn": "2022-10-26T15:06:24Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "52bb8a81_94c5ba41",
      "range": {
        "startLine": 294,
        "startChar": 2,
        "endLine": 294,
        "endChar": 40
      },
      "revId": "1f78f4e0742947ae671f3f78b92069f5a3b7c2eb",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "403619e0_7b788f72",
        "filename": "apidiff/compatibility.go",
        "patchSetId": 1
      },
      "lineNbr": 365,
      "author": {
        "id": 31647
      },
      "writtenOn": "2022-10-19T17:21:37Z",
      "side": 1,
      "message": "This is a perfectly reasonable name, but everywhere else that such a function exists it is called \u0027deref\u0027 (there are probably a dozen instances of this function in x/tools...)",
      "range": {
        "startLine": 365,
        "startChar": 5,
        "endLine": 365,
        "endChar": 15
      },
      "revId": "1f78f4e0742947ae671f3f78b92069f5a3b7c2eb",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8f835156_9b4885a4",
        "filename": "apidiff/compatibility.go",
        "patchSetId": 1
      },
      "lineNbr": 365,
      "author": {
        "id": 14570
      },
      "writtenOn": "2022-10-26T15:06:24Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "403619e0_7b788f72",
      "range": {
        "startLine": 365,
        "startChar": 5,
        "endLine": 365,
        "endChar": 15
      },
      "revId": "1f78f4e0742947ae671f3f78b92069f5a3b7c2eb",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "27633039_fd6682ed",
        "filename": "apidiff/compatibility.go",
        "patchSetId": 1
      },
      "lineNbr": 389,
      "author": {
        "id": 31647
      },
      "writtenOn": "2022-10-19T17:21:37Z",
      "side": 1,
      "message": "This function is probably unused now, right?",
      "range": {
        "startLine": 389,
        "startChar": 5,
        "endLine": 389,
        "endChar": 22
      },
      "revId": "1f78f4e0742947ae671f3f78b92069f5a3b7c2eb",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7419cf9b_7d09f30d",
        "filename": "apidiff/compatibility.go",
        "patchSetId": 1
      },
      "lineNbr": 389,
      "author": {
        "id": 14570
      },
      "writtenOn": "2022-10-26T15:06:24Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "27633039_fd6682ed",
      "range": {
        "startLine": 389,
        "startChar": 5,
        "endLine": 389,
        "endChar": 22
      },
      "revId": "1f78f4e0742947ae671f3f78b92069f5a3b7c2eb",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "16cfb568_e19aaab1",
        "filename": "apidiff/messageset.go",
        "patchSetId": 1
      },
      "lineNbr": 27,
      "author": {
        "id": 31647
      },
      "writtenOn": "2022-10-19T17:21:37Z",
      "side": 1,
      "message": "Forgive my naive question, but is it possible that we\u0027d add a message once with a types.Object, and then again with a string key, such that they are duplicated upon collect but not de-duplicated on insertion?\n\nIt\u0027s a little hard to reason about, so I\u0027m wondering if it can be easily clarified. Could we just always use the \"objectString\" as the key?",
      "range": {
        "startLine": 27,
        "startChar": 24,
        "endLine": 27,
        "endChar": 35
      },
      "revId": "1f78f4e0742947ae671f3f78b92069f5a3b7c2eb",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "96d045f1_dc1fa9c9",
        "filename": "apidiff/messageset.go",
        "patchSetId": 1
      },
      "lineNbr": 27,
      "author": {
        "id": 14570
      },
      "writtenOn": "2022-10-26T15:06:24Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "16cfb568_e19aaab1",
      "range": {
        "startLine": 27,
        "startChar": 24,
        "endLine": 27,
        "endChar": 35
      },
      "revId": "1f78f4e0742947ae671f3f78b92069f5a3b7c2eb",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one Code-Review+2 is required. Self review is not allowed."
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Code-Review=MAX,user=non_uploader"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "1f78f4e0742947ae671f3f78b92069f5a3b7c2eb",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Do-Not-Review",
        "description": {
          "value": "Changes that have DO NOT REVIEW in their commit message are not submittable."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (R|r)(E|e)(V|v)(I|i)(E|e)(W|w).*\""
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:false"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (R|r)(E|e)(V|v)(I|i)(E|e)(W|w).*\""},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (R|r)(E|e)(V|v)(I|i)(E|e)(W|w).*\""]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "1f78f4e0742947ae671f3f78b92069f5a3b7c2eb",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Do-Not-Submit",
        "description": {
          "value": "Changes that have DO NOT SUBMIT in their commit message are not submittable."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (S|s)(U|u)(B|b)(M|m)(I|i)(T|t).*\""
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:false"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (S|s)(U|u)(B|b)(M|m)(I|i)(T|t).*\""},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (S|s)(U|u)(B|b)(M|m)(I|i)(T|t).*\""]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "1f78f4e0742947ae671f3f78b92069f5a3b7c2eb",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "No-Holds",
        "description": {
          "value": "Changes with a Hold+1 vote are not submittable."
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "NOT label:Hold\u003d1"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"NOT label:Hold=1"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Hold=1"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "1f78f4e0742947ae671f3f78b92069f5a3b7c2eb",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "1f78f4e0742947ae671f3f78b92069f5a3b7c2eb",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}