{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "52365e04_527f3386",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2023-08-08T14:31:19Z",
      "side": 1,
      "message": "TryBots beginning. Status page: https://farmer.golang.org/try?commit\u003d2d61a40a\n",
      "tag": "autogenerated:trybots~beginning",
      "revId": "2d61a40a6691621d66b31003524d5c85119afdde",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9a40cad5_1061e3ef",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2023-08-08T14:33:44Z",
      "side": 1,
      "message": "TryBots are happy.\n\n",
      "parentUuid": "52365e04_527f3386",
      "tag": "autogenerated:trybots~happy",
      "revId": "2d61a40a6691621d66b31003524d5c85119afdde",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f711b42b_4059f375",
        "filename": "jsonrpc2/conn.go",
        "patchSetId": 1
      },
      "lineNbr": 156,
      "author": {
        "id": 6365
      },
      "writtenOn": "2023-08-08T14:30:33Z",
      "side": 1,
      "message": "I think we need to record a `Finished` event here.\n\n```suggestion\n\terr \u003d errors.Errorf(\"marshaling call parameters: %w\", err)\n\tFinished.Record(ctx, 1, event.Value(\"error\", err))\n\tresult.resultBox \u003c- asyncResult{err: err}\n```",
      "range": {
        "startLine": 156,
        "startChar": 0,
        "endLine": 156,
        "endChar": 92
      },
      "revId": "2d61a40a6691621d66b31003524d5c85119afdde",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "dac2e3c8_ca099975",
        "filename": "jsonrpc2/conn.go",
        "patchSetId": 1
      },
      "lineNbr": 156,
      "author": {
        "id": 56561
      },
      "writtenOn": "2023-08-08T20:17:33Z",
      "side": 1,
      "message": "Done, but should\u0027nt Finished.Record be called in (*AsyncCall).Await intead?",
      "parentUuid": "f711b42b_4059f375",
      "range": {
        "startLine": 156,
        "startChar": 0,
        "endLine": 156,
        "endChar": 92
      },
      "revId": "2d61a40a6691621d66b31003524d5c85119afdde",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8c7cff6a_f32ba30d",
        "filename": "jsonrpc2/conn.go",
        "patchSetId": 1
      },
      "lineNbr": 156,
      "author": {
        "id": 6365
      },
      "writtenOn": "2023-08-08T20:32:39Z",
      "side": 1,
      "message": "Hmm. Yeah, probably! Oddly, it seems to not be incremented for `Call` RPCs at all today:\nhttps://cs.opensource.google/search?q\u003dFinished\u0026ss\u003dgo%2Fx%2Fexp:jsonrpc2%2F",
      "parentUuid": "dac2e3c8_ca099975",
      "range": {
        "startLine": 156,
        "startChar": 0,
        "endLine": 156,
        "endChar": 92
      },
      "revId": "2d61a40a6691621d66b31003524d5c85119afdde",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2ca3af3c_c3f7c798",
        "filename": "jsonrpc2/conn.go",
        "patchSetId": 1
      },
      "lineNbr": 156,
      "author": {
        "id": 56561
      },
      "writtenOn": "2023-08-08T21:07:00Z",
      "side": 1,
      "message": "`(*AsyncCall).Await` can be called several times for a same instance. Should we ignore that and possibly call `Finished.Record` also several times for one RPC call, as we do for `event.End`, or should we add a \"recorded\" (or any other name) bool field into `asyncResult` to avoid that?\n\nOtherwise, we can call `Finished.Record` in `(*Connection).Call` as you suggested AND in `(*AsyncCall).Await` but only for `case response :\u003d \u003c-a.response:`. But in this case, context cancelled case won\u0027t be recorded...\n\nPerhaps have you another idea in mind?",
      "parentUuid": "8c7cff6a_f32ba30d",
      "range": {
        "startLine": 156,
        "startChar": 0,
        "endLine": 156,
        "endChar": 92
      },
      "revId": "2d61a40a6691621d66b31003524d5c85119afdde",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c5a0f99b_d4165653",
        "filename": "jsonrpc2/conn.go",
        "patchSetId": 1
      },
      "lineNbr": 156,
      "author": {
        "id": 6365
      },
      "writtenOn": "2023-08-08T21:21:52Z",
      "side": 1,
      "message": "Let\u0027s just drop the call to `Finished.Record` in this CL, since it already seems to be missing either way.\n\nProbably the right place to put the `Finished.Record` call is next to the `event.End(ctx, â€¦)` call, but that can be done in a separate change. (Maybe the `AsyncCall` struct needs a `sync.Once`?)",
      "parentUuid": "2ca3af3c_c3f7c798",
      "range": {
        "startLine": 156,
        "startChar": 0,
        "endLine": 156,
        "endChar": 92
      },
      "revId": "2d61a40a6691621d66b31003524d5c85119afdde",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}