{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "1b348356_70547900",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2021-08-27T20:10:59Z",
      "side": 1,
      "message": "TryBots beginning. Status page: https://farmer.golang.org/try?commit\u003dc21ddef3",
      "tag": "autogenerated:trybots~beginning",
      "revId": "c21ddef3df2529b1c5ca7e5cc5b23a07bc1f7978",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "545478bd_85edc7da",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2021-08-27T20:13:00Z",
      "side": 1,
      "message": "TryBots are happy.\n\n",
      "parentUuid": "1b348356_70547900",
      "tag": "autogenerated:trybots~happy",
      "revId": "c21ddef3df2529b1c5ca7e5cc5b23a07bc1f7978",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "94ef0185_487ff2c9",
        "filename": "cmd/gorelease/gorelease_test.go",
        "patchSetId": 11
      },
      "lineNbr": 27,
      "author": {
        "id": 17092
      },
      "writtenOn": "2021-08-27T22:11:23Z",
      "side": 1,
      "message": "Avoid I/O when initializing a package, especially in a test. The testing package logs I/O and includes that in the cache key for the test result, so if any of the environment variables or files accessed changed, the cached test result should be invalidated.\n\nThat logging doesn\u0027t start until testing.MainStart is called, so it will miss anything that happens during package initialization. That means that if the test passes (caching a positive result), then the user changes PATH or uninstalls git, the cached test result might still be used.\n\nLet\u0027s make this lazy with a sync.Once. Something like:\n\n  var hasGitCache struct{\n    once sync.Once\n    found bool\n  }\n  \n  func hasGit() bool {\n    hasGitCache.once.Do(func() {\n      ...\n    })\n    return hasGitOnce.found\n  }",
      "revId": "c21ddef3df2529b1c5ca7e5cc5b23a07bc1f7978",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f73b6400_29b7b3af",
        "filename": "cmd/gorelease/gorelease_test.go",
        "patchSetId": 11
      },
      "lineNbr": 27,
      "author": {
        "id": 26615
      },
      "writtenOn": "2021-08-27T22:49:02Z",
      "side": 1,
      "message": "Done\n\nThanks for the lesson, that was good to learn about!\n\nAlso, TIL var ... struct. ðŸ˜® Thanks again for all these great lessons.",
      "parentUuid": "94ef0185_487ff2c9",
      "revId": "c21ddef3df2529b1c5ca7e5cc5b23a07bc1f7978",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cb587582_652aa5cf",
        "filename": "cmd/gorelease/gorelease_test.go",
        "patchSetId": 11
      },
      "lineNbr": 288,
      "author": {
        "id": 17092
      },
      "writtenOn": "2021-08-27T22:11:23Z",
      "side": 1,
      "message": "I can\u0027t think of any good way to do this with the current test format. This seems like the simplest solution.",
      "revId": "c21ddef3df2529b1c5ca7e5cc5b23a07bc1f7978",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9ecde761_16799233",
        "filename": "cmd/gorelease/gorelease_test.go",
        "patchSetId": 11
      },
      "lineNbr": 288,
      "author": {
        "id": 26615
      },
      "writtenOn": "2021-08-27T22:49:02Z",
      "side": 1,
      "message": "Ack\n\nThanks for checking!",
      "parentUuid": "cb587582_652aa5cf",
      "revId": "c21ddef3df2529b1c5ca7e5cc5b23a07bc1f7978",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "11db71d6_edbe080f",
        "filename": "cmd/gorelease/gorelease_test.go",
        "patchSetId": 11
      },
      "lineNbr": 421,
      "author": {
        "id": 17092
      },
      "writtenOn": "2021-08-27T22:11:23Z",
      "side": 1,
      "message": "This should only make a difference for tests that have a .git subdirectory in their archive. This is kind of weird. I wonder if we should handle that differently? Maybe add a field to the test struct saying what the vcs should bit. If it\u0027s \"git\", we could call this function during test setup.",
      "revId": "c21ddef3df2529b1c5ca7e5cc5b23a07bc1f7978",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "782f4623_c32b8ed2",
        "filename": "cmd/gorelease/gorelease_test.go",
        "patchSetId": 11
      },
      "lineNbr": 421,
      "author": {
        "id": 26615
      },
      "writtenOn": "2021-08-27T22:49:02Z",
      "side": 1,
      "message": "Just to make sure I understand: in your proposal, we add a `vcs string` field to the test struct; we remove any `.git` files from tests txttars; for any tests which had `.git` files in their txttars, we add a `vcs\u003dgit` field, which causes this to be run rather than relying on writing `.git` files ourselves.\n\nIs that right?",
      "parentUuid": "11db71d6_edbe080f",
      "revId": "c21ddef3df2529b1c5ca7e5cc5b23a07bc1f7978",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}