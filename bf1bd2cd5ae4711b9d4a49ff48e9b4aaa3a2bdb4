{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "f3bca8f1_0b707e2b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-08-29T22:47:31Z",
      "side": 1,
      "message": "TryBots beginning. Status page: https://farmer.golang.org/try?commit\u003dbf1bd2cd\n",
      "tag": "autogenerated:trybots~beginning",
      "revId": "bf1bd2cd5ae4711b9d4a49ff48e9b4aaa3a2bdb4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "530f4254_98e06b68",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-08-29T22:49:27Z",
      "side": 1,
      "message": "TryBots are happy.\n\n",
      "parentUuid": "f3bca8f1_0b707e2b",
      "tag": "autogenerated:trybots~happy",
      "revId": "bf1bd2cd5ae4711b9d4a49ff48e9b4aaa3a2bdb4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2c97d475_128a6fe9",
        "filename": "slog/record.go",
        "patchSetId": 1
      },
      "lineNbr": 14,
      "author": {
        "id": 57259
      },
      "writtenOn": "2022-08-30T19:53:08Z",
      "side": 1,
      "message": "I know we\u0027ve been using \"Record\" for a long time in our discussions, but I think \"Event\" would be a better name. \"Record\" connotes both \"struct-like type\" and \"data base row\", both of which are true here but neither is very interesting. By contrast, an Event is \"a thing that happened at a particular moment\", which seems a more precise description of the purpose of this type.",
      "revId": "bf1bd2cd5ae4711b9d4a49ff48e9b4aaa3a2bdb4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "123a4834_df129b3c",
        "filename": "slog/record.go",
        "patchSetId": 1
      },
      "lineNbr": 14,
      "author": {
        "id": 14570
      },
      "writtenOn": "2022-09-06T22:18:32Z",
      "side": 1,
      "message": "I prefer Record. I agree it\u0027s uninteresting, but Event feels wrong.\n\n@rsc",
      "parentUuid": "2c97d475_128a6fe9",
      "revId": "bf1bd2cd5ae4711b9d4a49ff48e9b4aaa3a2bdb4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "89e835b0_f27faa20",
        "filename": "slog/record.go",
        "patchSetId": 1
      },
      "lineNbr": 14,
      "author": {
        "id": 14570
      },
      "writtenOn": "2022-09-07T11:26:51Z",
      "side": 1,
      "message": "OTOH, in writing doc comments I find myself using the word \"event,\" so I\u0027m open to it.",
      "parentUuid": "123a4834_df129b3c",
      "revId": "bf1bd2cd5ae4711b9d4a49ff48e9b4aaa3a2bdb4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "de543945_e69c5278",
        "filename": "slog/record.go",
        "patchSetId": 1
      },
      "lineNbr": 24,
      "author": {
        "id": 57259
      },
      "writtenOn": "2022-08-30T19:53:08Z",
      "side": 1,
      "message": "This field\u0027s need of a doc comment is greater than those of \u0027time\u0027 and \u0027message\u0027. :)",
      "revId": "bf1bd2cd5ae4711b9d4a49ff48e9b4aaa3a2bdb4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "68e16990_463a3c75",
        "filename": "slog/record.go",
        "patchSetId": 1
      },
      "lineNbr": 24,
      "author": {
        "id": 14570
      },
      "writtenOn": "2022-09-07T11:26:51Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "de543945_e69c5278",
      "revId": "bf1bd2cd5ae4711b9d4a49ff48e9b4aaa3a2bdb4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4c91a5b1_b1d45433",
        "filename": "slog/record.go",
        "patchSetId": 1
      },
      "lineNbr": 26,
      "author": {
        "id": 57259
      },
      "writtenOn": "2022-08-30T19:53:08Z",
      "side": 1,
      "message": "Is this optimization justified over the simpler one of simply allocating the initial space in a struct field and then letting append do its thing? i.e.\n\n   attrs  []Attr\n   attrs0 [K]Attr // space for first K attrs, usually enough\n\nThat approach wastes the entire attrs0 as soon as append allocates, but has the advantage of being idiomatic, and keeping the elements contiguous in one slice.",
      "revId": "bf1bd2cd5ae4711b9d4a49ff48e9b4aaa3a2bdb4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "23109e0a_f8962042",
        "filename": "slog/record.go",
        "patchSetId": 1
      },
      "lineNbr": 26,
      "author": {
        "id": 14570
      },
      "writtenOn": "2022-09-06T22:18:32Z",
      "side": 1,
      "message": "The intent was to avoid aliasing, but it only works until the Attrs overflow.\nSee the current patchset for an improvement.",
      "parentUuid": "4c91a5b1_b1d45433",
      "revId": "bf1bd2cd5ae4711b9d4a49ff48e9b4aaa3a2bdb4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4ce3189a_abf08cc5",
        "filename": "slog/record.go",
        "patchSetId": 1
      },
      "lineNbr": 26,
      "author": {
        "id": 14570
      },
      "writtenOn": "2022-09-07T11:26:51Z",
      "side": 1,
      "message": "To be clear, in the new implementation modifications to a Record do not affect copies.",
      "parentUuid": "23109e0a_f8962042",
      "revId": "bf1bd2cd5ae4711b9d4a49ff48e9b4aaa3a2bdb4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e80b2e2b_f793d135",
        "filename": "slog/record.go",
        "patchSetId": 1
      },
      "lineNbr": 39,
      "author": {
        "id": 57259
      },
      "writtenOn": "2022-08-30T19:53:08Z",
      "side": 1,
      "message": "\"at that depth, where 1 means the caller of NewRecord\". (I assume)",
      "revId": "bf1bd2cd5ae4711b9d4a49ff48e9b4aaa3a2bdb4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f42be122_ffac95e8",
        "filename": "slog/record.go",
        "patchSetId": 1
      },
      "lineNbr": 39,
      "author": {
        "id": 14570
      },
      "writtenOn": "2022-09-07T11:26:51Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e80b2e2b_f793d135",
      "revId": "bf1bd2cd5ae4711b9d4a49ff48e9b4aaa3a2bdb4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d16b5882_4dd5446a",
        "filename": "slog/record.go",
        "patchSetId": 1
      },
      "lineNbr": 42,
      "author": {
        "id": 57259
      },
      "writtenOn": "2022-08-30T19:53:08Z",
      "side": 1,
      "message": "Rather than \"Most users won\u0027t need it\", state what approach is likely to be better for most users.",
      "range": {
        "startLine": 42,
        "startChar": 14,
        "endLine": 42,
        "endChar": 39
      },
      "revId": "bf1bd2cd5ae4711b9d4a49ff48e9b4aaa3a2bdb4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7bf5c7d8_76bbf258",
        "filename": "slog/record.go",
        "patchSetId": 1
      },
      "lineNbr": 42,
      "author": {
        "id": 14570
      },
      "writtenOn": "2022-09-07T11:26:51Z",
      "side": 1,
      "message": "Couldn\u0027t figure out a nice way to phrase it so I just omitted it.",
      "parentUuid": "d16b5882_4dd5446a",
      "range": {
        "startLine": 42,
        "startChar": 14,
        "endLine": 42,
        "endChar": 39
      },
      "revId": "bf1bd2cd5ae4711b9d4a49ff48e9b4aaa3a2bdb4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9a835c98_c9929132",
        "filename": "slog/record.go",
        "patchSetId": 1
      },
      "lineNbr": 43,
      "author": {
        "id": 9711
      },
      "writtenOn": "2022-08-30T17:04:13Z",
      "side": 1,
      "message": "I think the name is misleading, a New prefix always implies allocation and a pointer type return to me.",
      "revId": "bf1bd2cd5ae4711b9d4a49ff48e9b4aaa3a2bdb4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c715928b_1e6298f2",
        "filename": "slog/record.go",
        "patchSetId": 1
      },
      "lineNbr": 43,
      "author": {
        "id": 57259
      },
      "writtenOn": "2022-08-30T19:53:08Z",
      "side": 1,
      "message": "Yeah; the fact that the methods are associated with *Record suggests that this method (and all public API functions) should also return a *Record (since any one of them could cause internal aliasing.\n\nReturn a pointer and trust the escape analysis to do its thing.",
      "parentUuid": "9a835c98_c9929132",
      "revId": "bf1bd2cd5ae4711b9d4a49ff48e9b4aaa3a2bdb4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8c8833c9_225ef61c",
        "filename": "slog/record.go",
        "patchSetId": 1
      },
      "lineNbr": 43,
      "author": {
        "id": 14570
      },
      "writtenOn": "2022-09-06T22:18:32Z",
      "side": 1,
      "message": "Escape analysis won\u0027t succeed because Records are passes arguments to an interface method.",
      "parentUuid": "c715928b_1e6298f2",
      "revId": "bf1bd2cd5ae4711b9d4a49ff48e9b4aaa3a2bdb4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "60ec6bb5_28030751",
        "filename": "slog/record.go",
        "patchSetId": 1
      },
      "lineNbr": 43,
      "author": {
        "id": 14570
      },
      "writtenOn": "2022-09-07T11:26:51Z",
      "side": 1,
      "message": "Open to alternative names.\n\n@rsc",
      "parentUuid": "8c8833c9_225ef61c",
      "revId": "bf1bd2cd5ae4711b9d4a49ff48e9b4aaa3a2bdb4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f50397a1_574a42e7",
        "filename": "slog/record.go",
        "patchSetId": 1
      },
      "lineNbr": 43,
      "author": {
        "id": 57259
      },
      "writtenOn": "2022-09-07T17:31:53Z",
      "side": 1,
      "message": "If Record is to be a pure value type (as it is now), then let\u0027s call this function MakeRecord, following the convention that make returns values, new returns pointers.",
      "parentUuid": "60ec6bb5_28030751",
      "revId": "bf1bd2cd5ae4711b9d4a49ff48e9b4aaa3a2bdb4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bc4ccdab_9d2b9650",
        "filename": "slog/record.go",
        "patchSetId": 1
      },
      "lineNbr": 63,
      "author": {
        "id": 9711
      },
      "writtenOn": "2022-08-30T17:04:13Z",
      "side": 1,
      "message": "Why are these methods rather than public fields?",
      "revId": "bf1bd2cd5ae4711b9d4a49ff48e9b4aaa3a2bdb4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "608cdb30_c58fda7a",
        "filename": "slog/record.go",
        "patchSetId": 1
      },
      "lineNbr": 63,
      "author": {
        "id": 14570
      },
      "writtenOn": "2022-09-01T13:10:26Z",
      "side": 1,
      "message": "Partially to be consistent with the Attrs, which for performance reasons can\u0027t be a public []Attr.\n\nBut also because I wanted to allow the possibility of a different implementation, in which a Record is just a pointer to a pool-allocated value (plus a generation number to detect use-after-free).\n\nAt this point it seems the performance is good enough without that trick (which would also come with restrictions on the use of Records, so it would only be a backwards-compatible change compilation-wise, not behaviorally).",
      "parentUuid": "bc4ccdab_9d2b9650",
      "revId": "bf1bd2cd5ae4711b9d4a49ff48e9b4aaa3a2bdb4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "00660736_54177d1f",
        "filename": "slog/record.go",
        "patchSetId": 1
      },
      "lineNbr": 63,
      "author": {
        "id": 14570
      },
      "writtenOn": "2022-09-07T20:13:05Z",
      "side": 1,
      "message": "However, we are contemplating changes to the Record representation, so let\u0027s hold off until we\u0027re done.",
      "parentUuid": "608cdb30_c58fda7a",
      "revId": "bf1bd2cd5ae4711b9d4a49ff48e9b4aaa3a2bdb4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "16f41076_087c5ded",
        "filename": "slog/record.go",
        "patchSetId": 1
      },
      "lineNbr": 100,
      "author": {
        "id": 57259
      },
      "writtenOn": "2022-08-30T19:53:08Z",
      "side": 1,
      "message": "\"appends an attribute to the record\u0027s list of attributes\"",
      "revId": "bf1bd2cd5ae4711b9d4a49ff48e9b4aaa3a2bdb4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5cdc3a1b_dedfa1eb",
        "filename": "slog/record.go",
        "patchSetId": 1
      },
      "lineNbr": 100,
      "author": {
        "id": 14570
      },
      "writtenOn": "2022-09-07T11:26:51Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "16f41076_087c5ded",
      "revId": "bf1bd2cd5ae4711b9d4a49ff48e9b4aaa3a2bdb4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}