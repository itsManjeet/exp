{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "d080e372_5ad17266",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-08-29T22:47:31Z",
      "side": 1,
      "message": "TryBots beginning. Status page: https://farmer.golang.org/try?commit\u003d122fc2a1\n",
      "tag": "autogenerated:trybots~beginning",
      "revId": "122fc2a156a04278d9a11acc2b25514ac93bb075",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "140898b7_fffcf80c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-08-29T22:49:24Z",
      "side": 1,
      "message": "TryBots are happy.\n\n",
      "parentUuid": "d080e372_5ad17266",
      "tag": "autogenerated:trybots~happy",
      "revId": "122fc2a156a04278d9a11acc2b25514ac93bb075",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a795617f_693f1fa4",
        "filename": "slog/handler.go",
        "patchSetId": 1
      },
      "lineNbr": 29,
      "author": {
        "id": 57259
      },
      "writtenOn": "2022-08-30T17:35:30Z",
      "side": 1,
      "message": "Name the parameter r so that the comment makes sense?",
      "revId": "122fc2a156a04278d9a11acc2b25514ac93bb075",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "feb80e35_2d43bf1a",
        "filename": "slog/handler.go",
        "patchSetId": 1
      },
      "lineNbr": 29,
      "author": {
        "id": 57259
      },
      "writtenOn": "2022-08-30T17:35:30Z",
      "side": 1,
      "message": "s/it/the record/\n\nx 2",
      "range": {
        "startLine": 29,
        "startChar": 52,
        "endLine": 29,
        "endChar": 54
      },
      "revId": "122fc2a156a04278d9a11acc2b25514ac93bb075",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6b3be651_6491b124",
        "filename": "slog/handler.go",
        "patchSetId": 1
      },
      "lineNbr": 34,
      "author": {
        "id": 57259
      },
      "writtenOn": "2022-08-30T17:35:30Z",
      "side": 1,
      "message": "// Handler implementations must not retain a reference to the slice\u0027s array.",
      "revId": "122fc2a156a04278d9a11acc2b25514ac93bb075",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "783ca216_fe01105d",
        "filename": "slog/handler.go",
        "patchSetId": 1
      },
      "lineNbr": 63,
      "author": {
        "id": 57259
      },
      "writtenOn": "2022-08-30T17:35:30Z",
      "side": 1,
      "message": "Where is concat defined? (higher in the CL stack?) I\u0027ll assume it is concurrency-safe and that the result doesn\u0027t alias either operand.",
      "revId": "122fc2a156a04278d9a11acc2b25514ac93bb075",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fc4592dc_9c7d7b82",
        "filename": "slog/handler.go",
        "patchSetId": 1
      },
      "lineNbr": 70,
      "author": {
        "id": 57259
      },
      "writtenOn": "2022-08-30T17:35:30Z",
      "side": 1,
      "message": "typo: \"attribute\" singular",
      "range": {
        "startLine": 70,
        "startChar": 19,
        "endLine": 70,
        "endChar": 29
      },
      "revId": "122fc2a156a04278d9a11acc2b25514ac93bb075",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c4d24b9a_d316ad16",
        "filename": "slog/handler.go",
        "patchSetId": 1
      },
      "lineNbr": 94,
      "author": {
        "id": 57259
      },
      "writtenOn": "2022-08-30T17:35:30Z",
      "side": 1,
      "message": "Naming:\n\noutMu sync.Mutex\nout   io.Writer\n\n?",
      "revId": "122fc2a156a04278d9a11acc2b25514ac93bb075",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "11fa0f71_b51877ac",
        "filename": "slog/handler.go",
        "patchSetId": 1
      },
      "lineNbr": 113,
      "author": {
        "id": 57259
      },
      "writtenOn": "2022-08-30T17:35:30Z",
      "side": 1,
      "message": "Skip elements with empty key?",
      "revId": "122fc2a156a04278d9a11acc2b25514ac93bb075",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3de50560_a7ae9d1a",
        "filename": "slog/handler.go",
        "patchSetId": 1
      },
      "lineNbr": 134,
      "author": {
        "id": 57259
      },
      "writtenOn": "2022-08-30T17:35:30Z",
      "side": 1,
      "message": "The contract is \"If the returned key is empty, the attribute is omitted from the output\", but I don\u0027t see that check here, or in the four cases below. Is appendAttrValue supposed to be a no-op in that case?",
      "revId": "122fc2a156a04278d9a11acc2b25514ac93bb075",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1c4df5ad_7c446af9",
        "filename": "slog/handler.go",
        "patchSetId": 1
      },
      "lineNbr": 218,
      "author": {
        "id": 57259
      },
      "writtenOn": "2022-08-30T17:35:30Z",
      "side": 1,
      "message": "Why quoted and escaped?\n\nSome brief doc comments on this interface would help.",
      "revId": "122fc2a156a04278d9a11acc2b25514ac93bb075",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "de313f60_f83feb67",
        "filename": "slog/handler.go",
        "patchSetId": 1
      },
      "lineNbr": 226,
      "author": {
        "id": 57259
      },
      "writtenOn": "2022-08-30T17:35:30Z",
      "side": 1,
      "message": "If speed is the goal here, consider indexing the slice directly, avoiding the overheads of append. I assume the caller has ensured there is sufficient space (25 bytes) so that append isn\u0027t actually allocating.\n\n(I didn\u0027t see any calls to this function. Later CLs?)",
      "revId": "122fc2a156a04278d9a11acc2b25514ac93bb075",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}