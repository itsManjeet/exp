{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "baf31eea_1fc925f7",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 57259
      },
      "writtenOn": "2022-11-29T14:37:31Z",
      "side": 1,
      "message": "But that\u0027s because JSON has no way to express binary strings or byte arrays, unlike Go. strconv.Quote has the advantage that if the string is text---or mostly text---then you can still read it. (And if it\u0027s not text, why are you logging it?)\n\nAlso, Go mostly treats byte slice and strings as equivalent. Users of an allocation-conscious logging package might be disappointed at being forced to allocate a string when they have a []byte in hand.",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 10,
        "endChar": 24
      },
      "revId": "e4c4208ac8fc3749efb3c5612bfaedecd48aa7b0",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c0793b31_704d97f0",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 14570
      },
      "writtenOn": "2022-12-04T15:24:18Z",
      "side": 1,
      "message": "I suppose byte slices arise as bits of opaque matter from other systems (or one\u0027s own). They are rare but do appear: my Zap corpus has them at 0.2% of all attributes.\n\nI think it\u0027s reasonable for TextHandler to write them nicer than\n\n   [64, 88, 128, 45, 51]\n   \nThe human reader is unlikely to be able to make sense of the content (though a log processor might), so something the eye can easily skim over would be nice.\n\nstrconv.Quote assumes the slice is in Unicode, so that []byte{0xCF, 0x80} prints as \"π\". Whether that\u0027s desirable depends on whether one thinks, as you do, that these byte slices are likely to be text. I think they\u0027re unlikely to be.\n\nHow about encoding/hex?",
      "parentUuid": "baf31eea_1fc925f7",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 10,
        "endChar": 24
      },
      "revId": "e4c4208ac8fc3749efb3c5612bfaedecd48aa7b0",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "38757967_2d050bb9",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 57259
      },
      "writtenOn": "2022-12-05T17:55:58Z",
      "side": 1,
      "message": "If the values are truly binary, no encoding is going to be readable, so the only basis to choose among them is compactness. Base64 (factor 4/3x) is slightly better than Base16 (factor 2x) or \\xXX (factor 4x).\n\nBut I would expect a lot of values represented as []byte are either text, or binary containing a decent fraction of string values. In the first case, presenting the text as text is ideal; in the second case, it is helpful to see at a glance the textual substrings, and they reduce the growth factor to less than 4x in practice.\n\nSo long as the encoding is unambiguous, the log processor will be able to handle whichever of these we choose. So my preference is still for strconv.Quote.\n\n\n\u003e strconv.Quote assumes the slice is in Unicode, so that []byte{0xCF, 0x80} prints as \"π\".\n\nπ is nonetheless an unambiguous and compact (both visually and in terms of encoding) representation of that pair of bytes, so I don\u0027t see any harm here.\n\n\u003e Whether that\u0027s desirable depends on whether one thinks, as you do, that these byte slices are likely to be text. I think they\u0027re unlikely to be.\n\nThe data that would settle the question is: what fraction of logged values that are printed with type []byte in fact contain (a) 100% text, (b) \u003e75% binary, (c) \u003c25% binary?",
      "parentUuid": "c0793b31_704d97f0",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 10,
        "endChar": 24
      },
      "revId": "e4c4208ac8fc3749efb3c5612bfaedecd48aa7b0",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "82e15bc9_62a6921d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 14570
      },
      "writtenOn": "2022-12-05T21:21:49Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "38757967_2d050bb9",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 10,
        "endChar": 24
      },
      "revId": "e4c4208ac8fc3749efb3c5612bfaedecd48aa7b0",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e39444ce_1eb98ebb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-11-26T19:08:16Z",
      "side": 1,
      "message": "TryBots beginning. Status page: https://farmer.golang.org/try?commit\u003de4c4208a\n",
      "tag": "autogenerated:trybots~beginning",
      "revId": "e4c4208ac8fc3749efb3c5612bfaedecd48aa7b0",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5a591f1a_a5f522df",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-11-26T19:10:57Z",
      "side": 1,
      "message": "TryBots are happy.\n\n",
      "parentUuid": "e39444ce_1eb98ebb",
      "tag": "autogenerated:trybots~happy",
      "revId": "e4c4208ac8fc3749efb3c5612bfaedecd48aa7b0",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e529b349_3fc2b680",
        "filename": "slog/text_handler.go",
        "patchSetId": 1
      },
      "lineNbr": 126,
      "author": {
        "id": 57259
      },
      "writtenOn": "2022-12-05T17:55:58Z",
      "side": 1,
      "message": "// Like Printf\u0027s %s, we allow both the slice type and the byte element type to be named.",
      "revId": "e4c4208ac8fc3749efb3c5612bfaedecd48aa7b0",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d8460fc4_5c9d80af",
        "filename": "slog/text_handler.go",
        "patchSetId": 1
      },
      "lineNbr": 126,
      "author": {
        "id": 14570
      },
      "writtenOn": "2022-12-05T21:21:49Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e529b349_3fc2b680",
      "revId": "e4c4208ac8fc3749efb3c5612bfaedecd48aa7b0",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}