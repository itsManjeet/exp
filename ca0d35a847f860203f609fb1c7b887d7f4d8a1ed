{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "763048af_d66813d1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2021-09-22T16:14:44Z",
      "side": 1,
      "message": "TryBots beginning. Status page: https://farmer.golang.org/try?commit\u003dca0d35a8",
      "tag": "autogenerated:trybots~beginning",
      "revId": "ca0d35a847f860203f609fb1c7b887d7f4d8a1ed",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "563a860f_3a8006de",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2021-09-22T16:31:46Z",
      "side": 1,
      "message": "TryBots are happy.\n\n",
      "parentUuid": "763048af_d66813d1",
      "tag": "autogenerated:trybots~happy",
      "revId": "ca0d35a847f860203f609fb1c7b887d7f4d8a1ed",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5de3df3d_71e62797",
        "filename": "vulndb/internal/audit/vulnerability.go",
        "patchSetId": 2
      },
      "lineNbr": 52,
      "author": {
        "id": 12545
      },
      "writtenOn": "2021-10-07T16:41:21Z",
      "side": 1,
      "message": "Rather than stating the path which may be rather indeterminate, it is probably better to check if the module directory matches the module cache (which indicates it isn\u0027t a local module). We unfortunately can\u0027t access the internal variables that expose this path, but for now can do something like\n\n  func isLocal(mod *packages.Module) bool {\n\tvar modCacheDir string\n\tif modCacheDir \u003d os.Getenv(\"GOMODCACHE\"); modCacheDir \u003d\u003d \"\" {\n\t\tif modCacheDir \u003d os.Getenv(\"GOPATH\"); modCacheDir \u003d\u003d \"\" {\n\t\t\tmodCacheDir \u003d build.Default.GOPATH\n\t\t}\n\t\tmodCacheDir \u003d filepath.Join(modCacheDir, \"pkg\")\n\t\tmodCacheDir \u003d filepath.Join(modCacheDir, \"mod\")\n\t}\n\tmodPath :\u003d mod.Dir\n\tif mod.Replace !\u003d nil {\n\t\tmodPath \u003d mod.Replace.Dir\n\t}\n\treturn !strings.HasPrefix(mod.Dir, modCacheDir)\n  }\n  \nAnd once we move to the stdlib we can replace all of the mod cache path building logic with cmd/go/internal/cfg.GOMODCACHE.",
      "range": {
        "startLine": 49,
        "startChar": 0,
        "endLine": 52,
        "endChar": 1
      },
      "revId": "ca0d35a847f860203f609fb1c7b887d7f4d8a1ed",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "29a8f1f5_a14b4568",
        "filename": "vulndb/internal/audit/vulnerability.go",
        "patchSetId": 2
      },
      "lineNbr": 52,
      "author": {
        "id": 12545
      },
      "writtenOn": "2021-10-07T16:43:16Z",
      "side": 1,
      "message": "Uh, this can be reduced to one line\n\n  modCacheDir \u003d filepath.Join(modCacheDir, \"pkg\")\n  modCacheDir \u003d filepath.Join(modCacheDir, \"mod\")\n\n  ...\n  \n  modCacheDir \u003d filepath.Join(modCacheDir, \"pkg\", \"mod\")",
      "parentUuid": "5de3df3d_71e62797",
      "range": {
        "startLine": 49,
        "startChar": 0,
        "endLine": 52,
        "endChar": 1
      },
      "revId": "ca0d35a847f860203f609fb1c7b887d7f4d8a1ed",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}