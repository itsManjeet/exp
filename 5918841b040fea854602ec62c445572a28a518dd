{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "0f52ea29_ed5cf875",
        "filename": "vulndb/internal/audit/detect.go",
        "patchSetId": 7
      },
      "lineNbr": 91,
      "author": {
        "id": 45880
      },
      "writtenOn": "2021-08-27T04:08:50Z",
      "side": 1,
      "message": "It is more intuitive to me that greater weight implies more importance.",
      "range": {
        "startLine": 90,
        "startChar": 1,
        "endLine": 91,
        "endChar": 11
      },
      "revId": "5918841b040fea854602ec62c445572a28a518dd",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7af74c2e_a1a2de11",
        "filename": "vulndb/internal/audit/detect.go",
        "patchSetId": 7
      },
      "lineNbr": 91,
      "author": {
        "id": 44008
      },
      "writtenOn": "2021-08-27T16:57:04Z",
      "side": 1,
      "message": "Agreed. But then relative max importance has to be set to max of int. And all other less important finding need to have max of int - X. This becomes messy quickly. I\u0027d prefer to keep it as is since it is documented and internal.",
      "parentUuid": "0f52ea29_ed5cf875",
      "range": {
        "startLine": 90,
        "startChar": 1,
        "endLine": 91,
        "endChar": 11
      },
      "revId": "5918841b040fea854602ec62c445572a28a518dd",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0cc1d4cb_7b938045",
        "filename": "vulndb/internal/audit/detect_callgraph.go",
        "patchSetId": 7
      },
      "lineNbr": 223,
      "author": {
        "id": 45880
      },
      "writtenOn": "2021-08-27T04:08:50Z",
      "side": 1,
      "message": "Should we use a \"for\" loop rather than recursion to compute the confidence value?",
      "range": {
        "startLine": 223,
        "startChar": 1,
        "endLine": 223,
        "endChar": 50
      },
      "revId": "5918841b040fea854602ec62c445572a28a518dd",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cfd319e5_23a11036",
        "filename": "vulndb/internal/audit/detect_callgraph.go",
        "patchSetId": 7
      },
      "lineNbr": 223,
      "author": {
        "id": 44008
      },
      "writtenOn": "2021-08-27T16:57:04Z",
      "side": 1,
      "message": "Recursion is a cleaner solution as one does not have to introduce sum variables, etc. The performance really won\u0027t be affected as traces are short and do not come in bunches.\n\nIf the reviewer feels strong about this, I\u0027d be happy to change it to loop based solution.",
      "parentUuid": "0cc1d4cb_7b938045",
      "range": {
        "startLine": 223,
        "startChar": 1,
        "endLine": 223,
        "endChar": 50
      },
      "revId": "5918841b040fea854602ec62c445572a28a518dd",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0a066de8_3b016918",
        "filename": "vulndb/internal/audit/order.go",
        "patchSetId": 7
      },
      "lineNbr": 18,
      "author": {
        "id": 45880
      },
      "writtenOn": "2021-08-27T04:08:50Z",
      "side": 1,
      "message": "Will passing pointers be slightly better here?\n\n```\nfunc findingCompare(finding1, finding2 *Finding) bool {\n```",
      "range": {
        "startLine": 18,
        "startChar": 20,
        "endLine": 18,
        "endChar": 46
      },
      "revId": "5918841b040fea854602ec62c445572a28a518dd",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c966c183_22f3f975",
        "filename": "vulndb/internal/audit/order.go",
        "patchSetId": 7
      },
      "lineNbr": 18,
      "author": {
        "id": 44008
      },
      "writtenOn": "2021-08-27T16:57:04Z",
      "side": 1,
      "message": "Done\n\nYes, it is slightly better and it does not really complicate matters as sorting is done internally.",
      "parentUuid": "0a066de8_3b016918",
      "range": {
        "startLine": 18,
        "startChar": 20,
        "endLine": 18,
        "endChar": 46
      },
      "revId": "5918841b040fea854602ec62c445572a28a518dd",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5fc450a7_f1df9c76",
        "filename": "vulndb/internal/audit/order.go",
        "patchSetId": 7
      },
      "lineNbr": 41,
      "author": {
        "id": 45880
      },
      "writtenOn": "2021-08-27T04:08:50Z",
      "side": 1,
      "message": "Does the Finding have a String() function that pretty-print the finding, which can be used to perform the comparison?",
      "range": {
        "startLine": 41,
        "startChar": 0,
        "endLine": 41,
        "endChar": 57
      },
      "revId": "5918841b040fea854602ec62c445572a28a518dd",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "90636fb1_102f2eb8",
        "filename": "vulndb/internal/audit/order.go",
        "patchSetId": 7
      },
      "lineNbr": 41,
      "author": {
        "id": 44008
      },
      "writtenOn": "2021-08-27T16:57:04Z",
      "side": 1,
      "message": "It currently has, but it likely won\u0027t in the future as this will be a public API and we want to keep it as simple as possible.",
      "parentUuid": "5fc450a7_f1df9c76",
      "range": {
        "startLine": 41,
        "startChar": 0,
        "endLine": 41,
        "endChar": 57
      },
      "revId": "5918841b040fea854602ec62c445572a28a518dd",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "256ebded_e9058037",
        "filename": "vulndb/internal/audit/order.go",
        "patchSetId": 7
      },
      "lineNbr": 47,
      "author": {
        "id": 44473
      },
      "writtenOn": "2021-08-27T04:16:23Z",
      "side": 1,
      "message": "nit: \nif cmp :\u003d strings.Compare(finding1.Symbol, finding2.Symbol); cmp !\u003d 0 {\n     return cmp \u003c 0\n}\n\netc.",
      "range": {
        "startLine": 42,
        "startChar": 1,
        "endLine": 47,
        "endChar": 2
      },
      "revId": "5918841b040fea854602ec62c445572a28a518dd",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "654fbad8_3f111e14",
        "filename": "vulndb/internal/audit/order.go",
        "patchSetId": 7
      },
      "lineNbr": 47,
      "author": {
        "id": 44008
      },
      "writtenOn": "2021-08-27T16:57:04Z",
      "side": 1,
      "message": "Done\n\nNice.",
      "parentUuid": "256ebded_e9058037",
      "range": {
        "startLine": 42,
        "startChar": 1,
        "endLine": 47,
        "endChar": 2
      },
      "revId": "5918841b040fea854602ec62c445572a28a518dd",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}