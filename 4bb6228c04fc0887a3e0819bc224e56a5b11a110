{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "f6a687af_abb42d4c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-12-17T17:51:41Z",
      "side": 1,
      "message": "TryBots beginning. Status page: https://farmer.golang.org/try?commit\u003d4bb6228c\n",
      "tag": "autogenerated:trybots~beginning",
      "revId": "4bb6228c04fc0887a3e0819bc224e56a5b11a110",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5c7358de_cf340bbe",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-12-17T17:54:11Z",
      "side": 1,
      "message": "TryBots are happy.\n\n",
      "parentUuid": "f6a687af_abb42d4c",
      "tag": "autogenerated:trybots~happy",
      "revId": "4bb6228c04fc0887a3e0819bc224e56a5b11a110",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a260d9b2_c5c44633",
        "filename": "slog/doc.go",
        "patchSetId": 1
      },
      "lineNbr": 267,
      "author": {
        "id": 57259
      },
      "writtenOn": "2022-12-18T21:15:58Z",
      "side": 1,
      "message": "\"If the original record value is still needed, call Clone and apply the modifications to the copy.\"",
      "revId": "4bb6228c04fc0887a3e0819bc224e56a5b11a110",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ab3ed3db_fb350824",
        "filename": "slog/doc.go",
        "patchSetId": 1
      },
      "lineNbr": 267,
      "author": {
        "id": 14570
      },
      "writtenOn": "2022-12-27T18:28:59Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a260d9b2_c5c44633",
      "revId": "4bb6228c04fc0887a3e0819bc224e56a5b11a110",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eaa9f171_0b6835d0",
        "filename": "slog/doc.go",
        "patchSetId": 1
      },
      "lineNbr": 283,
      "author": {
        "id": 57259
      },
      "writtenOn": "2022-12-18T21:15:58Z",
      "side": 1,
      "message": "nit: \"take advantage of\" ?",
      "range": {
        "startLine": 283,
        "startChar": 34,
        "endLine": 283,
        "endChar": 41
      },
      "revId": "4bb6228c04fc0887a3e0819bc224e56a5b11a110",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c575cd94_ae8bf767",
        "filename": "slog/doc.go",
        "patchSetId": 1
      },
      "lineNbr": 283,
      "author": {
        "id": 14570
      },
      "writtenOn": "2022-12-27T18:28:59Z",
      "side": 1,
      "message": "\"it\" refers to \"that optimization\" and it seems wrong to say that a Handler should take advantage of an optimization. Rather, it should take advantage of the design by performing the optimization. Or am I being too pedantic?",
      "parentUuid": "eaa9f171_0b6835d0",
      "range": {
        "startLine": 283,
        "startChar": 34,
        "endLine": 283,
        "endChar": 41
      },
      "revId": "4bb6228c04fc0887a3e0819bc224e56a5b11a110",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "550e9c34_d9cdc972",
        "filename": "slog/doc.go",
        "patchSetId": 1
      },
      "lineNbr": 283,
      "author": {
        "id": 57259
      },
      "writtenOn": "2022-12-27T19:42:21Z",
      "side": 1,
      "message": "I was thinking along the lines of: engineers perform optimizations, handlers handle messages, but they might take advantage of optimizations while doing so. Or am I being too pedantic? ;-)",
      "parentUuid": "c575cd94_ae8bf767",
      "range": {
        "startLine": 283,
        "startChar": 34,
        "endLine": 283,
        "endChar": 41
      },
      "revId": "4bb6228c04fc0887a3e0819bc224e56a5b11a110",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3106356c_3bb7aa6c",
        "filename": "slog/doc.go",
        "patchSetId": 1
      },
      "lineNbr": 283,
      "author": {
        "id": 14570
      },
      "writtenOn": "2022-12-27T20:03:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "550e9c34_d9cdc972",
      "range": {
        "startLine": 283,
        "startChar": 34,
        "endLine": 283,
        "endChar": 41
      },
      "revId": "4bb6228c04fc0887a3e0819bc224e56a5b11a110",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c86e9abd_a780ba46",
        "filename": "slog/doc.go",
        "patchSetId": 1
      },
      "lineNbr": 285,
      "author": {
        "id": 57259
      },
      "writtenOn": "2022-12-18T21:15:58Z",
      "side": 1,
      "message": "\"event is discarded\"\n\n(The call still takes place.)",
      "range": {
        "startLine": 285,
        "startChar": 70,
        "endLine": 285,
        "endChar": 86
      },
      "revId": "4bb6228c04fc0887a3e0819bc224e56a5b11a110",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "98a3dc54_22c3ffed",
        "filename": "slog/doc.go",
        "patchSetId": 1
      },
      "lineNbr": 285,
      "author": {
        "id": 57259
      },
      "writtenOn": "2022-12-18T21:15:58Z",
      "side": 1,
      "message": "are always",
      "range": {
        "startLine": 285,
        "startChar": 28,
        "endLine": 285,
        "endChar": 42
      },
      "revId": "4bb6228c04fc0887a3e0819bc224e56a5b11a110",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "54bfdd86_313fc6f5",
        "filename": "slog/doc.go",
        "patchSetId": 1
      },
      "lineNbr": 285,
      "author": {
        "id": 14570
      },
      "writtenOn": "2022-12-27T18:28:59Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "98a3dc54_22c3ffed",
      "range": {
        "startLine": 285,
        "startChar": 28,
        "endLine": 285,
        "endChar": 42
      },
      "revId": "4bb6228c04fc0887a3e0819bc224e56a5b11a110",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5bdc02e8_528f0a72",
        "filename": "slog/doc.go",
        "patchSetId": 1
      },
      "lineNbr": 285,
      "author": {
        "id": 14570
      },
      "writtenOn": "2022-12-27T18:28:59Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c86e9abd_a780ba46",
      "range": {
        "startLine": 285,
        "startChar": 70,
        "endLine": 285,
        "endChar": 86
      },
      "revId": "4bb6228c04fc0887a3e0819bc224e56a5b11a110",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0f8ad7b6_2e356659",
        "filename": "slog/doc.go",
        "patchSetId": 1
      },
      "lineNbr": 286,
      "author": {
        "id": 57259
      },
      "writtenOn": "2022-12-18T21:15:58Z",
      "side": 1,
      "message": "\"computation so that\"\n\ns/when/if/",
      "range": {
        "startLine": 286,
        "startChar": 19,
        "endLine": 286,
        "endChar": 26
      },
      "revId": "4bb6228c04fc0887a3e0819bc224e56a5b11a110",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "26e6b8dd_260d381d",
        "filename": "slog/doc.go",
        "patchSetId": 1
      },
      "lineNbr": 286,
      "author": {
        "id": 14570
      },
      "writtenOn": "2022-12-27T18:28:59Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0f8ad7b6_2e356659",
      "range": {
        "startLine": 286,
        "startChar": 19,
        "endLine": 286,
        "endChar": 26
      },
      "revId": "4bb6228c04fc0887a3e0819bc224e56a5b11a110",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6acc590f_da3aedd0",
        "filename": "slog/doc.go",
        "patchSetId": 1
      },
      "lineNbr": 289,
      "author": {
        "id": 57259
      },
      "writtenOn": "2022-12-18T21:15:58Z",
      "side": 1,
      "message": "Always flag bad code in examples as it may be copied careless without the surrounding warning:\n\nslog.Info(\"starting request\", \"url\", r.URL.String()) // may compute String unnecessarily",
      "revId": "4bb6228c04fc0887a3e0819bc224e56a5b11a110",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fb4c2148_6635693c",
        "filename": "slog/doc.go",
        "patchSetId": 1
      },
      "lineNbr": 289,
      "author": {
        "id": 57259
      },
      "writtenOn": "2022-12-27T19:42:21Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6acc590f_da3aedd0",
      "revId": "4bb6228c04fc0887a3e0819bc224e56a5b11a110",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "98c5ac8d_667fe93c",
        "filename": "slog/doc.go",
        "patchSetId": 1
      },
      "lineNbr": 291,
      "author": {
        "id": 57259
      },
      "writtenOn": "2022-12-18T21:15:58Z",
      "side": 1,
      "message": "\"this log event is discarded\"\n\nor (active voice):\n\"the logger discards Info-level events\"",
      "range": {
        "startLine": 291,
        "startChar": 45,
        "endLine": 291,
        "endChar": 66
      },
      "revId": "4bb6228c04fc0887a3e0819bc224e56a5b11a110",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "48d1de90_dbedefed",
        "filename": "slog/doc.go",
        "patchSetId": 1
      },
      "lineNbr": 291,
      "author": {
        "id": 14570
      },
      "writtenOn": "2022-12-27T18:28:59Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "98c5ac8d_667fe93c",
      "range": {
        "startLine": 291,
        "startChar": 45,
        "endLine": 291,
        "endChar": 66
      },
      "revId": "4bb6228c04fc0887a3e0819bc224e56a5b11a110",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "875b731e_c47a9848",
        "filename": "slog/doc.go",
        "patchSetId": 1
      },
      "lineNbr": 292,
      "author": {
        "id": 57259
      },
      "writtenOn": "2022-12-18T21:15:58Z",
      "side": 1,
      "message": "...directly:\n\n    slog.Info(\"starting request\", \"url\", r.URL) // calls URL.String only if needed",
      "range": {
        "startLine": 292,
        "startChar": 8,
        "endLine": 292,
        "endChar": 16
      },
      "revId": "4bb6228c04fc0887a3e0819bc224e56a5b11a110",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7fe868a5_f81a8da3",
        "filename": "slog/doc.go",
        "patchSetId": 1
      },
      "lineNbr": 292,
      "author": {
        "id": 14570
      },
      "writtenOn": "2022-12-27T18:28:59Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "875b731e_c47a9848",
      "range": {
        "startLine": 292,
        "startChar": 8,
        "endLine": 292,
        "endChar": 16
      },
      "revId": "4bb6228c04fc0887a3e0819bc224e56a5b11a110",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8d0b22cf_4eec47ff",
        "filename": "slog/doc.go",
        "patchSetId": 1
      },
      "lineNbr": 293,
      "author": {
        "id": 57259
      },
      "writtenOn": "2022-12-18T21:15:58Z",
      "side": 1,
      "message": "log event",
      "range": {
        "startLine": 293,
        "startChar": 7,
        "endLine": 293,
        "endChar": 11
      },
      "revId": "4bb6228c04fc0887a3e0819bc224e56a5b11a110",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "968f5a39_2fcf3c4d",
        "filename": "slog/doc.go",
        "patchSetId": 1
      },
      "lineNbr": 293,
      "author": {
        "id": 14570
      },
      "writtenOn": "2022-12-27T18:28:59Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8d0b22cf_4eec47ff",
      "range": {
        "startLine": 293,
        "startChar": 7,
        "endLine": 293,
        "endChar": 11
      },
      "revId": "4bb6228c04fc0887a3e0819bc224e56a5b11a110",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "64514dfe_b7fe4e9a",
        "filename": "slog/doc.go",
        "patchSetId": 1
      },
      "lineNbr": 294,
      "author": {
        "id": 57259
      },
      "writtenOn": "2022-12-18T21:15:58Z",
      "side": 1,
      "message": "Huh, this is interesting. Really the caller of the log function shouldn\u0027t care about text vs JSON, but this deferred-String trick is forcing them to care.\n\nPerhaps we should document this as a feature: \"Avoiding the call to String also preserves the structure of the underlying value. For example the JSON handler emits the components of the parsed URL as a JSON object.\"\n\nAnd perhaps add something along the lines of:\n\n\"If you want to avoid eagerly paying the cost of the String call without causing the handler to potentially inspect the structure of the value, wrap the value in a fmt.Stringer implementation that hides its Marshal methods.\"",
      "range": {
        "startLine": 294,
        "startChar": 0,
        "endLine": 294,
        "endChar": 52
      },
      "revId": "4bb6228c04fc0887a3e0819bc224e56a5b11a110",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f7e7563e_12fdb22c",
        "filename": "slog/doc.go",
        "patchSetId": 1
      },
      "lineNbr": 294,
      "author": {
        "id": 14570
      },
      "writtenOn": "2022-12-27T18:28:59Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "64514dfe_b7fe4e9a",
      "range": {
        "startLine": 294,
        "startChar": 0,
        "endLine": 294,
        "endChar": 52
      },
      "revId": "4bb6228c04fc0887a3e0819bc224e56a5b11a110",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5160158c_8138097a",
        "filename": "slog/doc.go",
        "patchSetId": 1
      },
      "lineNbr": 317,
      "author": {
        "id": 57259
      },
      "writtenOn": "2022-12-18T21:15:58Z",
      "side": 1,
      "message": "Is this actually a problem? The lock may be redundant if the Writer is atomic (e.g. os.File), but in that case I wouldn\u0027t expect it to increase contention significantly over the locking in the kernel, since the critical section is just the single Write call. And if the writer isn\u0027t atomic, then the mutex is crucial for safety.",
      "revId": "4bb6228c04fc0887a3e0819bc224e56a5b11a110",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4f0fa2bd_4eef7d4d",
        "filename": "slog/doc.go",
        "patchSetId": 1
      },
      "lineNbr": 317,
      "author": {
        "id": 14570
      },
      "writtenOn": "2022-12-27T18:28:59Z",
      "side": 1,
      "message": "Couldn\u0027t the lock be held during actual disk I/O? Or does that not happen in modern systems and it\u0027s all async under the hood?\n\nOr what if I have a highly concurrent io.Writer lying around that uses a lock-free queue, and I naively pass it to a JSONHandler?",
      "parentUuid": "5160158c_8138097a",
      "revId": "4bb6228c04fc0887a3e0819bc224e56a5b11a110",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4d342961_33490d90",
        "filename": "slog/doc.go",
        "patchSetId": 1
      },
      "lineNbr": 317,
      "author": {
        "id": 57259
      },
      "writtenOn": "2022-12-27T19:42:21Z",
      "side": 1,
      "message": "Let me correct my statement: an os.File may refer to a regular file, or to a pipe. Writes to regular files (without O_APPEND) are not atomic: one write(2) payload may be inserted the middle of another. Writes to pipes may be atomic if they are small, but in general they too may be interleaved. So the handler is right to use a lock to serialize writes that may be to an os.File. And even if the underlying file is atomic, the application-level mutex would probably not add much overhead: the same amount of contention would exist but would move from the kernel to the application.\n\nAs for whether some users may supply a writer implementation that is both concurrency-safe and capable of executing in parallel (i.e. not just one big critical section), I suppose that\u0027s possible, but it seems very advanced. The Writer could probably achieve that by just quickly enqueuing the write payload in the critical section of the handler mutex, and then doing the actual write asynchronously. If that proves inadequate, you could always add a HandlerOption field that is a sync.Locker to use instead of the usual one, but it seems like very premature optimization to do that today.",
      "parentUuid": "4f0fa2bd_4eef7d4d",
      "revId": "4bb6228c04fc0887a3e0819bc224e56a5b11a110",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2fc82aa3_d2123775",
        "filename": "slog/doc.go",
        "patchSetId": 1
      },
      "lineNbr": 317,
      "author": {
        "id": 14570
      },
      "writtenOn": "2022-12-27T19:57:36Z",
      "side": 1,
      "message": "I began with something like that premature optimization, influenced by a similar feature in Zap, but Russ nixed it early on. Here I simply wanted to point out the presence of the lock to advanced readers. It seemed like a reasonable point to make in a section about performance. But perhaps any sufficiently advanced reader would look at the code anyway.\n\nDo you still believe I should remove this section?",
      "parentUuid": "4d342961_33490d90",
      "revId": "4bb6228c04fc0887a3e0819bc224e56a5b11a110",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6b7d181c_6d4d132f",
        "filename": "slog/doc.go",
        "patchSetId": 1
      },
      "lineNbr": 317,
      "author": {
        "id": 57259
      },
      "writtenOn": "2022-12-27T19:58:40Z",
      "side": 1,
      "message": "Yeah, I think advanced readers will either read the code or notice the lock in a contention profile. I don\u0027t think you need to mention it here.",
      "parentUuid": "2fc82aa3_d2123775",
      "revId": "4bb6228c04fc0887a3e0819bc224e56a5b11a110",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e30547cd_ec3ac72a",
        "filename": "slog/doc.go",
        "patchSetId": 1
      },
      "lineNbr": 317,
      "author": {
        "id": 14570
      },
      "writtenOn": "2022-12-27T20:03:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6b7d181c_6d4d132f",
      "revId": "4bb6228c04fc0887a3e0819bc224e56a5b11a110",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}