{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "f6a687af_abb42d4c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-12-17T17:51:41Z",
      "side": 1,
      "message": "TryBots beginning. Status page: https://farmer.golang.org/try?commit\u003d4bb6228c\n",
      "tag": "autogenerated:trybots~beginning",
      "revId": "4bb6228c04fc0887a3e0819bc224e56a5b11a110",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5c7358de_cf340bbe",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-12-17T17:54:11Z",
      "side": 1,
      "message": "TryBots are happy.\n\n",
      "parentUuid": "f6a687af_abb42d4c",
      "tag": "autogenerated:trybots~happy",
      "revId": "4bb6228c04fc0887a3e0819bc224e56a5b11a110",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a260d9b2_c5c44633",
        "filename": "slog/doc.go",
        "patchSetId": 1
      },
      "lineNbr": 267,
      "author": {
        "id": 57259
      },
      "writtenOn": "2022-12-18T21:15:58Z",
      "side": 1,
      "message": "\"If the original record value is still needed, call Clone and apply the modifications to the copy.\"",
      "revId": "4bb6228c04fc0887a3e0819bc224e56a5b11a110",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eaa9f171_0b6835d0",
        "filename": "slog/doc.go",
        "patchSetId": 1
      },
      "lineNbr": 283,
      "author": {
        "id": 57259
      },
      "writtenOn": "2022-12-18T21:15:58Z",
      "side": 1,
      "message": "nit: \"take advantage of\" ?",
      "range": {
        "startLine": 283,
        "startChar": 34,
        "endLine": 283,
        "endChar": 41
      },
      "revId": "4bb6228c04fc0887a3e0819bc224e56a5b11a110",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c86e9abd_a780ba46",
        "filename": "slog/doc.go",
        "patchSetId": 1
      },
      "lineNbr": 285,
      "author": {
        "id": 57259
      },
      "writtenOn": "2022-12-18T21:15:58Z",
      "side": 1,
      "message": "\"event is discarded\"\n\n(The call still takes place.)",
      "range": {
        "startLine": 285,
        "startChar": 70,
        "endLine": 285,
        "endChar": 86
      },
      "revId": "4bb6228c04fc0887a3e0819bc224e56a5b11a110",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "98a3dc54_22c3ffed",
        "filename": "slog/doc.go",
        "patchSetId": 1
      },
      "lineNbr": 285,
      "author": {
        "id": 57259
      },
      "writtenOn": "2022-12-18T21:15:58Z",
      "side": 1,
      "message": "are always",
      "range": {
        "startLine": 285,
        "startChar": 28,
        "endLine": 285,
        "endChar": 42
      },
      "revId": "4bb6228c04fc0887a3e0819bc224e56a5b11a110",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0f8ad7b6_2e356659",
        "filename": "slog/doc.go",
        "patchSetId": 1
      },
      "lineNbr": 286,
      "author": {
        "id": 57259
      },
      "writtenOn": "2022-12-18T21:15:58Z",
      "side": 1,
      "message": "\"computation so that\"\n\ns/when/if/",
      "range": {
        "startLine": 286,
        "startChar": 19,
        "endLine": 286,
        "endChar": 26
      },
      "revId": "4bb6228c04fc0887a3e0819bc224e56a5b11a110",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6acc590f_da3aedd0",
        "filename": "slog/doc.go",
        "patchSetId": 1
      },
      "lineNbr": 289,
      "author": {
        "id": 57259
      },
      "writtenOn": "2022-12-18T21:15:58Z",
      "side": 1,
      "message": "Always flag bad code in examples as it may be copied careless without the surrounding warning:\n\nslog.Info(\"starting request\", \"url\", r.URL.String()) // may compute String unnecessarily",
      "revId": "4bb6228c04fc0887a3e0819bc224e56a5b11a110",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "98c5ac8d_667fe93c",
        "filename": "slog/doc.go",
        "patchSetId": 1
      },
      "lineNbr": 291,
      "author": {
        "id": 57259
      },
      "writtenOn": "2022-12-18T21:15:58Z",
      "side": 1,
      "message": "\"this log event is discarded\"\n\nor (active voice):\n\"the logger discards Info-level events\"",
      "range": {
        "startLine": 291,
        "startChar": 45,
        "endLine": 291,
        "endChar": 66
      },
      "revId": "4bb6228c04fc0887a3e0819bc224e56a5b11a110",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "875b731e_c47a9848",
        "filename": "slog/doc.go",
        "patchSetId": 1
      },
      "lineNbr": 292,
      "author": {
        "id": 57259
      },
      "writtenOn": "2022-12-18T21:15:58Z",
      "side": 1,
      "message": "...directly:\n\n    slog.Info(\"starting request\", \"url\", r.URL) // calls URL.String only if needed",
      "range": {
        "startLine": 292,
        "startChar": 8,
        "endLine": 292,
        "endChar": 16
      },
      "revId": "4bb6228c04fc0887a3e0819bc224e56a5b11a110",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8d0b22cf_4eec47ff",
        "filename": "slog/doc.go",
        "patchSetId": 1
      },
      "lineNbr": 293,
      "author": {
        "id": 57259
      },
      "writtenOn": "2022-12-18T21:15:58Z",
      "side": 1,
      "message": "log event",
      "range": {
        "startLine": 293,
        "startChar": 7,
        "endLine": 293,
        "endChar": 11
      },
      "revId": "4bb6228c04fc0887a3e0819bc224e56a5b11a110",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "64514dfe_b7fe4e9a",
        "filename": "slog/doc.go",
        "patchSetId": 1
      },
      "lineNbr": 294,
      "author": {
        "id": 57259
      },
      "writtenOn": "2022-12-18T21:15:58Z",
      "side": 1,
      "message": "Huh, this is interesting. Really the caller of the log function shouldn\u0027t care about text vs JSON, but this deferred-String trick is forcing them to care.\n\nPerhaps we should document this as a feature: \"Avoiding the call to String also preserves the structure of the underlying value. For example the JSON handler emits the components of the parsed URL as a JSON object.\"\n\nAnd perhaps add something along the lines of:\n\n\"If you want to avoid eagerly paying the cost of the String call without causing the handler to potentially inspect the structure of the value, wrap the value in a fmt.Stringer implementation that hides its Marshal methods.\"",
      "range": {
        "startLine": 294,
        "startChar": 0,
        "endLine": 294,
        "endChar": 52
      },
      "revId": "4bb6228c04fc0887a3e0819bc224e56a5b11a110",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5160158c_8138097a",
        "filename": "slog/doc.go",
        "patchSetId": 1
      },
      "lineNbr": 317,
      "author": {
        "id": 57259
      },
      "writtenOn": "2022-12-18T21:15:58Z",
      "side": 1,
      "message": "Is this actually a problem? The lock may be redundant if the Writer is atomic (e.g. os.File), but in that case I wouldn\u0027t expect it to increase contention significantly over the locking in the kernel, since the critical section is just the single Write call. And if the writer isn\u0027t atomic, then the mutex is crucial for safety.",
      "revId": "4bb6228c04fc0887a3e0819bc224e56a5b11a110",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}