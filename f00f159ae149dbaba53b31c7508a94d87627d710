{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "2701cc87_2a7298bc",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 9,
      "author": {
        "id": 57259
      },
      "writtenOn": "2022-10-04T14:00:51Z",
      "side": 1,
      "message": "I\u0027m a bit confused about the motivation and terms here. It\u0027s not really marshaling, since it\u0027s converting a value to another value (which itself may be implement marshaller). It\u0027s really a lazy value that defers the computation of a simpler value until it is needed (one that may itself be lazy).\n\nI wonder why MarshalKind need exist. Isn\u0027t AnyKind + a type assertion sufficient to record this information? Is the assumption that it\u0027s cheaper to compute the interface satisfaction once and record it in the Value than to do it on demand?",
      "revId": "f00f159ae149dbaba53b31c7508a94d87627d710",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7e1316e4_6332f50e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 9,
      "author": {
        "id": 14570
      },
      "writtenOn": "2022-10-04T22:10:27Z",
      "side": 1,
      "message": "It\u0027s not strictly Marshaling, but it\u0027s analogous to json.Marshaler and encoding.{Text,Binary}Marshaler in that it lets you present your type in a different format.\n\nAlso logr uses this name for the same concept.\n\nHappy to entertain alternative names.\n\nMarshalKind will catch handler writers who forget to do the check. See the commit message for more.",
      "parentUuid": "2701cc87_2a7298bc",
      "revId": "f00f159ae149dbaba53b31c7508a94d87627d710",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "599ab05a_d4f89d57",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 9,
      "author": {
        "id": 14570
      },
      "writtenOn": "2022-10-05T10:55:29Z",
      "side": 1,
      "message": "One name idea: ReplaceLogValue.",
      "parentUuid": "7e1316e4_6332f50e",
      "revId": "f00f159ae149dbaba53b31c7508a94d87627d710",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1cc0aa44_78d84742",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 9,
      "author": {
        "id": 57259
      },
      "writtenOn": "2022-10-10T16:43:22Z",
      "side": 1,
      "message": "That\u0027s better. Factor out the \"log\"?\n\npackage slog\ninterface ValueReplacer { ReplaceValue(Value) Value }",
      "parentUuid": "599ab05a_d4f89d57",
      "revId": "f00f159ae149dbaba53b31c7508a94d87627d710",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c1c37157_af7aa3cc",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 9,
      "author": {
        "id": 5056
      },
      "writtenOn": "2022-10-10T21:06:44Z",
      "side": 1,
      "message": "Replace how? or when?\nReplace seems too vague.\nI like MarshalLog because it is \"encode this for marshaling\".\nAlso I think you really need Log in the name to avoid conflicts with other methods a type might have.\n\nMaybe \n\n    type LogValuer interface {\n        LogValue() slog.Value\n    }\n\n\n(Compare with Stringer.)",
      "parentUuid": "1cc0aa44_78d84742",
      "revId": "f00f159ae149dbaba53b31c7508a94d87627d710",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6d19b02d_90620904",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 9,
      "author": {
        "id": 57259
      },
      "writtenOn": "2022-10-10T21:11:30Z",
      "side": 1,
      "message": "\u003e I like MarshalLog because it is \"encode this for marshaling\".\n\nYeah, but Marshal functions return a message, whereas this function returns an alternative data structure to be marshaled in the usual way.\n\nI\u0027m happy with LogValue.",
      "parentUuid": "c1c37157_af7aa3cc",
      "revId": "f00f159ae149dbaba53b31c7508a94d87627d710",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "03e12e8f_1d2dcbec",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 9,
      "author": {
        "id": 14570
      },
      "writtenOn": "2022-10-10T23:15:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6d19b02d_90620904",
      "revId": "f00f159ae149dbaba53b31c7508a94d87627d710",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0b0d4681_f7dda7bb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-10-03T18:30:57Z",
      "side": 1,
      "message": "Superseded.",
      "parentUuid": "f17f070f_b6c0b34e",
      "tag": "autogenerated:trybots~beginning",
      "revId": "f00f159ae149dbaba53b31c7508a94d87627d710",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "922a1355_7e9d7a0d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-10-03T18:30:57Z",
      "side": 1,
      "message": "TryBots beginning. Status page: https://farmer.golang.org/try?commit\u003df00f159a\n",
      "tag": "autogenerated:trybots~beginning",
      "revId": "f00f159ae149dbaba53b31c7508a94d87627d710",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3da8cc15_2a20fe01",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-10-03T18:35:08Z",
      "side": 1,
      "message": "TryBots are happy.\n\n",
      "parentUuid": "922a1355_7e9d7a0d",
      "tag": "autogenerated:trybots~happy",
      "revId": "f00f159ae149dbaba53b31c7508a94d87627d710",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8a4eee25_bf03ba15",
        "filename": "slog/value.go",
        "patchSetId": 2
      },
      "lineNbr": 249,
      "author": {
        "id": 57259
      },
      "writtenOn": "2022-10-04T14:00:51Z",
      "side": 1,
      "message": "This method needs some explanation. It seems like mostly a convenience method that returns the Any value and asserts that it is a marshaller... except that in the unsafe representation, the Kind field distinguishes Marshaller from Any, presumably as an optimization.\n\nAlso, this function panics if v\u0027s kind is not Marshaller.",
      "revId": "f00f159ae149dbaba53b31c7508a94d87627d710",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d89ed263_9abc1b0b",
        "filename": "slog/value.go",
        "patchSetId": 2
      },
      "lineNbr": 249,
      "author": {
        "id": 14570
      },
      "writtenOn": "2022-10-04T22:10:27Z",
      "side": 1,
      "message": "Added the boilerplate godoc.\nThis method exists because there is a getter method for each Kind.\nI think both representations treat Marshaler identically?",
      "parentUuid": "8a4eee25_bf03ba15",
      "revId": "f00f159ae149dbaba53b31c7508a94d87627d710",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c252a26a_7fa639ce",
        "filename": "slog/value.go",
        "patchSetId": 2
      },
      "lineNbr": 249,
      "author": {
        "id": 14570
      },
      "writtenOn": "2022-10-10T23:15:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d89ed263_9abc1b0b",
      "revId": "f00f159ae149dbaba53b31c7508a94d87627d710",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}