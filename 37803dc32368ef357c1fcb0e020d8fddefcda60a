{
  "comments": [
    {
      "key": {
        "uuid": "af22d592_7b81cfb6",
        "filename": "shiny/driver/mtldriver/mtldriver.go",
        "patchSetId": 9
      },
      "lineNbr": 80,
      "author": {
        "id": 5899
      },
      "writtenOn": "2019-08-30T02:18:07Z",
      "side": 1,
      "message": "This blocks, right? Does that mean that, even if f returns, Main won\u0027t actually return until we get some UI event (e.g. mouse over)?\n\nI don\u0027t know glfw that well. Is there a way to add a dummy event (from another thread) that will make glfw.WaitEvents return?",
      "revId": "37803dc32368ef357c1fcb0e020d8fddefcda60a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "251351cb_2f1d7084",
        "filename": "shiny/driver/mtldriver/mtldriver.go",
        "patchSetId": 9
      },
      "lineNbr": 80,
      "author": {
        "id": 6005
      },
      "writtenOn": "2019-08-30T22:21:32Z",
      "side": 1,
      "message": "\u003e Is there a way to add a dummy event (from another thread) that will make glfw.WaitEvents return?\n\nYes. glfw.PostEmptyEvent() is precisely what you\u0027re describing. (It\u0027s documented at https://www.glfw.org/docs/latest/group__window.html#gab5997a25187e9fd5c6f2ecbbc8dfd7e9.)\n\nI think what I need to do is to ensure there is a call to glfw.PostEmptyEvent() in each location that sends to the done, newWindowCh, and releaseWindowCh channels. That way, we can be certain that if this for loop is stuck waiting in glfw.WaitEvents(), it will break out and have a chance to receive a value from one of those 3 channels.\n\nI\u0027ve made that change now. (I had thought about this too, but hadn\u0027t gotten around to it yet.)",
      "parentUuid": "af22d592_7b81cfb6",
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "37803dc32368ef357c1fcb0e020d8fddefcda60a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a431353a_15821f3c",
        "filename": "shiny/driver/mtldriver/texture.go",
        "patchSetId": 9
      },
      "lineNbr": 27,
      "author": {
        "id": 5899
      },
      "writtenOn": "2019-08-30T02:18:07Z",
      "side": 1,
      "message": "sr.Add(dp)\nshould be\nsr.Sub(sr.Min).Add(dp)",
      "revId": "37803dc32368ef357c1fcb0e020d8fddefcda60a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "de91da10_8262addf",
        "filename": "shiny/driver/mtldriver/texture.go",
        "patchSetId": 9
      },
      "lineNbr": 27,
      "author": {
        "id": 6005
      },
      "writtenOn": "2019-08-30T22:21:32Z",
      "side": 1,
      "message": "Thanks for catching this.\n\nDone.",
      "parentUuid": "a431353a_15821f3c",
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "37803dc32368ef357c1fcb0e020d8fddefcda60a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "788daf5b_10185c68",
        "filename": "shiny/driver/mtldriver/window.go",
        "patchSetId": 9
      },
      "lineNbr": 57,
      "author": {
        "id": 5899
      },
      "writtenOn": "2019-08-30T02:18:07Z",
      "side": 1,
      "message": "You\u0027re calling a w.ml method off the main/UI thread. I don\u0027t know Metal well enough to know if that\u0027s problematic.",
      "revId": "37803dc32368ef357c1fcb0e020d8fddefcda60a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c213253b_deb8849d",
        "filename": "shiny/driver/mtldriver/window.go",
        "patchSetId": 9
      },
      "lineNbr": 57,
      "author": {
        "id": 6005
      },
      "writtenOn": "2019-08-30T22:21:32Z",
      "side": 1,
      "message": "To the best of my current knowledge, the Metal API is much more progressive in this way and it can be used safely from non-main threads.\n\nMuch of its functionality is also friendly for being used in parallel across multiple threads. Care must be taken to synchronize the work, e.g., when writing to textures, but the API in general is definitely designed allow taking full advantage of multi-CPU and even multi-GPU systems to their fullest (https://developer.apple.com/videos/play/wwdc2018/612/ and https://developer.apple.com/videos/play/wwdc2018/604/ are some good relevant resources).\n\nWhat I wrote above is general information. I will look more at this specific instance and make sure it\u0027s safe and can\u0027t conflict with any other Metal-related calls that may happen at the same time.",
      "parentUuid": "788daf5b_10185c68",
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "37803dc32368ef357c1fcb0e020d8fddefcda60a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3e174dd7_17820faa",
        "filename": "shiny/driver/mtldriver/window.go",
        "patchSetId": 9
      },
      "lineNbr": 73,
      "author": {
        "id": 5899
      },
      "writtenOn": "2019-08-30T02:18:07Z",
      "side": 1,
      "message": "Again, these are Metal calls off the main/UI thread.\n\nAn alternative would be to do the request/response thing into \"func main\"\u0027s loop, to run metal calls on the main/UI thread. You could have \"func main\" explicitly do this bit of code, or you could post a closure from here to main. You might then also need a \"dummy event\" as per the comment in mtldriver.go.",
      "revId": "37803dc32368ef357c1fcb0e020d8fddefcda60a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a6b4d223_0330c512",
        "filename": "shiny/driver/mtldriver/window.go",
        "patchSetId": 9
      },
      "lineNbr": 73,
      "author": {
        "id": 6005
      },
      "writtenOn": "2019-08-30T22:21:32Z",
      "side": 1,
      "message": "The main reason I placed a lot of the Metal calls directly in these functions is because, unlike the windowing calls, there isn\u0027t a requirement for them to be on the main thread. We might still want to do it if it makes avoiding race conditions easier.\n\nI\u0027ll look at this and try to check if it\u0027s safe. It will be very helpful for me to know which of the screen.{Window,Screen} interface methods are allowed to run concurrently. Right now, it doesn\u0027t seem to be documented.",
      "parentUuid": "3e174dd7_17820faa",
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "37803dc32368ef357c1fcb0e020d8fddefcda60a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "851304b5_0d116a2f",
        "filename": "shiny/driver/mtldriver/window.go",
        "patchSetId": 9
      },
      "lineNbr": 73,
      "author": {
        "id": 5899
      },
      "writtenOn": "2019-09-12T07:32:09Z",
      "side": 1,
      "message": "\u003e It will be very helpful for me to know which of the screen.{Window,Screen} interface methods are allowed to run concurrently.\n\nYeah, it\u0027s not well documented, and I\u0027ve forgotten the details. IIRC it\u0027s possible that nothing is safe to call concurrently, other than e.g. EventDeque\u0027s SendXxx methods...\n\nI mean, it might be valid to muck about with a Buffer\u0027s RGBA buffer concurrently, but even so, you might have to call Upload in \"the main func\", being the func passed to driver.Main...",
      "parentUuid": "a6b4d223_0330c512",
      "revId": "37803dc32368ef357c1fcb0e020d8fddefcda60a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9a6e4820_c380a406",
        "filename": "shiny/driver/mtldriver/window.go",
        "patchSetId": 9
      },
      "lineNbr": 97,
      "author": {
        "id": 5899
      },
      "writtenOn": "2019-08-30T02:18:07Z",
      "side": 1,
      "message": "sr.Add(dp)\nshould be\nsr.Sub(sr.Min).Add(dp)",
      "revId": "37803dc32368ef357c1fcb0e020d8fddefcda60a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "596d8df8_faa25cdb",
        "filename": "shiny/driver/mtldriver/window.go",
        "patchSetId": 9
      },
      "lineNbr": 97,
      "author": {
        "id": 6005
      },
      "writtenOn": "2019-08-30T22:21:32Z",
      "side": 1,
      "message": "Done.",
      "parentUuid": "9a6e4820_c380a406",
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "37803dc32368ef357c1fcb0e020d8fddefcda60a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    }
  ]
}