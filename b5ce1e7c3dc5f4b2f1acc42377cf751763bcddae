{
  "comments": [
    {
      "key": {
        "uuid": "9c86862c_2c665bfd",
        "filename": "shiny/widget/image.go",
        "patchSetId": 1
      },
      "lineNbr": 12,
      "author": {
        "id": 5030
      },
      "writtenOn": "2016-03-18T19:48:10Z",
      "side": 1,
      "message": "I\u0027m not clear on the purpose of having a wrapper object.\n\n*Node is concrete, so an *Image can\u0027t go into the node hierarchy. Who maintains it, where?\n\nI would have thought that either widget.Image exists and widget.Node is an interface, or there are just *Node, ImageClass, and NewImage() *Node. I\u0027m missing something?",
      "revId": "b5ce1e7c3dc5f4b2f1acc42377cf751763bcddae",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fcb5c2f8_1c9b55e9",
        "filename": "shiny/widget/image.go",
        "patchSetId": 1
      },
      "lineNbr": 12,
      "author": {
        "id": 5899
      },
      "writtenOn": "2016-03-20T00:35:38Z",
      "side": 1,
      "message": "The wrapper is there to attach class-specific methods like SetImage:\n\n----\n// imageImage is of type image.Image, from the standard library\u0027s image package.\nimageImage, err :\u003d jpeg.Decode(etc)\nif err !\u003d nil { etc }\n\n// widgetImage is of type widget.Image, from this package.\nwidgetImage :\u003d widget.NewImage()\nwidgetImage.SetImage(imageImage)\n\n// You can still insert a widget.Image into the node tree, via its embedded Node field.\ncontainer.AppendChild(widgetImage.Node)\n----\n\nYes, an example app will help explain this, although we don\u0027t really have enough functionality in the package to make an example app yet.",
      "parentUuid": "9c86862c_2c665bfd",
      "revId": "b5ce1e7c3dc5f4b2f1acc42377cf751763bcddae",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9c86862c_8c8bc7db",
        "filename": "shiny/widget/widget.go",
        "patchSetId": 1
      },
      "lineNbr": 15,
      "author": {
        "id": 5030
      },
      "writtenOn": "2016-03-18T19:48:10Z",
      "side": 1,
      "message": "Why uint32? Why not int or uint8?",
      "revId": "b5ce1e7c3dc5f4b2f1acc42377cf751763bcddae",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fcb5c2f8_9c6765b6",
        "filename": "shiny/widget/widget.go",
        "patchSetId": 1
      },
      "lineNbr": 15,
      "author": {
        "id": 5899
      },
      "writtenOn": "2016-03-20T00:35:38Z",
      "side": 1,
      "message": "uint8 works too.",
      "parentUuid": "9c86862c_8c8bc7db",
      "revId": "b5ce1e7c3dc5f4b2f1acc42377cf751763bcddae",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9c86862c_6c8773d3",
        "filename": "shiny/widget/widget.go",
        "patchSetId": 1
      },
      "lineNbr": 18,
      "author": {
        "id": 5030
      },
      "writtenOn": "2016-03-18T19:48:10Z",
      "side": 1,
      "message": "I find constants like this easier to read when the compact comments are inline:\n\nconst (\n    Leaf       Arity \u003d iota // no children\n    Shell                   // at most one child\n    Container               // any number of children\n)\n\niota if you prefer, I feel two ways about it.",
      "revId": "b5ce1e7c3dc5f4b2f1acc42377cf751763bcddae",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fcb5c2f8_fc68a989",
        "filename": "shiny/widget/widget.go",
        "patchSetId": 1
      },
      "lineNbr": 18,
      "author": {
        "id": 5899
      },
      "writtenOn": "2016-03-20T00:35:38Z",
      "side": 1,
      "message": "Done.",
      "parentUuid": "9c86862c_6c8773d3",
      "revId": "b5ce1e7c3dc5f4b2f1acc42377cf751763bcddae",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9c86862c_cc95bff6",
        "filename": "shiny/widget/widget.go",
        "patchSetId": 1
      },
      "lineNbr": 46,
      "author": {
        "id": 5030
      },
      "writtenOn": "2016-03-18T19:48:10Z",
      "side": 1,
      "message": "Deciding to paint onto an image.RGBA instead of a screen.Uploader cuts off the potential to paint using side channels.\n\nIn some ways, that\u0027s very nice. Everything is easy and in-memory. It means parent widgets could make decisions about where to place the content after the child Paint is complete.\n\nIn another way, it means there\u0027s no chance for an OpenGL-specific widget to draw using side channels. It means a Widget cannot maintain screen.Texture objects and reuse them (saving roundtrips to the GPU memory each paint).\n\nI think something more is needed here. My instinct is screen.Uploader.",
      "revId": "b5ce1e7c3dc5f4b2f1acc42377cf751763bcddae",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fcb5c2f8_bc6221a6",
        "filename": "shiny/widget/widget.go",
        "patchSetId": 1
      },
      "lineNbr": 46,
      "author": {
        "id": 5899
      },
      "writtenOn": "2016-03-20T00:35:38Z",
      "side": 1,
      "message": "The widget package is intended to ultimately draw onto a screen.Buffer, i.e. an *image.RGBA. As you said, it makes everything easy and in-memory. Composing that Buffer with other Textures, or with OpenGL effects, should be possible, but I think that\u0027s out of scope of this package.",
      "parentUuid": "9c86862c_cc95bff6",
      "revId": "b5ce1e7c3dc5f4b2f1acc42377cf751763bcddae",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9c86862c_ac732b25",
        "filename": "shiny/widget/widget.go",
        "patchSetId": 1
      },
      "lineNbr": 46,
      "author": {
        "id": 5030
      },
      "writtenOn": "2016-03-20T13:10:04Z",
      "side": 1,
      "message": "OK, we can talk about GL side channels later, but I don\u0027t see how the widget package can end up without one.\n\nConsider NSOpenGLView and \u003ccanvas\u003e, both of which embed GL in a widget hierarchy that can scroll and be repositioned.",
      "parentUuid": "fcb5c2f8_bc6221a6",
      "revId": "b5ce1e7c3dc5f4b2f1acc42377cf751763bcddae",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9c86862c_2c7d7b8d",
        "filename": "shiny/widget/widget.go",
        "patchSetId": 1
      },
      "lineNbr": 77,
      "author": {
        "id": 5030
      },
      "writtenOn": "2016-03-18T19:48:10Z",
      "side": 1,
      "message": "How about calling it Data?",
      "revId": "b5ce1e7c3dc5f4b2f1acc42377cf751763bcddae",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fcb5c2f8_dc6ded97",
        "filename": "shiny/widget/widget.go",
        "patchSetId": 1
      },
      "lineNbr": 77,
      "author": {
        "id": 5899
      },
      "writtenOn": "2016-03-20T00:35:38Z",
      "side": 1,
      "message": "There will be other sorts of Data coming in future CLs.",
      "parentUuid": "9c86862c_2c7d7b8d",
      "revId": "b5ce1e7c3dc5f4b2f1acc42377cf751763bcddae",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    }
  ]
}