{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "483c3cd6_cc5a5c5a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-09-21T11:44:03Z",
      "side": 1,
      "message": "TryBots beginning. Status page: https://farmer.golang.org/try?commit\u003d9f777564\n",
      "tag": "autogenerated:trybots~beginning",
      "revId": "9f777564e8703031ebd202a4ee5b068cda96dafb",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6daa1fd6_b479f608",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-09-21T11:46:27Z",
      "side": 1,
      "message": "TryBots are happy.\n\n",
      "parentUuid": "483c3cd6_cc5a5c5a",
      "tag": "autogenerated:trybots~happy",
      "revId": "9f777564e8703031ebd202a4ee5b068cda96dafb",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "116d0a39_3ea35b99",
        "filename": "slog/handler.go",
        "patchSetId": 1
      },
      "lineNbr": 136,
      "author": {
        "id": 57259
      },
      "writtenOn": "2022-09-21T14:12:30Z",
      "side": 1,
      "message": "(Preexisting)\n\nIt would be slightly clearer if there was only one variable for rep and replace and the checks below were of the form:\n\n    if replace !\u003d nil {\n        ...replace(...)...\n    } else {\n        ...normal case...\n    }",
      "revId": "9f777564e8703031ebd202a4ee5b068cda96dafb",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "18e10db6_fa41c2f2",
        "filename": "slog/handler_test.go",
        "patchSetId": 1
      },
      "lineNbr": 86,
      "author": {
        "id": 57259
      },
      "writtenOn": "2022-09-21T14:12:30Z",
      "side": 1,
      "message": "upperCaseKey?",
      "range": {
        "startLine": 86,
        "startChar": 5,
        "endLine": 86,
        "endChar": 11
      },
      "revId": "9f777564e8703031ebd202a4ee5b068cda96dafb",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "92299233_95a3eae1",
        "filename": "slog/json_handler_test.go",
        "patchSetId": 1
      },
      "lineNbr": 55,
      "author": {
        "id": 57259
      },
      "writtenOn": "2022-09-21T14:12:30Z",
      "side": 1,
      "message": "delete",
      "revId": "9f777564e8703031ebd202a4ee5b068cda96dafb",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "13f886b2_893faa91",
        "filename": "slog/level.go",
        "patchSetId": 1
      },
      "lineNbr": 83,
      "author": {
        "id": 57259
      },
      "writtenOn": "2022-09-21T14:12:30Z",
      "side": 1,
      "message": "This assumes that Level.String() produces only values that are safely JSON-encoded using AppendQuote, which is not the case for strings in general (e.g. those for which AppendQuote emits \\x and \\U escapes). Perhaps worth a comment:\n\n// AppendQuote is sufficient for JSON-encoding all Level strings.",
      "revId": "9f777564e8703031ebd202a4ee5b068cda96dafb",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}