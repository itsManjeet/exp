{
  "comments": [
    {
      "key": {
        "uuid": "efda7963_68e97f14",
        "filename": "shiny/screen/screen.go",
        "patchSetId": 1
      },
      "lineNbr": 251,
      "author": {
        "id": 5030
      },
      "writtenOn": "2016-07-28T16:00:42Z",
      "side": 1,
      "message": "I believe my comment below on PaintBaseContext makes this less urgent by reducing unnecessary Uploads.",
      "revId": "bc7356d236c22f5b27af60e4fe2815f3421a50b9",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "efda7963_08e1db2a",
        "filename": "shiny/widget/node/node.go",
        "patchSetId": 1
      },
      "lineNbr": 158,
      "author": {
        "id": 5030
      },
      "writtenOn": "2016-07-28T16:00:42Z",
      "side": 1,
      "message": "I believe PaintContext should carry the current DrawContext, so that widgets with driver-specific painting logic can go to town. (Could just be a TODO for now.)",
      "revId": "bc7356d236c22f5b27af60e4fe2815f3421a50b9",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8fa57d1d_aba609a9",
        "filename": "shiny/widget/node/node.go",
        "patchSetId": 1
      },
      "lineNbr": 158,
      "author": {
        "id": 5899
      },
      "writtenOn": "2016-07-28T21:39:28Z",
      "side": 1,
      "message": "TODO added.",
      "parentUuid": "efda7963_08e1db2a",
      "revId": "bc7356d236c22f5b27af60e4fe2815f3421a50b9",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "efda7963_88ecab26",
        "filename": "shiny/widget/node/node.go",
        "patchSetId": 1
      },
      "lineNbr": 168,
      "author": {
        "id": 5030
      },
      "writtenOn": "2016-07-28T16:00:42Z",
      "side": 1,
      "message": "So now there is two-pass painting and a PaintContext, I\u0027d like to understand why there should be a PaintBaseContext. In particular, it seems to me that PaintBase should be:\n\n        PaintBase(ctx *PaintContext, origin image.Point) error\n\nand if a widget wants to assemble pixels itself, it should maintain a screen.Texture and using ctx.Drawer to put it on the screen.\n\nThis lets widgets take significant advantage of the underlying graphics hardware. For example, a widget.Uniform shouldn\u0027t fill a bunch of CPU-side pixels, upload them to the graphics card and then render them onto triangles. At the very least it should keep those pixels on the graphics card as a screen.Texture (and in the future we could provide more ways to create screen.Texture objects that let us take a shortcut in GLSL and not use any memory for uniform textures).\n\nOf course this makes Sheet more complex, it has to provide it\u0027s own *image.RGBA-based Drawer implementation. I think that\u0027s OK. (In fact, one day the Sheet implementation might even have gldriver-specific logic so that instead of being backed by an *image.RGBA, it provides a screen.Drawer that works on a GL framebuffer.)",
      "revId": "bc7356d236c22f5b27af60e4fe2815f3421a50b9",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8fa57d1d_4b996568",
        "filename": "shiny/widget/node/node.go",
        "patchSetId": 1
      },
      "lineNbr": 168,
      "author": {
        "id": 5899
      },
      "writtenOn": "2016-07-28T21:39:28Z",
      "side": 1,
      "message": "I\u0027m not sure what you\u0027re asking for. I don\u0027t think that most widgets should maintain their own screen.Texture.\n\nConsider scrolling. The PaintBase split means that one widget (the Sheet) can handle the logic to cut up some window real estate into tiles and move the tiles around to scroll. Child widgets just have to implement PaintBase.\n\nThe alternative, I think, is for every widget you could put into a scroller, which is basically every widget, to have to handle this for their own textures.\n\nOr, you\u0027re suggesting that a Sheet provides its own *image.RGBA-based Drawer. I don\u0027t think that works either. Again, consider the text widget. The golang.org/x/image/font code that draws glyphs expects a draw.Image, i.e. an *image.RGBA. It can\u0027t draw glyphs onto a screen.Drawer.",
      "parentUuid": "efda7963_88ecab26",
      "revId": "bc7356d236c22f5b27af60e4fe2815f3421a50b9",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cf8db5b7_fd8c872c",
        "filename": "shiny/widget/node/node.go",
        "patchSetId": 1
      },
      "lineNbr": 168,
      "author": {
        "id": 5030
      },
      "writtenOn": "2016-07-28T22:57:57Z",
      "side": 1,
      "message": "I am actually suggesting most widgets maintain their own screen.Texture objects. I think that\u0027s a completely reasonable way to let the widget system extract a lot of value from separate graphics memory. But I\u0027ll prototype it after this CL series is in.",
      "parentUuid": "8fa57d1d_4b996568",
      "revId": "bc7356d236c22f5b27af60e4fe2815f3421a50b9",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4f50e5ef_71999868",
        "filename": "shiny/widget/node/node.go",
        "patchSetId": 1
      },
      "lineNbr": 168,
      "author": {
        "id": 5899
      },
      "writtenOn": "2016-07-28T23:28:25Z",
      "side": 1,
      "message": "I\u0027m curious to see the prototype.\n\nOne random thought: the Upload method is currently synchronous. It blocks until the upload is complete and the *image.RGBA can be freely modified. If you have a widget tree with 100 buttons and they each do their own Upload, then a naive tree walk paint might have 100 sequential stalls, which may or may not be problematic.",
      "parentUuid": "cf8db5b7_fd8c872c",
      "revId": "bc7356d236c22f5b27af60e4fe2815f3421a50b9",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "efda7963_e8e56f36",
        "filename": "shiny/widget/node/node.go",
        "patchSetId": 1
      },
      "lineNbr": 172,
      "author": {
        "id": 5030
      },
      "writtenOn": "2016-07-28T16:00:42Z",
      "side": 1,
      "message": "As a merged PaintContext, yes.",
      "revId": "bc7356d236c22f5b27af60e4fe2815f3421a50b9",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    }
  ]
}