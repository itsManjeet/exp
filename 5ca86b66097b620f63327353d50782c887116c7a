{
  "comments": [
    {
      "key": {
        "uuid": "2771fe1c_6d4dadc2",
        "filename": "shiny/driver/windriver/window.go",
        "patchSetId": 1
      },
      "lineNbr": 46,
      "author": {
        "id": 5810
      },
      "writtenOn": "2016-01-19T21:26:43Z",
      "side": 1,
      "message": "copy/paste frenzy",
      "range": {
        "startLine": 46,
        "startChar": 20,
        "endLine": 46,
        "endChar": 29
      },
      "revId": "5ca86b66097b620f63327353d50782c887116c7a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6777760f_4fa465c5",
        "filename": "shiny/driver/windriver/window.go",
        "patchSetId": 1
      },
      "lineNbr": 50,
      "author": {
        "id": 5810
      },
      "writtenOn": "2016-01-19T21:26:43Z",
      "side": 1,
      "message": "ditto",
      "range": {
        "startLine": 50,
        "startChar": 20,
        "endLine": 50,
        "endChar": 29
      },
      "revId": "5ca86b66097b620f63327353d50782c887116c7a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "071cfa50_66ed50aa",
        "filename": "shiny/screen/screen.go",
        "patchSetId": 1
      },
      "lineNbr": 67,
      "author": {
        "id": 5899
      },
      "writtenOn": "2016-01-22T00:06:35Z",
      "side": 1,
      "message": "FWIW, I\u0027d still call the arg opts (it\u0027s a plural), or actually, params.",
      "revId": "5ca86b66097b620f63327353d50782c887116c7a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "071cfa50_06e65cd3",
        "filename": "shiny/screen/screen.go",
        "patchSetId": 1
      },
      "lineNbr": 174,
      "author": {
        "id": 5899
      },
      "writtenOn": "2016-01-22T00:06:35Z",
      "side": 1,
      "message": "Pointer to interface type is weird. Theoretically, the purpose of this CL lets you eliminate the manual tracking of size.Events in the app code\u0027s main loop, such as in https://go-review.googlesource.com/#/c/18653/1/shiny/example/basic/main.go\n\nWhat does the corresponding main.go changes look like with this Get mechanism? I\u0027m guessing it\u0027s awkward.",
      "revId": "5ca86b66097b620f63327353d50782c887116c7a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "071cfa50_46f05487",
        "filename": "shiny/screen/screen.go",
        "patchSetId": 1
      },
      "lineNbr": 179,
      "author": {
        "id": 5899
      },
      "writtenOn": "2016-01-22T00:06:35Z",
      "side": 1,
      "message": "Is there any structure to this error returned? Can I programatically determine whether Set failed because the driver is incapable (e.g. the mobile driver doesn\u0027t support setting the window position) or for other reasons?\n\nWhat happens if I pass multiple WindowParameters to NewWindow and some of them succeed and some of them fail? Do I get an error? If so, what does it look like? Do I still get a non-nil, usable Window, if I also get an error?\n\nWhat happens if I pass a WindowParameter whose success is dependent on context. For example, on X11, programatically resizing a window is only a request, not a demand. The window manager, a separate program, is allowed to ignore the request, such as tiling window managers. Should Set return an error if the driver makes a request but the window manager then does nothing? Does Set have to block until it knows for sure whether the request was honored?",
      "revId": "5ca86b66097b620f63327353d50782c887116c7a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "27801e4e_ccfaef64",
        "filename": "shiny/screen/screen.go",
        "patchSetId": 1
      },
      "lineNbr": 199,
      "author": {
        "id": 5030
      },
      "writtenOn": "2016-01-19T19:15:57Z",
      "side": 1,
      "message": "This exposes an interesting overlap between these parameters and events. In particular, WindowSize and WindowPosition are components of size.Event.\n\nMaybe size.Event should be several different events, and those types can be reused as WindowParameters?",
      "revId": "5ca86b66097b620f63327353d50782c887116c7a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "071cfa50_26e358c4",
        "filename": "shiny/screen/screen.go",
        "patchSetId": 1
      },
      "lineNbr": 199,
      "author": {
        "id": 5899
      },
      "writtenOn": "2016-01-22T00:06:35Z",
      "side": 1,
      "message": "A window\u0027s position is not part of a size event.\n\nAlso, what about things like PixelsPerPt? It\u0027s not generally settable for a window, whether at construction or later. Nonetheless, do you make a WindowPixelsPerPt type that isn\u0027t settable, but is required if you want to Window.Get that information to e.g. pass up to a widget toolkit? Or will \"package main\" code need to keep manually tracking the latest size.Event anyway.",
      "parentUuid": "27801e4e_ccfaef64",
      "revId": "5ca86b66097b620f63327353d50782c887116c7a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "071cfa50_86fa4c63",
        "filename": "shiny/screen/screen.go",
        "patchSetId": 1
      },
      "lineNbr": 201,
      "author": {
        "id": 5899
      },
      "writtenOn": "2016-01-22T00:06:35Z",
      "side": 1,
      "message": "s/Size/Position/\n\nbut I don\u0027t find WindowPosition a compelling feature.",
      "revId": "5ca86b66097b620f63327353d50782c887116c7a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    }
  ]
}