// Copyright 2014 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Test that random number sequences generated by a specific seed
// do not change from version to version.
//
// Do NOT make changes to the golden outputs. If bugs need to be fixed
// in the underlying code, find ways to fix them that do not affect the
// outputs.

package rand_test

import (
	"flag"
	"fmt"
	"reflect"
	"testing"

	. "golang.org/x/exp/rand"
)

var printgolden = flag.Bool("printgolden", false, "print golden results for regression test")

// TestSource verifies that the output of the default Source is locked down.
func TestSourceRegress(t *testing.T) {
	src := NewSource(1)
	var got [20]uint64
	for i := range got {
		got[i] = src.Uint64()
	}
	want := [20]uint64{
		0xaef17502109b2cf7,
		0xb5f820621eef6a0f,
		0xc0c458a2f4844b4a,
		0x5482ad94a3c1c7bb,
		0x77998e2acc659a1d,
		0x0bd75d9826dac139,
		0xdd3bb13d44362f48,
		0x02d542f31b74a814,
		0xb3bd39dae21077f9,
		0x0047c5293b1f1021,
		0x722efcdc1e3c6c9e,
		0xd498f77f2bb508fd,
		0x1691fb0378259707,
		0x8b4a98eb3d08ba9d,
		0x16842429ca0eadaf,
		0xcc34743435de3a89,
		0x80b87f2a700fb3e0,
		0x300e0f512d6d2d97,
		0x53cde490bd0c05f7,
		0xa8336d1796ce1b4d,
	}
	if got != want {
		t.Errorf("got:\n\t%#016x\nwant:\n\t%#016x", got, want)
		if *printgolden {
			for _, x := range got {
				fmt.Printf("\t\t%#016x,\n", x)
			}
		}
	}
}

// TestRegress validates that the output stream is locked down, for instance so
// optimizations do not change the output. It iterates over methods of the
// Rand type to find functions to evaluate and checks the first 20 results
// against the golden results.
func TestRegress(t *testing.T) {
	var int32s = []int32{1, 10, 32, 1 << 20, 1<<20 + 1, 1000000000, 1 << 30, 1<<31 - 2, 1<<31 - 1}
	var int64s = []int64{1, 10, 32, 1 << 20, 1<<20 + 1, 1000000000, 1 << 30, 1<<31 - 2, 1<<31 - 1, 1000000000000000000, 1 << 60, 1<<63 - 2, 1<<63 - 1}
	var uint64s = []uint64{1, 10, 32, 1 << 20, 1<<20 + 1, 1000000000, 1 << 30, 1<<31 - 2, 1<<31 - 1, 1000000000000000000, 1 << 60, 1<<64 - 2, 1<<64 - 1}
	var permSizes = []int{0, 1, 5, 8, 9, 10, 16}
	r := New(NewSource(1))

	rv := reflect.ValueOf(r)
	p := 0
	if *printgolden {
		fmt.Printf("var regressGolden = []interface{}{\n")
	}
	for i := 0; i < rv.NumMethod(); i++ {
		m := rv.Type().Method(i)
		mv := rv.Method(i)
		mt := mv.Type()
		if mt.NumOut() == 0 {
			// No output means no result; filters out methods like Seed.
			// Hacky but sufficient.
			continue
		}
		if mt.NumOut() != 1 {
			t.Fatalf("unexpected result count for r.%s", m.Name)
		}
		r.Seed(1)
		for repeat := 0; repeat < 20; repeat++ {
			var args []reflect.Value
			var argstr string
			if mt.NumIn() == 1 {
				var x interface{}
				switch mt.In(0).Kind() {
				default:
					t.Fatalf("unexpected argument type %s for r.%s", mt.In(0), m.Name)

				case reflect.Int:
					if m.Name == "Perm" {
						x = permSizes[repeat%len(permSizes)]
						break
					}
					big := int64s[repeat%len(int64s)]
					if int64(int(big)) != big {
						r.Int63n(big) // what would happen on 64-bit machine, to keep stream in sync
						if *printgolden {
							fmt.Printf("\tskipped, // must run printgolden on 64-bit machine\n")
						}
						p++
						continue
					}
					x = int(big)

				case reflect.Int32:
					x = int32s[repeat%len(int32s)]

				case reflect.Int64:
					x = int64s[repeat%len(int64s)]

				case reflect.Uint64:
					x = uint64s[repeat%len(uint64s)]
				}
				argstr = fmt.Sprintf("%#x", x)
				args = append(args, reflect.ValueOf(x))
			}
			out := mv.Call(args)[0].Interface()
			if m.Name == "Int" || m.Name == "Intn" {
				out = int64(out.(int))
			}
			if *printgolden {
				var val string
				big := int64(1 << 60)
				if int64(int(big)) != big && (m.Name == "Int" || m.Name == "Intn") {
					// 32-bit machine cannot print 64-bit results
					val = "truncated"
				} else if reflect.TypeOf(out).Kind() == reflect.Slice {
					val = fmt.Sprintf("%#v", out)
				} else {
					val = fmt.Sprintf("%T(%v)", out, out)
				}
				fmt.Printf("\t%s, // %s(%s)\n", val, m.Name, argstr)
			} else {
				want := regressGolden[p]
				if m.Name == "Int" {
					want = int64(int(uint(want.(int64)) << 1 >> 1))
				}
				if !reflect.DeepEqual(out, want) {
					t.Errorf("r.%s(%s) = %v, want %v", m.Name, argstr, out, want)
				}
			}
			p++
		}
	}
	if *printgolden {
		fmt.Printf("}\n")
	}
}

var regressGolden = []interface{}{
	float64(0.07164368257817216),   // ExpFloat64()
	float64(1.61357735960109),      // ExpFloat64()
	float64(0.6388729403872562),    // ExpFloat64()
	float64(0.3319881133770346),    // ExpFloat64()
	float64(0.09215862717766043),   // ExpFloat64()
	float64(0.7931686365841777),    // ExpFloat64()
	float64(0.052403097902912865),  // ExpFloat64()
	float64(2.3773561705669044),    // ExpFloat64()
	float64(0.0007658897892253574), // ExpFloat64()
	float64(1.5416263616932453),    // ExpFloat64()
	float64(1.376787313122905),     // ExpFloat64()
	float64(0.012105491321431596),  // ExpFloat64()
	float64(2.2538766117265494),    // ExpFloat64()
	float64(0.06151159647156894),   // ExpFloat64()
	float64(0.6547579668921503),    // ExpFloat64()
	float64(0.3573060325901538),    // ExpFloat64()
	float64(0.2124691961725342),    // ExpFloat64()
	float64(0.6153367196269732),    // ExpFloat64()
	float64(0.3176115448850239),    // ExpFloat64()
	float64(1.0911733085853619),    // ExpFloat64()
	float32(0.60615486),            // Float32()
	float32(0.9352121),             // Float32()
	float32(0.5167738),             // Float32()
	float32(0.7569539),             // Float32()
	float32(0.39688283),            // Float32()
	float32(0.85451084),            // Float32()
	float32(0.21165895),            // Float32()
	float32(0.45568967),            // Float32()
	float32(0.06433064),            // Float32()
	float32(0.12133986),            // Float32()
	float32(0.23603237),            // Float32()
	float32(0.7071684),             // Float32()
	float32(0.14683574),            // Float32()
	float32(0.034097493),           // Float32()
	float32(0.0573377),             // Float32()
	float32(0.8680807),             // Float32()
	float32(0.061338425),           // Float32()
	float32(0.4264769),             // Float32()
	float32(0.046966016),           // Float32()
	float32(0.8051041),             // Float32()
	float64(0.5455332111681902),    // Float64()
	float64(0.7539530376628266),    // Float64()
	float64(0.13581989056761157),   // Float64()
	float64(0.08368904098300989),   // Float64()
	float64(0.7986043922545069),    // Float64()
	float64(0.730175090682713),     // Float64()
	float64(0.8653856594332661),    // Float64()
	float64(0.6644225631946505),    // Float64()
	float64(0.9133123793906172),    // Float64()
	float64(0.24281751200806323),   // Float64()
	float64(0.4683666792438037),    // Float64()
	float64(0.780212006917537),     // Float64()
	float64(0.5618913027398954),    // Float64()
	float64(0.33116685791704337),   // Float64()
	float64(0.12941445793460626),   // Float64()
	float64(0.6391850521193457),    // Float64()
	float64(0.765523165578653),     // Float64()
	float64(0.4393697631107213),    // Float64()
	float64(0.4341510479281955),    // Float64()
	float64(0.6070669122135343),    // Float64()
	int64(3382613446860942583),     // Int()
	int64(3888893884032313871),     // Int()
	int64(4666952570772933450),     // Int()
	int64(6089620500072482747),     // Int()
	int64(8618075676419136029),     // Int()
	int64(853253562478281017),      // Int()
	int64(6718158145848749896),     // Int()
	int64(204142970020341780),      // Int()
	int64(3728199678791022585),     // Int()
	int64(20201504222679073),       // Int()
	int64(8227791591582755998),     // Int()
	int64(6095894221212158205),     // Int()
	int64(1626356932776662791),     // Int()
	int64(813630818802514589),      // Int()
	int64(1622461527662439855),     // Int()
	int64(5491141613262355081),     // Int()
	int64(51931215960191968),       // Int()
	int64(3462722004823387543),     // Int()
	int64(6038733985671808503),     // Int()
	int64(2896778933411126093),     // Int()
	int32(1467529857),              // Int31()
	int32(1526468657),              // Int31()
	int32(1617046609),              // Int31()
	int32(708925130),               // Int31()
	int32(1003276053),              // Int31()
	int32(99331788),                // Int31()
	int32(1855838366),              // Int31()
	int32(23765369),                // Int31()
	int32(1507761389),              // Int31()
	int32(2351764),                 // Int31()
	int32(957841006),               // Int31()
	int32(1783397311),              // Int31()
	int32(189332865),               // Int31()
	int32(1168460917),              // Int31()
	int32(188879380),               // Int31()
	int32(1712994842),              // Int31()
	int32(1079787413),              // Int31()
	int32(403113896),               // Int31()
	int32(703001160),               // Int31()
	int32(1410971275),              // Int31()
	int32(0),                       // Int31n(0x1)
	int32(9),                       // Int31n(0xa)
	int32(10),                      // Int31n(0x20)
	int32(116667),                  // Int31n(0x100000)
	int32(689886),                  // Int31n(0x100001)
	int32(478281017),               // Int31n(0x3b9aca00)
	int32(70659912),                // Int31n(0x40000000)
	int32(650752992),               // Int31n(0x7ffffffe)
	int32(1233841073),              // Int31n(0x7fffffff)
	int32(0),                       // Int31n(0x1)
	int32(8),                       // Int31n(0xa)
	int32(29),                      // Int31n(0x20)
	int32(366343),                  // Int31n(0x100000)
	int32(348509),                  // Int31n(0x100001)
	int32(662439855),               // Int31n(0x3b9aca00)
	int32(903756425),               // Int31n(0x40000000)
	int32(1928442000),              // Int31n(0x7ffffffe)
	int32(227101754),               // Int31n(0x7fffffff)
	int32(0),                       // Int31n(0x1)
	int32(1),                       // Int31n(0xa)
	int64(3382613446860942583),     // Int63()
	int64(3888893884032313871),     // Int63()
	int64(4666952570772933450),     // Int63()
	int64(6089620500072482747),     // Int63()
	int64(8618075676419136029),     // Int63()
	int64(853253562478281017),      // Int63()
	int64(6718158145848749896),     // Int63()
	int64(204142970020341780),      // Int63()
	int64(3728199678791022585),     // Int63()
	int64(20201504222679073),       // Int63()
	int64(8227791591582755998),     // Int63()
	int64(6095894221212158205),     // Int63()
	int64(1626356932776662791),     // Int63()
	int64(813630818802514589),      // Int63()
	int64(1622461527662439855),     // Int63()
	int64(5491141613262355081),     // Int63()
	int64(51931215960191968),       // Int63()
	int64(3462722004823387543),     // Int63()
	int64(6038733985671808503),     // Int63()
	int64(2896778933411126093),     // Int63()
	int64(0),                       // Int63n(0x1)
	int64(9),                       // Int63n(0xa)
	int64(10),                      // Int63n(0x20)
	int64(116667),                  // Int63n(0x100000)
	int64(689886),                  // Int63n(0x100001)
	int64(478281017),               // Int63n(0x3b9aca00)
	int64(70659912),                // Int63n(0x40000000)
	int64(650752992),               // Int63n(0x7ffffffe)
	int64(1233841073),              // Int63n(0x7fffffff)
	int64(20201504222679073),       // Int63n(0xde0b6b3a7640000)
	int64(157341059334827166),      // Int63n(0x1000000000000000)
	int64(6095894221212158207),     // Int63n(0x7ffffffffffffffe)
	int64(1626356932776662791),     // Int63n(0x7fffffffffffffff)
	int64(0),                       // Int63n(0x1)
	int64(5),                       // Int63n(0xa)
	int64(9),                       // Int63n(0x20)
	int64(1029088),                 // Int63n(0x100000)
	int64(534733),                  // Int63n(0x100001)
	int64(671808503),               // Int63n(0x3b9aca00)
	int64(382606157),               // Int63n(0x40000000)
	int64(0),                       // Intn(0x1)
	int64(9),                       // Intn(0xa)
	int64(10),                      // Intn(0x20)
	int64(116667),                  // Intn(0x100000)
	int64(689886),                  // Intn(0x100001)
	int64(478281017),               // Intn(0x3b9aca00)
	int64(70659912),                // Intn(0x40000000)
	int64(650752992),               // Intn(0x7ffffffe)
	int64(1233841073),              // Intn(0x7fffffff)
	int64(20201504222679073),       // Intn(0xde0b6b3a7640000)
	int64(157341059334827166),      // Intn(0x1000000000000000)
	int64(6095894221212158207),     // Intn(0x7ffffffffffffffe)
	int64(1626356932776662791),     // Intn(0x7fffffffffffffff)
	int64(0),                       // Intn(0x1)
	int64(5),                       // Intn(0xa)
	int64(9),                       // Intn(0x20)
	int64(1029088),                 // Intn(0x100000)
	int64(534733),                  // Intn(0x100001)
	int64(671808503),               // Intn(0x3b9aca00)
	int64(382606157),               // Intn(0x40000000)
	float64(-0.22979062990639829),  // NormFloat64()
	float64(-1.1930416559497061),   // NormFloat64()
	float64(-0.5542161782734982),   // NormFloat64()
	float64(0.5915173249354783),    // NormFloat64()
	float64(1.1545582857507384),    // NormFloat64()
	float64(0.08935119049446283),   // NormFloat64()
	float64(-0.40537616019722733),  // NormFloat64()
	float64(0.055188188782044234),  // NormFloat64()
	float64(-1.142874293891131),    // NormFloat64()
	float64(0.0026759621105194586), // NormFloat64()
	float64(1.7417859258079644),    // NormFloat64()
	float64(-1.1673298023185021),   // NormFloat64()
	float64(0.0752131922697092),    // NormFloat64()
	float64(-2.059778910245487),    // NormFloat64()
	float64(0.21491695519529608),   // NormFloat64()
	float64(-0.5550137177785179),   // NormFloat64()
	float64(-1.2286922737745414),   // NormFloat64()
	float64(0.536120731319436),     // NormFloat64()
	float64(-0.6508813335807739),   // NormFloat64()
	float64(-0.6038280061863438),   // NormFloat64()
	[]int{},                                                     // Perm(0x0)
	[]int{0},                                                    // Perm(0x1)
	[]int{1, 3, 4, 0, 2},                                        // Perm(0x5)
	[]int{1, 3, 2, 4, 0, 7, 5, 6},                               // Perm(0x8)
	[]int{6, 7, 0, 4, 8, 1, 2, 5, 3},                            // Perm(0x9)
	[]int{6, 4, 7, 1, 0, 5, 3, 2, 8, 9},                         // Perm(0xa)
	[]int{3, 9, 7, 11, 1, 5, 8, 0, 10, 14, 6, 15, 12, 4, 13, 2}, // Perm(0x10)
	[]int{},                                                     // Perm(0x0)
	[]int{0},                                                    // Perm(0x1)
	[]int{4, 1, 2, 0, 3},                                        // Perm(0x5)
	[]int{6, 4, 2, 0, 1, 3, 7, 5},                               // Perm(0x8)
	[]int{8, 7, 0, 3, 1, 4, 2, 6, 5},                            // Perm(0x9)
	[]int{7, 6, 8, 1, 4, 9, 2, 5, 0, 3},                         // Perm(0xa)
	[]int{6, 13, 0, 3, 12, 5, 15, 1, 9, 7, 11, 10, 8, 4, 2, 14}, // Perm(0x10)
	[]int{},                             // Perm(0x0)
	[]int{0},                            // Perm(0x1)
	[]int{3, 2, 1, 0, 4},                // Perm(0x5)
	[]int{3, 1, 0, 7, 4, 6, 2, 5},       // Perm(0x8)
	[]int{3, 8, 0, 2, 6, 1, 4, 5, 7},    // Perm(0x9)
	[]int{5, 1, 2, 0, 9, 7, 3, 8, 4, 6}, // Perm(0xa)
	uint32(2935059714),                  // Uint32()
	uint32(3052937314),                  // Uint32()
	uint32(3234093218),                  // Uint32()
	uint32(1417850260),                  // Uint32()
	uint32(2006552106),                  // Uint32()
	uint32(198663576),                   // Uint32()
	uint32(3711676733),                  // Uint32()
	uint32(47530739),                    // Uint32()
	uint32(3015522778),                  // Uint32()
	uint32(4703529),                     // Uint32()
	uint32(1915682012),                  // Uint32()
	uint32(3566794623),                  // Uint32()
	uint32(378665731),                   // Uint32()
	uint32(2336921835),                  // Uint32()
	uint32(377758761),                   // Uint32()
	uint32(3425989684),                  // Uint32()
	uint32(2159574826),                  // Uint32()
	uint32(806227793),                   // Uint32()
	uint32(1406002320),                  // Uint32()
	uint32(2821942551),                  // Uint32()
	uint64(12605985483715718391),        // Uint64()
	uint64(13112265920887089679),        // Uint64()
	uint64(13890324607627709258),        // Uint64()
	uint64(6089620500072482747),         // Uint64()
	uint64(8618075676419136029),         // Uint64()
	uint64(853253562478281017),          // Uint64()
	uint64(15941530182703525704),        // Uint64()
	uint64(204142970020341780),          // Uint64()
	uint64(12951571715645798393),        // Uint64()
	uint64(20201504222679073),           // Uint64()
	uint64(8227791591582755998),         // Uint64()
	uint64(15319266258066934013),        // Uint64()
	uint64(1626356932776662791),         // Uint64()
	uint64(10037002855657290397),        // Uint64()
	uint64(1622461527662439855),         // Uint64()
	uint64(14714513650117130889),        // Uint64()
	uint64(9275303252814967776),         // Uint64()
	uint64(3462722004823387543),         // Uint64()
	uint64(6038733985671808503),         // Uint64()
	uint64(12120150970265901901),        // Uint64()
	uint64(0),                           // Uint64n(0x1)
	uint64(9),                           // Uint64n(0xa)
	uint64(10),                          // Uint64n(0x20)
	uint64(116667),                      // Uint64n(0x100000)
	uint64(689886),                      // Uint64n(0x100001)
	uint64(478281017),                   // Uint64n(0x3b9aca00)
	uint64(70659912),                    // Uint64n(0x40000000)
	uint64(650752992),                   // Uint64n(0x7ffffffe)
	uint64(1233841073),                  // Uint64n(0x7fffffff)
	uint64(20201504222679073),           // Uint64n(0xde0b6b3a7640000)
	uint64(157341059334827166),          // Uint64n(0x1000000000000000)
	uint64(15319266258066934013),        // Uint64n(0xfffffffffffffffe)
	uint64(1626356932776662791),         // Uint64n(0xffffffffffffffff)
	uint64(0),                           // Uint64n(0x1)
	uint64(5),                           // Uint64n(0xa)
	uint64(9),                           // Uint64n(0x20)
	uint64(1029088),                     // Uint64n(0x100000)
	uint64(534733),                      // Uint64n(0x100001)
	uint64(671808503),                   // Uint64n(0x3b9aca00)
	uint64(382606157),                   // Uint64n(0x40000000)
}
