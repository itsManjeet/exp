// Copyright 2014 The Go Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Test that random number sequences generated by a specific seed
// do not change from version to version.
//
// Do NOT make changes to the golden outputs. If bugs need to be fixed
// in the underlying code, find ways to fix them that do not affect the
// outputs.

package rand_test

import (
	"flag"
	"fmt"
	"reflect"
	"testing"

	. "golang.org/x/exp/rand"
)

var printgolden = flag.Bool("printgolden", false, "print golden results for regression test")

// TestSource verifies that the output of the default Source is locked down.
func TestSourceRegress(t *testing.T) {
	src := NewSource(1)
	var got [20]uint64
	for i := range got {
		got[i] = src.Uint64()
	}
	want := [20]uint64{
		0x34e936394905d167,
		0x817c0ef62fe4c731,
		0x937987e6e24f5a40,
		0x0c0a8307fe226199,
		0xf96363568d8bab56,
		0xbaef3af36bd02620,
		0x8f18e416eb6b936b,
		0x05a43fc149f3a67a,
		0xdab012eb3ce01697,
		0xf76c495a133c6aa9,
		0x304b24c5040ce457,
		0x47d77e0abb413159,
		0x52a810fa9e452f04,
		0x2d24b66380cf4780,
		0x5ec7691b92018ef5,
		0x5076dfa749261ea0,
		0xac8f11ad3941d213,
		0x13fa8d67de91db25,
		0xb50883a9893274eb,
		0xeb8f59263f9109ac,
	}
	if got != want {
		t.Errorf("got:\n\t%#016x\nwant:\n\t%#016x", got, want)
		if *printgolden {
			for _, x := range got {
				fmt.Printf("\t\t%#016x,\n", x)
			}
		}
	}
}

// TestRegress validates that the output stream is locked down, for instance so
// optimizations do not change the output. It iterates over methods of the
// Rand type to find functions to evaluate and checks the first 20 results
// against the golden results.
func TestRegress(t *testing.T) {
	var int32s = []int32{1, 10, 32, 1 << 20, 1<<20 + 1, 1000000000, 1 << 30, 1<<31 - 2, 1<<31 - 1}
	var int64s = []int64{1, 10, 32, 1 << 20, 1<<20 + 1, 1000000000, 1 << 30, 1<<31 - 2, 1<<31 - 1, 1000000000000000000, 1 << 60, 1<<63 - 2, 1<<63 - 1}
	var uint64s = []uint64{1, 10, 32, 1 << 20, 1<<20 + 1, 1000000000, 1 << 30, 1<<31 - 2, 1<<31 - 1, 1000000000000000000, 1 << 60, 1<<64 - 2, 1<<64 - 1}
	var permSizes = []int{0, 1, 5, 8, 9, 10, 16}
	r := New(NewSource(1))

	rv := reflect.ValueOf(r)
	p := 0
	if *printgolden {
		fmt.Print("var regressGolden = []interface{}{") // Newline added below.
	}
	for i := 0; i < rv.NumMethod(); i++ {
		if *printgolden {
			// Blank line between each block makes formatting prettier once gofmt'ed.
			fmt.Println()
		}
		m := rv.Type().Method(i)
		mv := rv.Method(i)
		mt := mv.Type()
		if mt.NumOut() == 0 {
			// No output means no result; filters out methods like Seed.
			// Hacky but sufficient.
			continue
		}
		if mt.NumOut() != 1 {
			t.Fatalf("unexpected result count for r.%s", m.Name)
		}
		r.Seed(1)
		for repeat := 0; repeat < 20; repeat++ {
			var args []reflect.Value
			var argstr string
			if mt.NumIn() == 1 {
				var x interface{}
				switch mt.In(0).Kind() {
				default:
					t.Fatalf("unexpected argument type %s for r.%s", mt.In(0), m.Name)

				case reflect.Int:
					if m.Name == "Perm" {
						x = permSizes[repeat%len(permSizes)]
						break
					}
					big := int64s[repeat%len(int64s)]
					if int64(int(big)) != big {
						r.Int63n(big) // what would happen on 64-bit machine, to keep stream in sync
						if *printgolden {
							fmt.Printf("\tskipped, // must run printgolden on 64-bit machine\n")
						}
						p++
						continue
					}
					x = int(big)

				case reflect.Int32:
					x = int32s[repeat%len(int32s)]

				case reflect.Int64:
					x = int64s[repeat%len(int64s)]

				case reflect.Uint64:
					x = uint64s[repeat%len(uint64s)]
				}
				argstr = fmt.Sprintf("%#x", x)
				args = append(args, reflect.ValueOf(x))
			}
			out := mv.Call(args)[0].Interface()
			if m.Name == "Int" || m.Name == "Intn" {
				out = int64(out.(int))
			}
			if *printgolden {
				var val string
				big := int64(1 << 60)
				if int64(int(big)) != big && (m.Name == "Int" || m.Name == "Intn") {
					// 32-bit machine cannot print 64-bit results
					val = "truncated"
				} else if reflect.TypeOf(out).Kind() == reflect.Slice {
					val = fmt.Sprintf("%#v", out)
				} else {
					val = fmt.Sprintf("%T(%v)", out, out)
				}
				fmt.Printf("\t%s, // %s(%s)\n", val, m.Name, argstr)
			} else {
				want := regressGolden[p]
				if m.Name == "Int" {
					want = int64(int(uint(want.(int64)) << 1 >> 1))
				}
				if !reflect.DeepEqual(out, want) {
					t.Errorf("r.%s(%s) = %v, want %v", m.Name, argstr, out, want)
				}
			}
			p++
		}
	}
	if *printgolden {
		fmt.Printf("}\n")
	}
}

var regressGolden = []interface{}{
	float64(0.18082223034472605),  // ExpFloat64()
	float64(2.5564551825051947),   // ExpFloat64()
	float64(2.231371940141714),    // ExpFloat64()
	float64(0.010996428543678695), // ExpFloat64()
	float64(1.1552955254649901),   // ExpFloat64()
	float64(3.457735239685223),    // ExpFloat64()
	float64(0.26285132339903056),  // ExpFloat64()
	float64(0.059735620695264835), // ExpFloat64()
	float64(3.5385910892756227),   // ExpFloat64()
	float64(1.1883051296937563),   // ExpFloat64()
	float64(0.5282943101421531),   // ExpFloat64()
	float64(0.0815314167397624),   // ExpFloat64()
	float64(1.82955338618898),     // ExpFloat64()
	float64(0.2343500758845279),   // ExpFloat64()
	float64(0.1978576681220881),   // ExpFloat64()
	float64(0.6986702095748638),   // ExpFloat64()
	float64(1.566307235654256),    // ExpFloat64()
	float64(0.10722407224617259),  // ExpFloat64()
	float64(1.5952381099353994),   // ExpFloat64()
	float64(0.6121670653882926),   // ExpFloat64()

	float32(0.022726476), // Float32()
	float32(0.8936644),   // Float32()
	float32(0.30997086),  // Float32()
	float32(0.13430172),  // Float32()
	float32(0.5455831),   // Float32()
	float32(0.81308174),  // Float32()
	float32(0.42021817),  // Float32()
	float32(0.951759),    // Float32()
	float32(0.8753447),   // Float32()
	float32(0.2360025),   // Float32()
	float32(0.05035919),  // Float32()
	float32(0.25465924),  // Float32()
	float32(0.27024865),  // Float32()
	float32(0.80968475),  // Float32()
	float32(0.006087601), // Float32()
	float32(0.1489048),   // Float32()
	float32(0.25711173),  // Float32()
	float32(0.56975013),  // Float32()
	float32(0.19709653),  // Float32()
	float32(0.56655383),  // Float32()

	float64(0.28786911260844483), // Float64()
	float64(0.8768263755248197),  // Float64()
	float64(0.7978395862690562),  // Float64()
	float64(0.3284950221596318),  // Float64()
	float64(0.10587623258229928), // Float64()
	float64(0.4759461503719571),  // Float64()
	float64(0.7778429601718079),  // Float64()
	float64(0.13278259700491835), // Float64()
	float64(0.5023094357463432),  // Float64()
	float64(0.38395408398658504), // Float64()
	float64(0.3482384757145479),  // Float64()
	float64(0.7341359765355647),  // Float64()
	float64(0.2520726290908617),  // Float64()
	float64(0.1472642436803966),  // Float64()
	float64(0.2315805293733023),  // Float64()
	float64(0.7148014477433726),  // Float64()
	float64(0.47090779479055056), // Float64()
	float64(0.8297614428582604),  // Float64()
	float64(0.26607205196674266), // Float64()
	float64(0.47963249602644487), // Float64()

	int64(3812638179211989351), // Int()
	int64(106976941678315313),  // Int()
	int64(1403302184611699264), // Int()
	int64(867649948573917593),  // Int()
	int64(8746944124676713302), // Int()
	int64(4246677790793934368), // Int()
	int64(1087870097100084075), // Int()
	int64(406519965772129914),  // Int()
	int64(6534743860862523031), // Int()
	int64(8605333639216786089), // Int()
	int64(3479915565668951127), // Int()
	int64(5176744881242059097), // Int()
	int64(5956029175780683524), // Int()
	int64(3252925369347426176), // Int()
	int64(6829542927065255669), // Int()
	int64(5798067479865859744), // Int()
	int64(3210804495026082323), // Int()
	int64(1439618508153543461), // Int()
	int64(3821449047998362859), // Int()
	int64(7750511504538012076), // Int()

	int32(443849500),  // Int31()
	int32(1086195579), // Int31()
	int32(1237107699), // Int31()
	int32(101007747),  // Int31()
	int32(2092020139), // Int31()
	int32(1568120185), // Int31()
	int32(1200386571), // Int31()
	int32(47325152),   // Int31()
	int32(1834486133), // Int31()
	int32(2075534509), // Int31()
	int32(405115490),  // Int31()
	int32(602652421),  // Int31()
	int32(693373053),  // Int31()
	int32(378690353),  // Int31()
	int32(795063437),  // Int31()
	int32(674983891),  // Int31()
	int32(1447528662), // Int31()
	int32(167593651),  // Int31()
	int32(1518617044), // Int31()
	int32(1976020115), // Int31()

	int32(0),          // Int31n(0x1)
	int32(1),          // Int31n(0xa)
	int32(0),          // Int31n(0x20)
	int32(156057),     // Int31n(0x100000)
	int32(1025490),    // Int31n(0x100001)
	int32(648710176),  // Int31n(0x3b9aca00)
	int32(728470379),  // Int31n(0x40000000)
	int32(1619305854), // Int31n(0x7ffffffe)
	int32(1916812400), // Int31n(0x7fffffff)
	int32(0),          // Int31n(0x1)
	int32(7),          // Int31n(0xa)
	int32(25),         // Int31n(0x20)
	int32(339716),     // Int31n(0x100000)
	int32(406567),     // Int31n(0x100001)
	int32(65255669),   // Int31n(0x3b9aca00)
	int32(153493152),  // Int31n(0x40000000)
	int32(1803426001), // Int31n(0x7ffffffe)
	int32(109508085),  // Int31n(0x7fffffff)
	int32(0),          // Int31n(0x1)
	int32(4),          // Int31n(0xa)

	int64(3812638179211989351), // Int63()
	int64(106976941678315313),  // Int63()
	int64(1403302184611699264), // Int63()
	int64(867649948573917593),  // Int63()
	int64(8746944124676713302), // Int63()
	int64(4246677790793934368), // Int63()
	int64(1087870097100084075), // Int63()
	int64(406519965772129914),  // Int63()
	int64(6534743860862523031), // Int63()
	int64(8605333639216786089), // Int63()
	int64(3479915565668951127), // Int63()
	int64(5176744881242059097), // Int63()
	int64(5956029175780683524), // Int63()
	int64(3252925369347426176), // Int63()
	int64(6829542927065255669), // Int63()
	int64(5798067479865859744), // Int63()
	int64(3210804495026082323), // Int63()
	int64(1439618508153543461), // Int63()
	int64(3821449047998362859), // Int63()
	int64(7750511504538012076), // Int63()

	int64(0),                   // Int63n(0x1)
	int64(1),                   // Int63n(0xa)
	int64(0),                   // Int63n(0x20)
	int64(156057),              // Int63n(0x100000)
	int64(1025490),             // Int63n(0x100001)
	int64(648710176),           // Int63n(0x3b9aca00)
	int64(728470379),           // Int63n(0x40000000)
	int64(1619305854),          // Int63n(0x7ffffffe)
	int64(1916812400),          // Int63n(0x7fffffff)
	int64(828705676071561897),  // Int63n(0xde0b6b3a7640000)
	int64(21151051848410199),   // Int63n(0x1000000000000000)
	int64(5176744881242059097), // Int63n(0x7ffffffffffffffe)
	int64(5956029175780683524), // Int63n(0x7fffffffffffffff)
	int64(0),                   // Int63n(0x1)
	int64(9),                   // Int63n(0xa)
	int64(0),                   // Int63n(0x20)
	int64(119315),              // Int63n(0x100000)
	int64(1005513),             // Int63n(0x100001)
	int64(853138667),           // Int63n(0x3b9aca00)
	int64(1066469804),          // Int63n(0x40000000)

	int64(0),                   // Intn(0x1)
	int64(1),                   // Intn(0xa)
	int64(0),                   // Intn(0x20)
	int64(156057),              // Intn(0x100000)
	int64(1025490),             // Intn(0x100001)
	int64(648710176),           // Intn(0x3b9aca00)
	int64(728470379),           // Intn(0x40000000)
	int64(1619305854),          // Intn(0x7ffffffe)
	int64(1916812400),          // Intn(0x7fffffff)
	int64(828705676071561897),  // Intn(0xde0b6b3a7640000)
	int64(21151051848410199),   // Intn(0x1000000000000000)
	int64(5176744881242059097), // Intn(0x7ffffffffffffffe)
	int64(5956029175780683524), // Intn(0x7fffffffffffffff)
	int64(0),                   // Intn(0x1)
	int64(9),                   // Intn(0xa)
	int64(0),                   // Intn(0x20)
	int64(119315),              // Intn(0x100000)
	int64(1005513),             // Intn(0x100001)
	int64(853138667),           // Intn(0x3b9aca00)
	int64(1066469804),          // Intn(0x40000000)

	float64(0.594696832665853),    // NormFloat64()
	float64(0.055780493624012634), // NormFloat64()
	float64(-0.09569313868123352), // NormFloat64()
	float64(-1.3454038718762107),  // NormFloat64()
	float64(-0.8217347484865857),  // NormFloat64()
	float64(0.06817116484613528),  // NormFloat64()
	float64(-0.6585196229275455),  // NormFloat64()
	float64(-0.1285383152983267),  // NormFloat64()
	float64(0.6043174729597716),   // NormFloat64()
	float64(0.38207917086442195),  // NormFloat64()
	float64(1.8230444300234434),   // NormFloat64()
	float64(0.7344466927028043),   // NormFloat64()
	float64(0.751543327268539),    // NormFloat64()
	float64(0.7504159813409454),   // NormFloat64()
	float64(-0.8323972430427651),  // NormFloat64()
	float64(0.3380659629354149),   // NormFloat64()
	float64(-0.715557702966034),   // NormFloat64()
	float64(-0.1883657806993808),  // NormFloat64()
	float64(0.6998183596431717),   // NormFloat64()
	float64(-1.580302000888837),   // NormFloat64()

	[]int{},                                                     // Perm(0x0)
	[]int{0},                                                    // Perm(0x1)
	[]int{1, 4, 3, 2, 0},                                        // Perm(0x5)
	[]int{7, 3, 4, 0, 1, 5, 2, 6},                               // Perm(0x8)
	[]int{5, 7, 4, 2, 8, 6, 1, 3, 0},                            // Perm(0x9)
	[]int{0, 8, 2, 3, 4, 5, 7, 1, 6, 9},                         // Perm(0xa)
	[]int{14, 5, 6, 4, 13, 3, 8, 9, 2, 12, 11, 15, 0, 7, 1, 10}, // Perm(0x10)
	[]int{},                                                     // Perm(0x0)
	[]int{0},                                                    // Perm(0x1)
	[]int{4, 3, 2, 1, 0},                                        // Perm(0x5)
	[]int{2, 3, 1, 4, 7, 6, 0, 5},                               // Perm(0x8)
	[]int{4, 2, 7, 0, 6, 8, 5, 3, 1},                            // Perm(0x9)
	[]int{3, 8, 2, 6, 7, 1, 5, 0, 9, 4},                         // Perm(0xa)
	[]int{3, 9, 6, 15, 10, 7, 11, 5, 2, 1, 12, 14, 8, 4, 0, 13}, // Perm(0x10)
	[]int{},                             // Perm(0x0)
	[]int{0},                            // Perm(0x1)
	[]int{1, 3, 4, 0, 2},                // Perm(0x5)
	[]int{7, 1, 6, 2, 4, 0, 3, 5},       // Perm(0x8)
	[]int{7, 0, 4, 3, 1, 5, 8, 6, 2},    // Perm(0x9)
	[]int{0, 8, 9, 5, 1, 4, 6, 7, 3, 2}, // Perm(0xa)

	uint32(887699001),  // Uint32()
	uint32(2172391158), // Uint32()
	uint32(2474215398), // Uint32()
	uint32(202015495),  // Uint32()
	uint32(4184040278), // Uint32()
	uint32(3136240371), // Uint32()
	uint32(2400773142), // Uint32()
	uint32(94650305),   // Uint32()
	uint32(3668972267), // Uint32()
	uint32(4151069018), // Uint32()
	uint32(810230981),  // Uint32()
	uint32(1205304842), // Uint32()
	uint32(1386746106), // Uint32()
	uint32(757380707),  // Uint32()
	uint32(1590126875), // Uint32()
	uint32(1349967783), // Uint32()
	uint32(2895057325), // Uint32()
	uint32(335187303),  // Uint32()
	uint32(3037234089), // Uint32()
	uint32(3952040230), // Uint32()

	uint64(3812638179211989351),  // Uint64()
	uint64(9330348978533091121),  // Uint64()
	uint64(10626674221466475072), // Uint64()
	uint64(867649948573917593),   // Uint64()
	uint64(17970316161531489110), // Uint64()
	uint64(13470049827648710176), // Uint64()
	uint64(10311242133954859883), // Uint64()
	uint64(406519965772129914),   // Uint64()
	uint64(15758115897717298839), // Uint64()
	uint64(17828705676071561897), // Uint64()
	uint64(3479915565668951127),  // Uint64()
	uint64(5176744881242059097),  // Uint64()
	uint64(5956029175780683524),  // Uint64()
	uint64(3252925369347426176),  // Uint64()
	uint64(6829542927065255669),  // Uint64()
	uint64(5798067479865859744),  // Uint64()
	uint64(12434176531880858131), // Uint64()
	uint64(1439618508153543461),  // Uint64()
	uint64(13044821084853138667), // Uint64()
	uint64(16973883541392787884), // Uint64()

	uint64(0),                   // Uint64n(0x1)
	uint64(1),                   // Uint64n(0xa)
	uint64(0),                   // Uint64n(0x20)
	uint64(156057),              // Uint64n(0x100000)
	uint64(1025490),             // Uint64n(0x100001)
	uint64(648710176),           // Uint64n(0x3b9aca00)
	uint64(728470379),           // Uint64n(0x40000000)
	uint64(1619305854),          // Uint64n(0x7ffffffe)
	uint64(1916812400),          // Uint64n(0x7fffffff)
	uint64(828705676071561897),  // Uint64n(0xde0b6b3a7640000)
	uint64(21151051848410199),   // Uint64n(0x1000000000000000)
	uint64(5176744881242059097), // Uint64n(0xfffffffffffffffe)
	uint64(5956029175780683524), // Uint64n(0xffffffffffffffff)
	uint64(0),                   // Uint64n(0x1)
	uint64(9),                   // Uint64n(0xa)
	uint64(0),                   // Uint64n(0x20)
	uint64(119315),              // Uint64n(0x100000)
	uint64(1005513),             // Uint64n(0x100001)
	uint64(853138667),           // Uint64n(0x3b9aca00)
	uint64(1066469804),          // Uint64n(0x40000000)
}
