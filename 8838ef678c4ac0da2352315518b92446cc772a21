{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "716aa088_7ad3c105",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-11-08T21:18:07Z",
      "side": 1,
      "message": "TryBots beginning. Status page: https://farmer.golang.org/try?commit\u003d8838ef67\n",
      "tag": "autogenerated:trybots~beginning",
      "revId": "8838ef678c4ac0da2352315518b92446cc772a21",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "193bc129_6c8f808f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-11-08T21:20:37Z",
      "side": 1,
      "message": "TryBots are happy.\n\n",
      "parentUuid": "716aa088_7ad3c105",
      "tag": "autogenerated:trybots~happy",
      "revId": "8838ef678c4ac0da2352315518b92446cc772a21",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "76e190da_758aa986",
        "filename": "slog/example_level_handler_test.go",
        "patchSetId": 2
      },
      "lineNbr": 23,
      "author": {
        "id": 57259
      },
      "writtenOn": "2022-11-08T21:25:20Z",
      "side": 1,
      "message": "The optimization is unsound if h.level refers to a LevelVar that is dynamically modified. Remove it?",
      "revId": "8838ef678c4ac0da2352315518b92446cc772a21",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "279b2219_fa41ea2c",
        "filename": "slog/example_level_handler_test.go",
        "patchSetId": 2
      },
      "lineNbr": 23,
      "author": {
        "id": 14570
      },
      "writtenOn": "2022-11-09T00:30:13Z",
      "side": 1,
      "message": "I don\u0027t see that. LevelHandler.Enabled bypasses the underlying handler; the other methods just delegate. Therefore LevelHandlers other than the first are no-ops. Perhaps I\u0027m missing something.\n\nI think the flaw, if there is one, is in the overall design, not the optimization. By skipping the underlying Enabled, we ignore all its logic, even if that logic is not level-related.",
      "parentUuid": "76e190da_758aa986",
      "revId": "8838ef678c4ac0da2352315518b92446cc772a21",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0fd57469_c7615b40",
        "filename": "slog/example_level_handler_test.go",
        "patchSetId": 2
      },
      "lineNbr": 23,
      "author": {
        "id": 57259
      },
      "writtenOn": "2022-11-09T02:01:08Z",
      "side": 1,
      "message": "\u003e LevelHandlers other than the first are no-ops.\n\nAh, of course, it\u0027s a safe no-op to call Handle(r) when !Enabled(r.Level); I was concerned that it was bypassing a necessary check, but it\u0027s only an optimization. So it\u0027s not unsound, but it might conceivably be an pessmization.\n\n\n\u003e By skipping the underlying Enabled, we ignore all its logic, even if that logic is not level-related.\n\nWhat other logic could there be in Enabled other than level-related? That\u0027s the only part of the record it gets to look at. (The Handler might still reject a record for more complicated reasons, but that\u0027s consistent with the contract.)",
      "parentUuid": "279b2219_fa41ea2c",
      "revId": "8838ef678c4ac0da2352315518b92446cc772a21",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "74232127_956fed52",
        "filename": "slog/example_level_handler_test.go",
        "patchSetId": 2
      },
      "lineNbr": 23,
      "author": {
        "id": 14570
      },
      "writtenOn": "2022-11-09T13:40:05Z",
      "side": 1,
      "message": "I imagine that someone might create a Handler for each subsystem of their program, with the subsystem name as state, and a pointer to a global table of enabled subsystems that could change dynamically.",
      "parentUuid": "0fd57469_c7615b40",
      "revId": "8838ef678c4ac0da2352315518b92446cc772a21",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}