{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "8700f9f7_37dc7168",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-10-13T22:25:37Z",
      "side": 1,
      "message": "TryBots beginning. Status page: https://farmer.golang.org/try?commit\u003d8db6bd7c\n",
      "tag": "autogenerated:trybots~beginning",
      "revId": "8db6bd7c0604ecbabd1e63aec4b951862c4adb3c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6d93be4c_b12deb21",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-10-13T22:27:38Z",
      "side": 1,
      "message": "TryBots are happy.\n\n",
      "parentUuid": "8700f9f7_37dc7168",
      "tag": "autogenerated:trybots~happy",
      "revId": "8db6bd7c0604ecbabd1e63aec4b951862c4adb3c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9f7ca3db_95ef7450",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 14570
      },
      "writtenOn": "2022-10-14T09:54:48Z",
      "side": 1,
      "message": "Ready for review.",
      "revId": "8db6bd7c0604ecbabd1e63aec4b951862c4adb3c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "96ac041f_9cf1cc5f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 57259
      },
      "writtenOn": "2022-10-18T17:59:09Z",
      "side": 1,
      "message": "Sorry for the delay.",
      "revId": "8db6bd7c0604ecbabd1e63aec4b951862c4adb3c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f57e827c_24dfda34",
        "filename": "slog/logger.go",
        "patchSetId": 3
      },
      "lineNbr": 67,
      "author": {
        "id": 57259
      },
      "writtenOn": "2022-10-18T17:59:09Z",
      "side": 1,
      "message": "Handlers can have state (as can Contexts, though that\u0027s frowned upon), so perhaps this statement is not strictly accurate.\n\nMight we want to add mutable fields to a Logger in future? By eliminating the pointer in all the function signatures, we rule that out permanently.",
      "revId": "8db6bd7c0604ecbabd1e63aec4b951862c4adb3c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ea3dcd68_84cd067a",
        "filename": "slog/logger.go",
        "patchSetId": 3
      },
      "lineNbr": 67,
      "author": {
        "id": 14570
      },
      "writtenOn": "2022-10-18T19:53:04Z",
      "side": 1,
      "message": "Removed \"immutable.\"\n\nI don\u0027t understand your second point. Couldn\u0027t we add later a method with a *Logger receiver?",
      "parentUuid": "f57e827c_24dfda34",
      "revId": "8db6bd7c0604ecbabd1e63aec4b951862c4adb3c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2ceff037_1f58c776",
        "filename": "slog/logger.go",
        "patchSetId": 3
      },
      "lineNbr": 67,
      "author": {
        "id": 57259
      },
      "writtenOn": "2022-10-18T20:37:57Z",
      "side": 1,
      "message": "\u003e Couldn\u0027t we add later a method with a *Logger receiver?\n\nNot really, because in general later additions that make the value mutable will mean that making copies of it is no longer valid (for example, because it leads to aliasing problems), and lots of functions will by then exist in our code and in user code that copy Logger values.",
      "parentUuid": "ea3dcd68_84cd067a",
      "revId": "8db6bd7c0604ecbabd1e63aec4b951862c4adb3c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b227e063_d0300520",
        "filename": "slog/logger.go",
        "patchSetId": 3
      },
      "lineNbr": 67,
      "author": {
        "id": 14570
      },
      "writtenOn": "2022-10-18T20:47:44Z",
      "side": 1,
      "message": "So you\u0027re saying that if we have a method with a pointer receiver, users should expect and guard against mutation.\n\nHowever, doesn\u0027t that somewhat contradict the principle of providing a consistent view of a type (either value with value receivers, or pointer with pointer receivers)?",
      "parentUuid": "2ceff037_1f58c776",
      "revId": "8db6bd7c0604ecbabd1e63aec4b951862c4adb3c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0f2bad47_af5c2b8e",
        "filename": "slog/logger.go",
        "patchSetId": 3
      },
      "lineNbr": 67,
      "author": {
        "id": 57259
      },
      "writtenOn": "2022-10-18T21:36:45Z",
      "side": 1,
      "message": "\u003e So you\u0027re saying that if we have a method with a pointer receiver, users should expect and guard against mutation.\n\u003e However, doesn\u0027t that somewhat contradict the principle of providing a consistent view of a type (either value with value receivers, or pointer with pointer receivers)?\n\nThere\u0027s nothing theoretically wrong with providing a mix of (T) and (*T) methods for accessors and mutators, but it can be confusing to the reader, so it\u0027s common to use *T for all methods if any one of them needs it. But if we use (T) everywhere, we\u0027re basically promising that we\u0027ll never make Loggers mutable, since the copy implied by (T) methods would lead to aliasing problems.\n\nEven if Loggers remain shallowly immutable, there may be advantages to always using a pointer to refer to them: for example, less argument copying in function calls, and no allocation required for interface conversions. We can still have methods of \"functional update\" form, `(*T).WithFoo() *T`, that return a new variable rather than mutating the original, while reserving the possibility of adding mutator methods (and Clone) later.",
      "parentUuid": "b227e063_d0300520",
      "revId": "8db6bd7c0604ecbabd1e63aec4b951862c4adb3c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c2d43f8b_7df56487",
        "filename": "slog/record.go",
        "patchSetId": 3
      },
      "lineNbr": 61,
      "author": {
        "id": 57259
      },
      "writtenOn": "2022-10-18T17:59:09Z",
      "side": 1,
      "message": "Explain the purpose of the Context, especially as it is quite different to the norm. Contexts are usually for controlling cancellation of a task, or for providing key/value pairs, but here it is decidedly not for either of those purposes: we expect log Records to outlive their contexts, and to use Attrs for most k/v pairs.",
      "revId": "8db6bd7c0604ecbabd1e63aec4b951862c4adb3c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0d27a64c_15acc8be",
        "filename": "slog/record.go",
        "patchSetId": 3
      },
      "lineNbr": 61,
      "author": {
        "id": 14570
      },
      "writtenOn": "2022-10-18T19:53:04Z",
      "side": 1,
      "message": "I added a line to the doc, but I think this _is_ for providing key/value pairs.\n\nAlso, I\u0027ll move this doc up to the doc for the Context field when I export it later (upstack).",
      "parentUuid": "c2d43f8b_7df56487",
      "revId": "8db6bd7c0604ecbabd1e63aec4b951862c4adb3c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}