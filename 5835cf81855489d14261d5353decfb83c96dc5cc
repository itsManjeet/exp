{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "5a907e65_bf2d1fa1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2023-05-16T13:44:31Z",
      "side": 1,
      "message": "TryBots beginning. Status page: https://farmer.golang.org/try?commit\u003d5835cf81\n",
      "tag": "autogenerated:trybots~beginning",
      "revId": "5835cf81855489d14261d5353decfb83c96dc5cc",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "803ac3f5_d8e451a6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2023-05-16T13:46:42Z",
      "side": 1,
      "message": "TryBots are happy.\n\n",
      "parentUuid": "5a907e65_bf2d1fa1",
      "tag": "autogenerated:trybots~happy",
      "revId": "5835cf81855489d14261d5353decfb83c96dc5cc",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "02a2bc64_92af282d",
        "filename": "slices/sort.go",
        "patchSetId": 2
      },
      "lineNbr": 74,
      "author": {
        "id": 5206
      },
      "writtenOn": "2023-05-16T20:56:18Z",
      "side": 1,
      "message": "Really minor, but line break after the period.  https://sembr.org/",
      "revId": "5835cf81855489d14261d5353decfb83c96dc5cc",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7b0c17ab_247de832",
        "filename": "slices/sort.go",
        "patchSetId": 2
      },
      "lineNbr": 74,
      "author": {
        "id": 52648
      },
      "writtenOn": "2023-05-16T21:55:21Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "02a2bc64_92af282d",
      "revId": "5835cf81855489d14261d5353decfb83c96dc5cc",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "532f8448_6ecb934d",
        "filename": "slices/sort_test.go",
        "patchSetId": 2
      },
      "lineNbr": 220,
      "author": {
        "id": 5206
      },
      "writtenOn": "2023-05-16T20:56:18Z",
      "side": 1,
      "message": "We should probably document this behavior.",
      "revId": "5835cf81855489d14261d5353decfb83c96dc5cc",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d4b12a38_0e0e4b6a",
        "filename": "slices/sort_test.go",
        "patchSetId": 2
      },
      "lineNbr": 220,
      "author": {
        "id": 52648
      },
      "writtenOn": "2023-05-16T21:55:21Z",
      "side": 1,
      "message": "This will probably require a decision. Right now, the behavior is the natural consequence of using the `\u003c` operator for comparison. This is similar to how `min` behaves in other languages like Python.\n\nHowever, in https://github.com/golang/go/issues/59488 Russ says:\n\n\"Min and max take the usual arithmetic operator approach of \"NaN in, NaN out\"\n\nDoes this mean Min/Max are expected to return a NaN whenever a NaN is present in the slice? This would be unfortunate for the performance of these functions. Another possibility is using cmp.Less, but then NaNs would always be considered the minimum.\n\nIt seems like there are 3 possible behaviors here. Which should we choose?",
      "parentUuid": "532f8448_6ecb934d",
      "revId": "5835cf81855489d14261d5353decfb83c96dc5cc",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "70b3bc7b_ce763831",
        "filename": "slices/sort_test.go",
        "patchSetId": 2
      },
      "lineNbr": 220,
      "author": {
        "id": 5206
      },
      "writtenOn": "2023-05-16T22:20:47Z",
      "side": 1,
      "message": "Russ was referring to the standalone min and max functions when he wrote that.  For slices.Min we can pick different behavior.  I would say that slices.Min should be consistent with slices.Sort, so that whatever winds up at index 0 when calling slices.Sort should be the value that slices.Min returns.",
      "parentUuid": "d4b12a38_0e0e4b6a",
      "revId": "5835cf81855489d14261d5353decfb83c96dc5cc",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c36d5916_1580d770",
        "filename": "slices/sort_test.go",
        "patchSetId": 2
      },
      "lineNbr": 220,
      "author": {
        "id": 52648
      },
      "writtenOn": "2023-05-17T00:31:19Z",
      "side": 1,
      "message": "This could be tricky, because `Sort` uses `\u003c` as well and has not special provision for NaN. In fact, our current documentation for `Sort` says:\n\n  // Sort may fail to sort correctly when sorting slices of floating-point\n  // numbers containing Not-a-number (NaN) values.\n  // Use slices.SortFunc(x, func(a, b float64) bool {return a \u003c b || (math.IsNaN(a) \u0026\u0026 !math.IsNaN(b))})\n  // instead if the input may contain NaNs.\n\n\nI suppose we could add a similar comment to `Min` and `Max`, pointing users to the `*Func` variants for a more custom handling of NaN?",
      "parentUuid": "70b3bc7b_ce763831",
      "revId": "5835cf81855489d14261d5353decfb83c96dc5cc",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "99408c8c_53aa748e",
        "filename": "slices/sort_test.go",
        "patchSetId": 2
      },
      "lineNbr": 220,
      "author": {
        "id": 5206
      },
      "writtenOn": "2023-05-17T00:54:37Z",
      "side": 1,
      "message": "Hmmm, I guess I was thinking of sort.Float64s.",
      "parentUuid": "c36d5916_1580d770",
      "revId": "5835cf81855489d14261d5353decfb83c96dc5cc",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}