{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "b837a9a7_dfc1674f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-08-31T20:59:44Z",
      "side": 1,
      "message": "TryBots beginning. Status page: https://farmer.golang.org/try?commit\u003da2ebdf35\n",
      "tag": "autogenerated:trybots~beginning",
      "revId": "a2ebdf35d315be5b0423e16cd2dd345d3d124b90",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "425878ca_926e88b6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-08-31T21:01:39Z",
      "side": 1,
      "message": "TryBots are happy.\n\n",
      "parentUuid": "b837a9a7_dfc1674f",
      "tag": "autogenerated:trybots~happy",
      "revId": "a2ebdf35d315be5b0423e16cd2dd345d3d124b90",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "18c46a96_40eaaf60",
        "filename": "slog/atomic.go",
        "patchSetId": 2
      },
      "lineNbr": 20,
      "author": {
        "id": 57259
      },
      "writtenOn": "2022-09-01T13:42:52Z",
      "side": 1,
      "message": "I do sometimes wish int(bool) did the completely obvious thing.",
      "revId": "a2ebdf35d315be5b0423e16cd2dd345d3d124b90",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2c584fe1_ca050a1a",
        "filename": "slog/atomic.go",
        "patchSetId": 2
      },
      "lineNbr": 42,
      "author": {
        "id": 57259
      },
      "writtenOn": "2022-09-01T13:42:52Z",
      "side": 1,
      "message": "Load on an uninitialized atomicValue returns the zero of T, whereas swap will panic in the nil.(T) type assertion. Fix the asymmetry?",
      "revId": "a2ebdf35d315be5b0423e16cd2dd345d3d124b90",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "30aa8c07_717c8651",
        "filename": "slog/level.go",
        "patchSetId": 2
      },
      "lineNbr": 14,
      "author": {
        "id": 57259
      },
      "writtenOn": "2022-09-01T13:42:52Z",
      "side": 1,
      "message": "8 bytes per log event seems like a lot. Use a narrower type? 16 bits should be enough for anyone. ;-)",
      "revId": "a2ebdf35d315be5b0423e16cd2dd345d3d124b90",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fb69daf1_2a84752a",
        "filename": "slog/level.go",
        "patchSetId": 2
      },
      "lineNbr": 80,
      "author": {
        "id": 57259
      },
      "writtenOn": "2022-09-01T13:42:52Z",
      "side": 1,
      "message": "This confused me: the LevelRef isn\u0027t the reference; clients are expected to use a *LevelRef. This type represents the variable (the box containing the value) but not the edge itself. So how about:\n\n// A LevelVar is a variable containing a level.\n// It is updated and accessed atomically, and may\n// be safely shared by multiple handlers and goroutines,\n// allowing logging verbosity to be changed after handler\n// construction.\n\nor alternatively AtomicLevel. Everyone knows what an AtomicInt is, and this is basically the same.",
      "revId": "a2ebdf35d315be5b0423e16cd2dd345d3d124b90",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "45d5590f_3a03477f",
        "filename": "slog/level.go",
        "patchSetId": 2
      },
      "lineNbr": 100,
      "author": {
        "id": 57259
      },
      "writtenOn": "2022-09-01T13:42:52Z",
      "side": 1,
      "message": "Get()?",
      "revId": "a2ebdf35d315be5b0423e16cd2dd345d3d124b90",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}