{
  "comments": [
    {
      "key": {
        "uuid": "8a7142b8_d7784024",
        "filename": "sumdb/gosumcheck/main.go",
        "patchSetId": 3
      },
      "lineNbr": 193,
      "author": {
        "id": 11715
      },
      "writtenOn": "2019-04-26T17:43:25Z",
      "side": 1,
      "message": "This should still use the url flag if set, right?",
      "revId": "29f91d3443002f2c9b99e79b47e4009e1a5b3daf",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ce3379e1_521eb2ea",
        "filename": "sumdb/gosumcheck/main.go",
        "patchSetId": 3
      },
      "lineNbr": 193,
      "author": {
        "id": 5056
      },
      "writtenOn": "2019-04-26T18:08:09Z",
      "side": 1,
      "message": "Yes, thanks. Done.",
      "parentUuid": "8a7142b8_d7784024",
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "29f91d3443002f2c9b99e79b47e4009e1a5b3daf",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c9022ae3_76841a55",
        "filename": "sumdb/internal/sumweb/client.go",
        "patchSetId": 3
      },
      "lineNbr": 90,
      "author": {
        "id": 11715
      },
      "writtenOn": "2019-04-26T17:43:25Z",
      "side": 1,
      "message": "I did think about a reason to have a granular cache: if two partial versions of the same tile are read, and the first one is derived from the full one, the second one will cache miss (as both caches will only keep the partial one).\n\nUp to you if that\u0027s worth the complexity, I suspect not.",
      "revId": "29f91d3443002f2c9b99e79b47e4009e1a5b3daf",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d6857a17_3f761aa2",
        "filename": "sumdb/internal/sumweb/client.go",
        "patchSetId": 3
      },
      "lineNbr": 90,
      "author": {
        "id": 5056
      },
      "writtenOn": "2019-04-26T18:08:09Z",
      "side": 1,
      "message": "You\u0027re right that this was my motivation for the original code. I spent a while thinking about your comment last night, though, and I decided that you were right and this motivation was misguided.\n\nWhen I was writing the code originally, I think I was concerned that when you are trying to check the consistency of trees N1 \u003c N2, you might need to get N1\u0027s partial tiles and then N2\u0027s partial tiles. But you don\u0027t: you get N2\u0027s tiles only, and check that N1 appears in them. So if N1 \u003c\u003c N2, the relevant tiles during the N1 verification are going to be full tiles from the larger N2 tile set.\n\nThe only opportunity for partial tile fetches is if the client observes trees N1 and then N2 while the actual latest tree is N3, where N1 \u003c N2 \u003c\u003c N3. If the client somehow knew to fetch full tiles during the update to N1, it might be able to reuse them during the update to N2, because N3 is so far ahead that the relevant tiles are completed. \n\nBut that would require trying the full tile fetch before the partial tile, which we don\u0027t do, because when you really are up to date there\u0027s never a full tile beyond the partial tile you are looking for, so the speculative-and-likely-to-fail full tile fetch would be a waste of time (and bandwidth).\n\nSince we do the partial tile fetch first, even the rare N1 \u003c N2 \u003c\u003c N3 is not helped at all by the full tile trick.\n\nAlso, this probably affects only the bottom-most tile. Tiles in upper levels take much longer to complete. So we\u0027re talking about one 8kB round trip.\n\nLong-winded but that was my thinking last night and why I agreed with your suggestion to rip that code out. :-)",
      "parentUuid": "c9022ae3_76841a55",
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "29f91d3443002f2c9b99e79b47e4009e1a5b3daf",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e3496231_0aa2f749",
        "filename": "sumdb/internal/sumweb/client.go",
        "patchSetId": 3
      },
      "lineNbr": 167,
      "author": {
        "id": 11715
      },
      "writtenOn": "2019-04-26T17:43:25Z",
      "side": 1,
      "message": "I was suggesting to use c.tileHeight as an indication that a Lookup had already been made, which would mean the API is misused.",
      "revId": "29f91d3443002f2c9b99e79b47e4009e1a5b3daf",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d74fcedf_198525d2",
        "filename": "sumdb/internal/sumweb/client.go",
        "patchSetId": 3
      },
      "lineNbr": 167,
      "author": {
        "id": 5056
      },
      "writtenOn": "2019-04-26T18:08:09Z",
      "side": 1,
      "message": "I thought you\u0027d copy-pasted the comment and not updated it. :-)\n\nIf we use tileHeight here then this will panic incorrectly:\n\n    c.SetTileHeight(8)\n    c.SetGONOSUMDB(\"corp.*\")\n\nI put an explicit check in for Lookup use.",
      "parentUuid": "e3496231_0aa2f749",
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "29f91d3443002f2c9b99e79b47e4009e1a5b3daf",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    }
  ]
}