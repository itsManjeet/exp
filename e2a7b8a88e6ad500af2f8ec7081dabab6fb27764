{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "4f4fa1d3_d24d13a9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-09-09T12:33:26Z",
      "side": 1,
      "message": "TryBots beginning. Status page: https://farmer.golang.org/try?commit\u003de2a7b8a8\n",
      "tag": "autogenerated:trybots~beginning",
      "revId": "e2a7b8a88e6ad500af2f8ec7081dabab6fb27764",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "437ffc0f_b9fc647f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-09-09T12:33:26Z",
      "side": 1,
      "message": "Superseded.",
      "parentUuid": "b821417f_64545a0f",
      "tag": "autogenerated:trybots~beginning",
      "revId": "e2a7b8a88e6ad500af2f8ec7081dabab6fb27764",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d2256f5f_1254d8a5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-09-09T12:34:46Z",
      "side": 1,
      "message": "Build is still in progress... Status page: https://farmer.golang.org/try?commit\u003de2a7b8a8\nFailed on linux-amd64: https://storage.googleapis.com/go-build-log/41089704/linux-amd64_1a7430fb.log\nOther builds still in progress; subsequent failure notices suppressed until final report.\n\nConsult https://build.golang.org/ to see whether they are new failures. Keep in mind that TryBots currently test *exactly* your git commit, without rebasing. If your commit\u0027s git parent is old, the failure might\u0027ve already been fixed.\n",
      "parentUuid": "4f4fa1d3_d24d13a9",
      "tag": "autogenerated:trybots~progress",
      "revId": "e2a7b8a88e6ad500af2f8ec7081dabab6fb27764",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c85168f7_c9564db1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-09-09T12:35:22Z",
      "side": 1,
      "message": "4 of 4 TryBots failed.\nFailed on linux-amd64: https://storage.googleapis.com/go-build-log/41089704/linux-amd64_1a7430fb.log\nFailed on linux-amd64-race: https://storage.googleapis.com/go-build-log/41089704/linux-amd64-race_95e511c1.log\nFailed on windows-amd64-2016: https://storage.googleapis.com/go-build-log/41089704/windows-amd64-2016_6af26d8a.log\nFailed on windows-386-2008: https://storage.googleapis.com/go-build-log/41089704/windows-386-2008_530cee1e.log\n\nConsult https://build.golang.org/ to see whether they are new failures. Keep in mind that TryBots currently test *exactly* your git commit, without rebasing. If your commit\u0027s git parent is old, the failure might\u0027ve already been fixed.\n\n",
      "parentUuid": "4f4fa1d3_d24d13a9",
      "tag": "autogenerated:trybots~failed",
      "revId": "e2a7b8a88e6ad500af2f8ec7081dabab6fb27764",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3ac07759_e5bc693e",
        "filename": "slog/json_handler.go",
        "patchSetId": 2
      },
      "lineNbr": 94,
      "author": {
        "id": 57259
      },
      "writtenOn": "2022-09-09T13:16:50Z",
      "side": 1,
      "message": "It might be worth documenting at appender that the interface exists to break down the task of Text or JSON formatting into microscopic steps none of which need to avoid allocating dynamic memory for argument passing.\n\nIf there are only two choices, one wonders whether a single common handler containing a sprinkling of \"if json\"-statements might not be less trouble overall.",
      "revId": "e2a7b8a88e6ad500af2f8ec7081dabab6fb27764",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f8f0d1c5_278eb959",
        "filename": "slog/json_handler.go",
        "patchSetId": 2
      },
      "lineNbr": 94,
      "author": {
        "id": 14570
      },
      "writtenOn": "2022-09-09T14:51:02Z",
      "side": 1,
      "message": "Done. I paraphrased your description and may have missed the mark because I don\u0027t really understand \"none of which need to avoid allocating dynamic memory for argument passing.\"\n\nAnd yeah, but that just feels so ugly. And maybe there\u0027ll be a third format some day?",
      "parentUuid": "3ac07759_e5bc693e",
      "revId": "e2a7b8a88e6ad500af2f8ec7081dabab6fb27764",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0a458105_16d6c3fe",
        "filename": "slog/json_handler.go",
        "patchSetId": 2
      },
      "lineNbr": 94,
      "author": {
        "id": 57259
      },
      "writtenOn": "2022-09-09T15:12:42Z",
      "side": 1,
      "message": "What I meant was: if performance were no concern, you\u0027d build up a single pile of values using common logic for the special attrs, and then pass it to the json or text appender---but that would require heap-allocating a slice of non-constant length. Instead, we dribble the values into the appender one at a time in a sequence of calls, none of which entails an allocation.",
      "parentUuid": "f8f0d1c5_278eb959",
      "revId": "e2a7b8a88e6ad500af2f8ec7081dabab6fb27764",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f58841c9_37fce5ed",
        "filename": "slog/json_handler.go",
        "patchSetId": 2
      },
      "lineNbr": 99,
      "author": {
        "id": 57259
      },
      "writtenOn": "2022-09-09T13:16:50Z",
      "side": 1,
      "message": "Can we call Time.AppendFormat directly, and avoid the possibility of error?",
      "revId": "e2a7b8a88e6ad500af2f8ec7081dabab6fb27764",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d37c93fa_968461ae",
        "filename": "slog/json_handler.go",
        "patchSetId": 2
      },
      "lineNbr": 99,
      "author": {
        "id": 14570
      },
      "writtenOn": "2022-09-09T14:51:02Z",
      "side": 1,
      "message": "But Time.MarshalJSON does more: https://go.googlesource.com/go/+/refs/heads/master/src/time/time.go#1317.\nAnd until convinced otherwise, I think it makes sense to be as close to json.Marshal as we can.",
      "parentUuid": "f58841c9_37fce5ed",
      "revId": "e2a7b8a88e6ad500af2f8ec7081dabab6fb27764",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9bf96a9f_7493c38c",
        "filename": "slog/json_handler.go",
        "patchSetId": 2
      },
      "lineNbr": 147,
      "author": {
        "id": 57259
      },
      "writtenOn": "2022-09-09T13:16:50Z",
      "side": 1,
      "message": "In theory this should return the error, but see above.",
      "revId": "e2a7b8a88e6ad500af2f8ec7081dabab6fb27764",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6dcc41a6_8319717b",
        "filename": "slog/json_handler.go",
        "patchSetId": 2
      },
      "lineNbr": 147,
      "author": {
        "id": 14570
      },
      "writtenOn": "2022-09-09T14:51:02Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9bf96a9f_7493c38c",
      "revId": "e2a7b8a88e6ad500af2f8ec7081dabab6fb27764",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9f0e9ba8_0dafd18c",
        "filename": "slog/json_handler.go",
        "patchSetId": 2
      },
      "lineNbr": 156,
      "author": {
        "id": 57259
      },
      "writtenOn": "2022-09-09T13:16:50Z",
      "side": 1,
      "message": "Include the kind in the error message.",
      "revId": "e2a7b8a88e6ad500af2f8ec7081dabab6fb27764",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2568768e_aeb66545",
        "filename": "slog/json_handler.go",
        "patchSetId": 2
      },
      "lineNbr": 156,
      "author": {
        "id": 14570
      },
      "writtenOn": "2022-09-09T14:51:02Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9f0e9ba8_0dafd18c",
      "revId": "e2a7b8a88e6ad500af2f8ec7081dabab6fb27764",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "29932ce1_d558df60",
        "filename": "slog/json_handler.go",
        "patchSetId": 2
      },
      "lineNbr": 162,
      "author": {
        "id": 57259
      },
      "writtenOn": "2022-09-09T13:16:50Z",
      "side": 1,
      "message": "return json.NewEncoder(a.buf()).Encode(v)\n\navoids a buffer copy, if I recall.",
      "revId": "e2a7b8a88e6ad500af2f8ec7081dabab6fb27764",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "39b0499a_50765b2f",
        "filename": "slog/json_handler.go",
        "patchSetId": 2
      },
      "lineNbr": 162,
      "author": {
        "id": 14570
      },
      "writtenOn": "2022-09-09T14:51:02Z",
      "side": 1,
      "message": "Unfortunately, json.NewEncoder allocates. Of course, so does json.Marshal. (I wish there were a json.AppendMarshal.) The benchmark shows that the former is a bit slower.\n\nOf course I could keep the Encoder around; then it\u0027s faster. But if I put it in the appender I\u0027d have to allocate that somehow. Not sure the code complexity is worth it.",
      "parentUuid": "29932ce1_d558df60",
      "revId": "e2a7b8a88e6ad500af2f8ec7081dabab6fb27764",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7a0cab38_d44b8d97",
        "filename": "slog/json_handler.go",
        "patchSetId": 2
      },
      "lineNbr": 162,
      "author": {
        "id": 57259
      },
      "writtenOn": "2022-09-09T15:12:42Z",
      "side": 1,
      "message": "I agree. Never mind.",
      "parentUuid": "39b0499a_50765b2f",
      "revId": "e2a7b8a88e6ad500af2f8ec7081dabab6fb27764",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cc3a2678_e9ad1e9f",
        "filename": "slog/json_handler.go",
        "patchSetId": 2
      },
      "lineNbr": 179,
      "author": {
        "id": 57259
      },
      "writtenOn": "2022-09-09T13:16:50Z",
      "side": 1,
      "message": "It\u0027s unfortunate that this delicate and potentially security-sensitive logic needs to be duplicated. Might be good to have a test that it generates the same result as the slower json.HTMLEscape just in case that one evolves in ways we should know about.",
      "revId": "e2a7b8a88e6ad500af2f8ec7081dabab6fb27764",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2825f394_abc0929b",
        "filename": "slog/json_handler.go",
        "patchSetId": 2
      },
      "lineNbr": 179,
      "author": {
        "id": 14570
      },
      "writtenOn": "2022-09-09T14:51:02Z",
      "side": 1,
      "message": "We\u0027ll revisit this. It may be that we don\u0027t need the same security guarantees.\n\nTestJSONAppendAttrValue does test this indirectly, by comparing a handler-formatted with the output of json.Marshal. I\u0027ve added more cases.",
      "parentUuid": "cc3a2678_e9ad1e9f",
      "revId": "e2a7b8a88e6ad500af2f8ec7081dabab6fb27764",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}