{
  "comments": [
    {
      "key": {
        "uuid": "93f937e9_8bbcc87c",
        "filename": "notary/internal/notecheck/main.go",
        "patchSetId": 2
      },
      "lineNbr": 40,
      "author": {
        "id": 11715
      },
      "writtenOn": "2019-03-13T18:57:26Z",
      "side": 1,
      "message": "It would be nice if this exited with a non-zero exit code if any entry did not check out. Some of the error messages can look very innocuous, and it would make it possible to easily run this in CI.",
      "range": {
        "startLine": 40,
        "startChar": 0,
        "endLine": 40,
        "endChar": 13
      },
      "revId": "89d5e2e13120e2132d616e92fafa772bdc5f7116",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b537fd58_927e039c",
        "filename": "notary/internal/notecheck/main.go",
        "patchSetId": 2
      },
      "lineNbr": 40,
      "author": {
        "id": 5056
      },
      "writtenOn": "2019-03-14T02:58:16Z",
      "side": 1,
      "message": "I added a WARNING in the doc comment that people should absolutely\nNOT run this in a CI context. It\u0027s just a demo.\nA real \u0027go mod verify -notary\u0027 would need to filter against $GONOVERIFY.\nA real standalone program would need to do the same.\nA real program would also not have the -h flag to fiddle with tile height.\nTo further discourage use by people who don\u0027t read WARNINGS,\nI will leave the exit code as is.",
      "parentUuid": "93f937e9_8bbcc87c",
      "range": {
        "startLine": 40,
        "startChar": 0,
        "endLine": 40,
        "endChar": 13
      },
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "89d5e2e13120e2132d616e92fafa772bdc5f7116",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "eceb6960_57d918cc",
        "filename": "notary/internal/notecheck/main.go",
        "patchSetId": 2
      },
      "lineNbr": 56,
      "author": {
        "id": 11715
      },
      "writtenOn": "2019-03-13T18:57:26Z",
      "side": 1,
      "message": "\"latest\" to follow https://go.googlesource.com/proposal/+/master/design/25530-notary.md#notary-server",
      "range": {
        "startLine": 56,
        "startChar": 54,
        "endLine": 56,
        "endChar": 60
      },
      "revId": "89d5e2e13120e2132d616e92fafa772bdc5f7116",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3c5f54ee_5437549d",
        "filename": "notary/internal/notecheck/main.go",
        "patchSetId": 2
      },
      "lineNbr": 56,
      "author": {
        "id": 5056
      },
      "writtenOn": "2019-03-14T02:58:16Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "eceb6960_57d918cc",
      "range": {
        "startLine": 56,
        "startChar": 54,
        "endLine": 56,
        "endChar": 60
      },
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "89d5e2e13120e2132d616e92fafa772bdc5f7116",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ce90045c_1800f6e7",
        "filename": "notary/internal/notecheck/main.go",
        "patchSetId": 2
      },
      "lineNbr": 64,
      "author": {
        "id": 11715
      },
      "writtenOn": "2019-03-13T18:57:26Z",
      "side": 1,
      "message": "This is not checking that the note was signed by a known notary key. That is, all signatures might have an UnverifiedName and UnverifiedHash. An attacker could completely fake the response.\n\nnote.Open really needs to return an error if no valid signatures from known verifiers are found.",
      "range": {
        "startLine": 60,
        "startChar": 0,
        "endLine": 64,
        "endChar": 51
      },
      "revId": "89d5e2e13120e2132d616e92fafa772bdc5f7116",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4903b717_67b1aeac",
        "filename": "notary/internal/notecheck/main.go",
        "patchSetId": 2
      },
      "lineNbr": 64,
      "author": {
        "id": 5056
      },
      "writtenOn": "2019-03-14T02:58:16Z",
      "side": 1,
      "message": "Done.",
      "parentUuid": "ce90045c_1800f6e7",
      "range": {
        "startLine": 60,
        "startChar": 0,
        "endLine": 64,
        "endChar": 51
      },
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "89d5e2e13120e2132d616e92fafa772bdc5f7116",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "14859697_907a4b8f",
        "filename": "notary/internal/notecheck/main.go",
        "patchSetId": 2
      },
      "lineNbr": 91,
      "author": {
        "id": 11715
      },
      "writtenOn": "2019-03-13T18:57:26Z",
      "side": 1,
      "message": "I am definitely uneasy with the fact that a verified HashReader and an unverified HashReader are the same type. checkGoSum is only secure if thr is checking the hashes it returns, but there is nothing in the function type definition that requires that, so it can be easily misused, and requires the reviewer to trace all uses.",
      "range": {
        "startLine": 91,
        "startChar": 49,
        "endLine": 91,
        "endChar": 68
      },
      "revId": "89d5e2e13120e2132d616e92fafa772bdc5f7116",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "28f2d6ac_70ab19a1",
        "filename": "notary/internal/notecheck/main.go",
        "patchSetId": 2
      },
      "lineNbr": 91,
      "author": {
        "id": 5056
      },
      "writtenOn": "2019-03-14T02:58:16Z",
      "side": 1,
      "message": "I\u0027m sorry about your discomfort, but I don\u0027t want to put \"verified\"\ninto the type system.\n\nWhen you see the storage CLs you will see that tlog.HashReader is\nabout as central to the tlog code as io.Reader is to much of the\nstandard library: you can substitute many different possible\ntlog.HashReaders and the code works great. Splitting the type here\nwould hurt the reusability of the code as much as splitting\nio.Reader into io.Reader and io.TrustedReader, for little purpose.\n\nAlso, all tlog.HashReaders are trusted. We could add a tlog.UntrustedHashReader\ntype but I can\u0027t think of a single piece of code that would ever use it.",
      "parentUuid": "14859697_907a4b8f",
      "range": {
        "startLine": 91,
        "startChar": 49,
        "endLine": 91,
        "endChar": 68
      },
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "89d5e2e13120e2132d616e92fafa772bdc5f7116",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "734dca96_db0dba1d",
        "filename": "notary/internal/notecheck/main.go",
        "patchSetId": 2
      },
      "lineNbr": 91,
      "author": {
        "id": 5056
      },
      "writtenOn": "2019-03-14T03:02:01Z",
      "side": 1,
      "message": "Aha. From your comments on CL 161903, it seems that\nyou mean *TileReader* not *HashReader* here.\nI agree about TileReader being confusing,\nand I\u0027ll address that on CL 161903 and update\nthis code accordingly when that happens.",
      "parentUuid": "28f2d6ac_70ab19a1",
      "range": {
        "startLine": 91,
        "startChar": 49,
        "endLine": 91,
        "endChar": 68
      },
      "revId": "89d5e2e13120e2132d616e92fafa772bdc5f7116",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b42245a9_3e952999",
        "filename": "notary/internal/notecheck/main.go",
        "patchSetId": 2
      },
      "lineNbr": 105,
      "author": {
        "id": 11715
      },
      "writtenOn": "2019-03-13T18:57:26Z",
      "side": 1,
      "message": "Missing \"continue\".",
      "revId": "89d5e2e13120e2132d616e92fafa772bdc5f7116",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "af89985c_6cf7fece",
        "filename": "notary/internal/notecheck/main.go",
        "patchSetId": 2
      },
      "lineNbr": 105,
      "author": {
        "id": 5056
      },
      "writtenOn": "2019-03-14T02:58:16Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b42245a9_3e952999",
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "89d5e2e13120e2132d616e92fafa772bdc5f7116",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b367bfbc_dd1e7340",
        "filename": "notary/internal/notecheck/main.go",
        "patchSetId": 2
      },
      "lineNbr": 115,
      "author": {
        "id": 11715
      },
      "writtenOn": "2019-03-13T18:57:26Z",
      "side": 1,
      "message": "Missing \"continue\".",
      "revId": "89d5e2e13120e2132d616e92fafa772bdc5f7116",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "62efff29_e546b5c4",
        "filename": "notary/internal/notecheck/main.go",
        "patchSetId": 2
      },
      "lineNbr": 115,
      "author": {
        "id": 5056
      },
      "writtenOn": "2019-03-14T02:58:16Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b367bfbc_dd1e7340",
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "89d5e2e13120e2132d616e92fafa772bdc5f7116",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "db83730c_d25676b2",
        "filename": "notary/internal/notecheck/main.go",
        "patchSetId": 2
      },
      "lineNbr": 136,
      "author": {
        "id": 11715
      },
      "writtenOn": "2019-03-13T18:57:26Z",
      "side": 1,
      "message": "If the notary intentionally inserted in the tree an all-zeroes hash, this condition can be true but no error will have been printed, and the go.sum entry will be skipped without checking, looking like it was valid.\n\nIt would of course not match any possible record, but that check is after this, so it would not be reached.",
      "revId": "89d5e2e13120e2132d616e92fafa772bdc5f7116",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "147751c1_4b98ef10",
        "filename": "notary/internal/notecheck/main.go",
        "patchSetId": 2
      },
      "lineNbr": 136,
      "author": {
        "id": 5056
      },
      "writtenOn": "2019-03-14T02:58:16Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "db83730c_d25676b2",
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "89d5e2e13120e2132d616e92fafa772bdc5f7116",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7002e024_2f2315b6",
        "filename": "notary/internal/notecheck/main.go",
        "patchSetId": 2
      },
      "lineNbr": 151,
      "author": {
        "id": 11715
      },
      "writtenOn": "2019-03-13T18:57:26Z",
      "side": 1,
      "message": "On the open Internet, use an http.Client with a Timeout (unless you are streaming the Body). golang.org/issue/24138",
      "range": {
        "startLine": 151,
        "startChar": 14,
        "endLine": 151,
        "endChar": 22
      },
      "revId": "89d5e2e13120e2132d616e92fafa772bdc5f7116",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6fb41053_a1970f7a",
        "filename": "notary/internal/notecheck/main.go",
        "patchSetId": 2
      },
      "lineNbr": 151,
      "author": {
        "id": 5056
      },
      "writtenOn": "2019-03-14T02:58:16Z",
      "side": 1,
      "message": "Done (by setting http.DefaultClient.Timeout; again this is a demo program).",
      "parentUuid": "7002e024_2f2315b6",
      "range": {
        "startLine": 151,
        "startChar": 14,
        "endLine": 151,
        "endChar": 22
      },
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "89d5e2e13120e2132d616e92fafa772bdc5f7116",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "85481058_680c9ea2",
        "filename": "notary/internal/notecheck/main.go",
        "patchSetId": 2
      },
      "lineNbr": 197,
      "author": {
        "id": 11715
      },
      "writtenOn": "2019-03-13T18:57:26Z",
      "side": 1,
      "message": "An alternative implementation without the goto which I would find more readable:\n\n    defer wg.Done()\n    data, err :\u003d httpGet(r.url + tile.Path())\n    if err !\u003d nil \u0026\u0026 tile.W !\u003d 1\u003c\u003cuint(tile.H) {\n    \tfullTile :\u003d tile\n    \tfullTile.W \u003d 1 \u003c\u003c uint(tile.H)\n    \tif fullData, err1 :\u003d httpGet(r.url + fullTile.Path()); err1 \u003d\u003d nil {\n    \t\tdata \u003d fullData[:tile.W*tlog.HashSize]\n    \t\terr \u003d nil\n    \t}\n    }\n    if err !\u003d nil {\n    \terrs[i] \u003d err\n    \treturn\n    }\n    r.cacheMu.Lock()\n    r.cache[tile] \u003d data\n    r.cacheMu.Unlock()\n    out[i] \u003d data",
      "revId": "89d5e2e13120e2132d616e92fafa772bdc5f7116",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9b794276_f457507c",
        "filename": "notary/internal/notecheck/main.go",
        "patchSetId": 2
      },
      "lineNbr": 197,
      "author": {
        "id": 5056
      },
      "writtenOn": "2019-03-14T02:58:16Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "85481058_680c9ea2",
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "89d5e2e13120e2132d616e92fafa772bdc5f7116",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6458c0d2_b7f05cd6",
        "filename": "notary/internal/notecheck/main.go",
        "patchSetId": 2
      },
      "lineNbr": 204,
      "author": {
        "id": 11715
      },
      "writtenOn": "2019-03-13T18:57:26Z",
      "side": 1,
      "message": "This should be \"err \u003d\u003d nil\".",
      "range": {
        "startLine": 204,
        "startChar": 51,
        "endLine": 204,
        "endChar": 61
      },
      "revId": "89d5e2e13120e2132d616e92fafa772bdc5f7116",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f0ecbe6f_7e429435",
        "filename": "notary/internal/notecheck/main.go",
        "patchSetId": 2
      },
      "lineNbr": 204,
      "author": {
        "id": 5056
      },
      "writtenOn": "2019-03-14T02:58:16Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6458c0d2_b7f05cd6",
      "range": {
        "startLine": 204,
        "startChar": 51,
        "endLine": 204,
        "endChar": 61
      },
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "89d5e2e13120e2132d616e92fafa772bdc5f7116",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4e4f85f2_bea775dd",
        "filename": "notary/internal/notecheck/main.go",
        "patchSetId": 2
      },
      "lineNbr": 208,
      "author": {
        "id": 11715
      },
      "writtenOn": "2019-03-13T18:57:26Z",
      "side": 1,
      "message": "This is logic that all applications would want to apply, so it would probably be useful in tlog.",
      "range": {
        "startLine": 201,
        "startChar": 4,
        "endLine": 208,
        "endChar": 5
      },
      "revId": "89d5e2e13120e2132d616e92fafa772bdc5f7116",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d87876ba_a9f2f00d",
        "filename": "notary/internal/notecheck/main.go",
        "patchSetId": 2
      },
      "lineNbr": 208,
      "author": {
        "id": 5056
      },
      "writtenOn": "2019-03-14T02:58:16Z",
      "side": 1,
      "message": "At some point, sure. When I do the real go command version I\u0027ll think through\nwhat belongs in the tlog API.",
      "parentUuid": "4e4f85f2_bea775dd",
      "range": {
        "startLine": 201,
        "startChar": 4,
        "endLine": 208,
        "endChar": 5
      },
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "89d5e2e13120e2132d616e92fafa772bdc5f7116",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3f1312a4_919facee",
        "filename": "notary/internal/notecheck/main.go",
        "patchSetId": 2
      },
      "lineNbr": 214,
      "author": {
        "id": 11715
      },
      "writtenOn": "2019-03-13T18:57:26Z",
      "side": 1,
      "message": "If the retry-for-full-tile logic is hit, this ends up caching the partial data under the full tile key.",
      "revId": "89d5e2e13120e2132d616e92fafa772bdc5f7116",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2409a108_99c32b0f",
        "filename": "notary/internal/notecheck/main.go",
        "patchSetId": 2
      },
      "lineNbr": 214,
      "author": {
        "id": 5056
      },
      "writtenOn": "2019-03-14T02:58:16Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3f1312a4_919facee",
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "89d5e2e13120e2132d616e92fafa772bdc5f7116",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    }
  ]
}