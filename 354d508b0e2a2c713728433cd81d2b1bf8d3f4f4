{
  "comments": [
    {
      "key": {
        "uuid": "51795972_19322f39",
        "filename": "io/spi/example_test.go",
        "patchSetId": 6
      },
      "lineNbr": 11,
      "author": {
        "id": 5480
      },
      "writtenOn": "2016-03-30T18:23:44Z",
      "side": 1,
      "message": "don\u0027t you need to also import devfs to register the driver?",
      "revId": "354d508b0e2a2c713728433cd81d2b1bf8d3f4f4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "51795972_798083e7",
        "filename": "io/spi/example_test.go",
        "patchSetId": 6
      },
      "lineNbr": 11,
      "author": {
        "id": 5040
      },
      "writtenOn": "2016-03-30T18:34:01Z",
      "side": 1,
      "message": "devfs is a part of the spi package. You dont have to import it but third party drivers will need to be imported.",
      "parentUuid": "51795972_19322f39",
      "revId": "354d508b0e2a2c713728433cd81d2b1bf8d3f4f4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "71ed7d37_c2d4246e",
        "filename": "io/spi/spi.go",
        "patchSetId": 6
      },
      "lineNbr": 57,
      "author": {
        "id": 5480
      },
      "writtenOn": "2016-03-30T08:56:44Z",
      "side": 1,
      "message": "why not embed here? it seems like it would make sense for Device to expose Configure/Transfer/Close without having to forward them manually.",
      "revId": "354d508b0e2a2c713728433cd81d2b1bf8d3f4f4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "51795972_16f75c39",
        "filename": "io/spi/spi.go",
        "patchSetId": 6
      },
      "lineNbr": 57,
      "author": {
        "id": 5040
      },
      "writtenOn": "2016-03-30T17:08:39Z",
      "side": 1,
      "message": "No, Device and the Conn are not exporting the same methods. Device is targeting the end user, Conn is targeting the driver implementors. Their godoc will diverge significantly. Hence I am not going to embed.",
      "parentUuid": "71ed7d37_c2d4246e",
      "revId": "354d508b0e2a2c713728433cd81d2b1bf8d3f4f4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "51795972_16c91ccf",
        "filename": "io/spi/spi.go",
        "patchSetId": 6
      },
      "lineNbr": 57,
      "author": {
        "id": 5480
      },
      "writtenOn": "2016-03-30T17:27:15Z",
      "side": 1,
      "message": "Makes sense, I was suggesting this because currently current set of methods they expose was ~similar. But I can understand you want to be able to make them diverge in the future (and even if they don\u0027t, you\u0027re right that embedding the interface would prevent you from attaching godoc to each Device method).",
      "parentUuid": "51795972_16f75c39",
      "revId": "354d508b0e2a2c713728433cd81d2b1bf8d3f4f4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "51795972_b9221be8",
        "filename": "io/spi/spi.go",
        "patchSetId": 6
      },
      "lineNbr": 96,
      "author": {
        "id": 5480
      },
      "writtenOn": "2016-03-30T18:22:16Z",
      "side": 1,
      "message": "Since people will need to import devfs to register the driver as a side effect, did you consider having something more static?\n\nimport (\n  \"golang.org/exp/io/spi\"\n  \"golang.org/exp/io/spi/devfs\"\n)\n\nspi.Open(devfs.NewConn(bus, cs, mode, maxSpeedHz))\n\n(that could allow you to have init args that depends on the driver).",
      "revId": "354d508b0e2a2c713728433cd81d2b1bf8d3f4f4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "51795972_d98ef720",
        "filename": "io/spi/spi.go",
        "patchSetId": 6
      },
      "lineNbr": 96,
      "author": {
        "id": 5480
      },
      "writtenOn": "2016-03-30T18:25:22Z",
      "side": 1,
      "message": "Oups I didn\u0027t realize devfs was part of the same package, then I\u0027m confused why the lookup needs to be dynamic instead of exporting the function that create the devfs conn?",
      "parentUuid": "51795972_b9221be8",
      "revId": "354d508b0e2a2c713728433cd81d2b1bf8d3f4f4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "51795972_19ef8fa0",
        "filename": "io/spi/spi.go",
        "patchSetId": 6
      },
      "lineNbr": 96,
      "author": {
        "id": 5040
      },
      "writtenOn": "2016-03-30T18:34:01Z",
      "side": 1,
      "message": "I was thinking about driverName to be an interface{} rather than a string.\n\nspi.Open(spi.DevFS, bus, cs, mode, speed)\n\nThe key could be exported from the third party packages. I will add a TODO for now. When minux first suggested the driver name to be a part of the Open function, I also mentioned I have alternative options. I will try to document them and have this debate on golang-dev rather than on individual CLs.",
      "parentUuid": "51795972_b9221be8",
      "revId": "354d508b0e2a2c713728433cd81d2b1bf8d3f4f4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "51795972_39252b9d",
        "filename": "io/spi/spi.go",
        "patchSetId": 6
      },
      "lineNbr": 96,
      "author": {
        "id": 5480
      },
      "writtenOn": "2016-03-30T18:53:01Z",
      "side": 1,
      "message": "Maybe you could have a real type that implement the Opener interface, that way you wouldn\u0027t need the extra lookup.\n\n(or directly pass the function pointer,  or even implement the interface as a function pointer)\n\nSomething like: http://play.golang.org/p/dEOGTRbtIR",
      "parentUuid": "51795972_19ef8fa0",
      "revId": "354d508b0e2a2c713728433cd81d2b1bf8d3f4f4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "912d9179_88841703",
        "filename": "io/spi/spi.go",
        "patchSetId": 6
      },
      "lineNbr": 96,
      "author": {
        "id": 5055
      },
      "writtenOn": "2016-03-30T19:00:26Z",
      "side": 1,
      "message": "The reason I recommended a string parameter is that\nwe can add backend-specific parameters to that string,\nbut know I see a better and more type-safe approach:\n\nWe make the driver parameter a spi/driver.Conn\ninterface, and then the user import a package that\nprovide such a type that contains driver specific configuration fields and also implements the\nspi/driver.Conn interface. We don\u0027t actually need\ndynamic registration for backends, and this permits\na single package to provide backends for more than\none type of IO interface (SPI, I2C, for example),\nwhile allowing the linker to remove unused IO\nbackends (dynamic registration pretty much prevents\ndead code removal.)\n\nFor example, an imaginary ftdi MPSSE spi driver\ncould be like this:\n\npackage ftdi\n\n// SPIConn implements spi/driver.Conn\ntype SPIConn {\n     Vid, Pid uint16\n     // other backedn specific configs\n}\n// I2CConn implements i2c/driver.Conn\ntype I2CConn { /* ... */ }\n\n\nAnd the user code will look like this:\n\n\nimport (\n    \"..../ftdi\"\n    \"golang.org/x/exp/io/spi\"\n)\ndev, err :\u003d spi.Open(\u0026ftdi.SPIConn{Vid: 0x0403, Pid: 0x6014}, 0, 0, 1e6)",
      "parentUuid": "51795972_19ef8fa0",
      "revId": "354d508b0e2a2c713728433cd81d2b1bf8d3f4f4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "51795972_d9def78a",
        "filename": "io/spi/spi.go",
        "patchSetId": 6
      },
      "lineNbr": 96,
      "author": {
        "id": 5480
      },
      "writtenOn": "2016-03-30T19:06:04Z",
      "side": 1,
      "message": "+1, it\u0027s even simpler if we pass the Conn interface directly instead of the Opener intermediate interface (each driver is free to implement their own NewMyConn function() if they need some custom opening logic).",
      "parentUuid": "912d9179_88841703",
      "revId": "354d508b0e2a2c713728433cd81d2b1bf8d3f4f4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "51795972_fcb721af",
        "filename": "io/spi/spi.go",
        "patchSetId": 6
      },
      "lineNbr": 96,
      "author": {
        "id": 5480
      },
      "writtenOn": "2016-03-30T20:00:28Z",
      "side": 1,
      "message": "if we wanted to build on the Opener interface, we could have a 2-step init for driver that needs vendor parameter, like MySPIConn in http://play.golang.org/p/3WjlKcq2j3.\n\nFirst the client can construct the driver type using vendor specific parameter, then spi.Open would call Open() on it, with generic spi param.",
      "parentUuid": "51795972_d9def78a",
      "revId": "354d508b0e2a2c713728433cd81d2b1bf8d3f4f4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    }
  ]
}