{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "0309408d_83a753d3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2021-11-30T14:39:37Z",
      "side": 1,
      "message": "TryBots beginning. Status page: https://farmer.golang.org/try?commit\u003db5129008",
      "tag": "autogenerated:trybots~beginning",
      "revId": "b5129008213eb0827fcafbeaf00c70b289870e0b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f9c8c8a7_ce3bbf24",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2021-11-30T14:39:37Z",
      "side": 1,
      "message": "Superseded.",
      "parentUuid": "154160ed_da32a660",
      "tag": "autogenerated:trybots~beginning",
      "revId": "b5129008213eb0827fcafbeaf00c70b289870e0b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cb6bf6e5_b83510fa",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2021-11-30T14:41:02Z",
      "side": 1,
      "message": "Build is still in progress... Status page: https://farmer.golang.org/try?commit\u003db5129008\nFailed on linux-amd64: https://storage.googleapis.com/go-build-log/18934e11/linux-amd64_ca736688.log\nOther builds still in progress; subsequent failure notices suppressed until final report.\n\nConsult https://build.golang.org/ to see whether they are new failures. Keep in mind that TryBots currently test *exactly* your git commit, without rebasing. If your commit\u0027s git parent is old, the failure might\u0027ve already been fixed.\n",
      "parentUuid": "0309408d_83a753d3",
      "tag": "autogenerated:trybots~progress",
      "revId": "b5129008213eb0827fcafbeaf00c70b289870e0b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "19c1d8fa_cda594e5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2021-11-30T14:41:58Z",
      "side": 1,
      "message": "4 of 4 TryBots failed.\nFailed on linux-amd64: https://storage.googleapis.com/go-build-log/18934e11/linux-amd64_ca736688.log\nFailed on linux-amd64-race: https://storage.googleapis.com/go-build-log/18934e11/linux-amd64-race_b5858826.log\nFailed on windows-amd64-2016: https://storage.googleapis.com/go-build-log/18934e11/windows-amd64-2016_904ba5ac.log\nFailed on windows-386-2008: https://storage.googleapis.com/go-build-log/18934e11/windows-386-2008_cf8aff72.log\n\nConsult https://build.golang.org/ to see whether they are new failures. Keep in mind that TryBots currently test *exactly* your git commit, without rebasing. If your commit\u0027s git parent is old, the failure might\u0027ve already been fixed.\n\n",
      "parentUuid": "0309408d_83a753d3",
      "tag": "autogenerated:trybots~failed",
      "revId": "b5129008213eb0827fcafbeaf00c70b289870e0b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "966f8846_3df8cea5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 14570
      },
      "writtenOn": "2021-12-20T01:10:06Z",
      "side": 1,
      "message": "BTW, you may be interested in seeing what a subset of your grammar (with minor variations) looks like in parco, a Go-with-generics parser combinator framework I\u0027ve been working on: https://github.com/jba/parco/blob/generics/usage_lang_test.go#L52.\n\nIt takes 51 non-blank lines of code to write it in parco, compared to 105 loc in grammar.go.",
      "revId": "b5129008213eb0827fcafbeaf00c70b289870e0b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ab3417f2_bf1e050d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 14570
      },
      "writtenOn": "2021-12-31T15:47:59Z",
      "side": 1,
      "message": "Although I see the power of this approach, especially for large command surfaces, I think it would be overkill for the smaller command-line tools I tend to write. I particularly don\u0027t like the fact that the doc is separate from the code.\n\nThinking about that separation, I had the idea of using struct tags for usage doc. The struct itself holds both the flags and positional args for a command. I happen to like the result a lot. https://github.com/jba/cli.",
      "revId": "b5129008213eb0827fcafbeaf00c70b289870e0b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "50d2a432_f6d4efeb",
        "filename": "usage/grammar.go",
        "patchSetId": 2
      },
      "lineNbr": 28,
      "author": {
        "id": 14570
      },
      "writtenOn": "2021-12-20T00:51:13Z",
      "side": 1,
      "message": "Is having dot in names important? Because it means that I can\u0027t write\n\n     word...\n     \nI need a space before the first dot. I think that is a pitfall, so I would drop the \".\" in names. Although you could argue that repeating a literal is very unlikely.",
      "range": {
        "startLine": 28,
        "startChar": 13,
        "endLine": 28,
        "endChar": 16
      },
      "revId": "b5129008213eb0827fcafbeaf00c70b289870e0b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "05847ab5_78d2db94",
        "filename": "usage/grammar.go",
        "patchSetId": 2
      },
      "lineNbr": 226,
      "author": {
        "id": 14570
      },
      "writtenOn": "2021-12-20T00:51:13Z",
      "side": 1,
      "message": "This grammar allows\n\n    [thing] ...\n    \nwhich I don\u0027t think makes any sense.",
      "range": {
        "startLine": 226,
        "startChar": 26,
        "endLine": 226,
        "endChar": 32
      },
      "revId": "b5129008213eb0827fcafbeaf00c70b289870e0b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d7c01fc3_4017e0bb",
        "filename": "usage/usage.go",
        "patchSetId": 2
      },
      "lineNbr": 24,
      "author": {
        "id": 14570
      },
      "writtenOn": "2021-12-20T00:51:13Z",
      "side": 1,
      "message": "Too much magic.\nThis isn\u0027t google3, there aren\u0027t hundreds of flags, and I\u0027m OK writing\n    var cfg Config\n    flag.StringVar(\u0026cfg.Force, \"f\", ...)\n\nIf you do want to do struct magic, at least look for struct tags:\n\n    type Flags struct {\n       Force bool `flags:\"force,f\"`\n    }",
      "range": {
        "startLine": 16,
        "startChar": 20,
        "endLine": 24,
        "endChar": 38
      },
      "revId": "b5129008213eb0827fcafbeaf00c70b289870e0b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "65e5d950_658b9cd9",
        "filename": "usage/usage.go",
        "patchSetId": 2
      },
      "lineNbr": 67,
      "author": {
        "id": 14570
      },
      "writtenOn": "2021-12-20T00:51:13Z",
      "side": 1,
      "message": "This two-space rule strikes me as a large pitfall.\n\nBased on the example you have, it seems like this rule and the one for defaults lets you support an options section naturally:\n\nOptions:\n  -force,f    force deletion (default false)\n  \n \nBut those rules are awkward/confusing/nonsensical with command patterns\n\n  db delete -force,-f  -backup \u003cid\u003e...  delete some values (default false)\n\nHere I goofed and added two spaces between the flags, so this is a bug.\nAlso the default text will apply to -backup (I guess, from reading your comments--haven\u0027t tried it) but that is confusing and error-prone. Lastly, I always\nwrite the comment for a command below its pattern, because writing it adjacent is almost certainly going to be confusing.\n\nIf there aren\u0027t other use cases for the two-space and default rules, then I would just special case flag handling.",
      "range": {
        "startLine": 65,
        "startChar": 63,
        "endLine": 67,
        "endChar": 27
      },
      "revId": "b5129008213eb0827fcafbeaf00c70b289870e0b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "44a92367_37e6e4bb",
        "filename": "usage/usage.go",
        "patchSetId": 2
      },
      "lineNbr": 70,
      "author": {
        "id": 14570
      },
      "writtenOn": "2021-12-20T00:51:13Z",
      "side": 1,
      "message": "Can you give an example of this? I can\u0027t think of one.",
      "range": {
        "startLine": 68,
        "startChar": 24,
        "endLine": 70,
        "endChar": 61
      },
      "revId": "b5129008213eb0827fcafbeaf00c70b289870e0b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}