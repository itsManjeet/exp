{
  "comments": [
    {
      "key": {
        "uuid": "4ab3c5de_19a4b1e9",
        "filename": "errors/fmt/errors.go",
        "patchSetId": 5
      },
      "lineNbr": 19,
      "author": {
        "id": 5305
      },
      "writtenOn": "2018-11-01T17:42:47Z",
      "side": 1,
      "message": "This function is structurally odd: It\u0027s semi-triangular.\n\n  if x {\n    if !y {\n      goto noWrap\n    }\n    if z {\n      return 1\n    }\n  }\n  noWrap:\n  return 2\n\nI\u0027d suggest any of the following as being more internally consistent.\n\nTriangular (usually discouraged in Go style):\n\n  if x {\n    if y {\n      if z {\n        return 1\n      }\n    }\n  }\n  return 2\n\nFlattened:\n\n  if !x { goto noWrap }\n  if !y { goto noWrap }\n  if !z { goto noWrap }\n  return 1\n  noWrap:\n  return 2\n\nFlattened, avoiding gotos:\n\n  if err :\u003d wrap(...); err !\u003d nil {\n    return err\n  }\n  return 2\n\n  func wrap(...) error {\n    if !x { return nil }\n    if !y { return nil }\n    if !z { return nil }\n    return 1\n  }",
      "revId": "736b7301ca41de8c8f378fd272e41eccaf78a0c1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "01f0d55b_b55a3e0d",
        "filename": "errors/fmt/errors.go",
        "patchSetId": 5
      },
      "lineNbr": 22,
      "author": {
        "id": 5305
      },
      "writtenOn": "2018-10-25T23:50:58Z",
      "side": 1,
      "message": "This is really subtle. Change from \"foo: %v\" to \"foo: %v (bar)\" and you not only change the format string, but the semantic meaning of the error chain as well.",
      "revId": "736b7301ca41de8c8f378fd272e41eccaf78a0c1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "022d7f0c_2d61a737",
        "filename": "errors/fmt/errors.go",
        "patchSetId": 5
      },
      "lineNbr": 22,
      "author": {
        "id": 5182
      },
      "writtenOn": "2018-10-30T16:32:14Z",
      "side": 1,
      "message": "It is not perfect, but dealing with what we have, it improves errors for a lot of existing code. Any suggestions to make this approach more robust are welcome.\n\nIn this CL, this is only used for printing, not wrapping. The only thing that would break for printing is that the layout won\u0027t be nice. The benefits of this approach outweigh the negatives, imo.\n\nFor wrapping this may still be the case, but we could consider having an errors.Wrap() or errors.Chain() instead of errors.Opaque().",
      "parentUuid": "01f0d55b_b55a3e0d",
      "revId": "736b7301ca41de8c8f378fd272e41eccaf78a0c1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4cdee433_9ca2a33b",
        "filename": "errors/fmt/errors.go",
        "patchSetId": 5
      },
      "lineNbr": 22,
      "author": {
        "id": 9735
      },
      "writtenOn": "2018-10-30T17:51:40Z",
      "side": 1,
      "message": "(apologies for jumping in now; was a little distant from errors stuff lately, but looping back now)\n\nIs the goal here to have fmt.Errorf automatically support error wrapping with *no* change whatsoever? Or is the goal to have fmt.Errorf support error wrapping with little change needed?\n\nIf the former (no change to fmt), this change is subtle and I\u0027ve expressed in the past my concern with this. Given that this is also a change in semantics, wouldn\u0027t that also imply that there needs to a v2 of the fmt package? Is that something that we want? A v2 of fmt seems heavy-weight only for this.\n\nIf the later (minor change to usage of fmt), then I\u0027m more in support of this.\nHave we considered any of the following alternatives?\n* a new fmt verb specific for errors (e.g., \"%E\"? although that overlaps with formatting floats...)\n* an explicit named type that wraps the error that is guaranteed to never have been used before (e.g., fmt.Printf(\"foo exploded: %v\", fmt.E{err})). The presence of that named type (which can\u0027t have existed up till now, means that the intention is clear that wrapping was desired)",
      "parentUuid": "022d7f0c_2d61a737",
      "revId": "736b7301ca41de8c8f378fd272e41eccaf78a0c1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a039a468_4002eb94",
        "filename": "errors/fmt/errors.go",
        "patchSetId": 5
      },
      "lineNbr": 22,
      "author": {
        "id": 5182
      },
      "writtenOn": "2018-11-01T16:50:13Z",
      "side": 1,
      "message": "The idea at the moment was the former. We have heard concerns, but so far they were always abstract. We would like to see concrete examples of how this could break. Would you happen to have some?\n\nWe should not do a v2 of this package in my believe.\n\nIf the objections to wrapping by default are big enough, I\u0027ve expressed my preference for using some type that marks the desire to wrap.",
      "parentUuid": "4cdee433_9ca2a33b",
      "revId": "736b7301ca41de8c8f378fd272e41eccaf78a0c1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6f3abe61_10a65b16",
        "filename": "errors/fmt/errors.go",
        "patchSetId": 5
      },
      "lineNbr": 22,
      "author": {
        "id": 5305
      },
      "writtenOn": "2018-11-01T17:42:47Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "a039a468_4002eb94",
      "revId": "736b7301ca41de8c8f378fd272e41eccaf78a0c1",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    }
  ]
}