{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "f2daba2d_b9470e2f",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 26,
      "author": {
        "id": 57259
      },
      "writtenOn": "2022-10-04T13:34:18Z",
      "side": 1,
      "message": "much",
      "range": {
        "startLine": 26,
        "startChar": 57,
        "endLine": 26,
        "endChar": 61
      },
      "revId": "c77fe0f535ebb7a786dea29ce90b687fd31feb6b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "035cde50_504acede",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 26,
      "author": {
        "id": 57259
      },
      "writtenOn": "2022-10-04T13:34:18Z",
      "side": 1,
      "message": "s/many/much/",
      "range": {
        "startLine": 26,
        "startChar": 57,
        "endLine": 26,
        "endChar": 61
      },
      "revId": "c77fe0f535ebb7a786dea29ce90b687fd31feb6b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "155f92f5_c8c9ad55",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 37,
      "author": {
        "id": 57259
      },
      "writtenOn": "2022-10-04T13:34:18Z",
      "side": 1,
      "message": "Comment on the differences between the two implementations? From my skim of the results, it appears that slog is at least as fast as zap in every benchmark when runtime.Callers is stubbed out, and usually faster when it is enabled.\n\nA CPU profile confirms that runtime.Callers really is surprisingly expensive, and so it could easily skew the whole result. I wonder what zap does for this feature, and how we can make a fair comparison.",
      "revId": "c77fe0f535ebb7a786dea29ce90b687fd31feb6b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a7809b02_8cd90b50",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-10-03T16:21:18Z",
      "side": 1,
      "message": "TryBots beginning. Status page: https://farmer.golang.org/try?commit\u003dc77fe0f5\n",
      "tag": "autogenerated:trybots~beginning",
      "revId": "c77fe0f535ebb7a786dea29ce90b687fd31feb6b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e8ca21ae_330940f7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2022-10-03T16:23:08Z",
      "side": 1,
      "message": "TryBots are happy.\n\n",
      "parentUuid": "a7809b02_8cd90b50",
      "tag": "autogenerated:trybots~happy",
      "revId": "c77fe0f535ebb7a786dea29ce90b687fd31feb6b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "910fde78_b8879fec",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 57259
      },
      "writtenOn": "2022-10-04T13:34:18Z",
      "side": 1,
      "message": "Nice.",
      "revId": "c77fe0f535ebb7a786dea29ce90b687fd31feb6b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "690dc273_bd4a1a83",
        "filename": "slog/benchmarks/benchmarks.go",
        "patchSetId": 3
      },
      "lineNbr": 25,
      "author": {
        "id": 57259
      },
      "writtenOn": "2022-10-04T13:34:18Z",
      "side": 1,
      "message": "A while back, Austin added a cache to runtime.pcvalue (https://go-review.googlesource.com/13614), and I would expect your benchmark to be all cache hits. You might want to ask him about it.",
      "revId": "c77fe0f535ebb7a786dea29ce90b687fd31feb6b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4de87742_cb4c3a1c",
        "filename": "slog/benchmarks/run_benchmarks.sh",
        "patchSetId": 3
      },
      "lineNbr": 2,
      "author": {
        "id": 57259
      },
      "writtenOn": "2022-10-04T13:34:18Z",
      "side": 1,
      "message": "cd $(dirname $0)",
      "revId": "c77fe0f535ebb7a786dea29ce90b687fd31feb6b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "63dc1731_bbdbec3e",
        "filename": "slog/benchmarks/zapbenchmarks/run_benchmarks.sh",
        "patchSetId": 3
      },
      "lineNbr": 2,
      "author": {
        "id": 57259
      },
      "writtenOn": "2022-10-04T13:34:18Z",
      "side": 1,
      "message": "cd $(dirname $0)",
      "revId": "c77fe0f535ebb7a786dea29ce90b687fd31feb6b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "60372933_f5da55f5",
        "filename": "slog/benchmarks/zapbenchmarks/run_benchmarks.sh",
        "patchSetId": 3
      },
      "lineNbr": 8,
      "author": {
        "id": 57259
      },
      "writtenOn": "2022-10-04T13:34:18Z",
      "side": 1,
      "message": "sed unfortunately has no linux+darwin portable way to specify the -i and -e flags together.\n\ns?x?y? is more typical than ~ when the operands contain slash.",
      "revId": "c77fe0f535ebb7a786dea29ce90b687fd31feb6b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aa2ed336_d8f0fa1e",
        "filename": "slog/benchmarks/zapbenchmarks/zap_encoders_test.go",
        "patchSetId": 3
      },
      "lineNbr": 22,
      "author": {
        "id": 57259
      },
      "writtenOn": "2022-10-04T13:34:18Z",
      "side": 1,
      "message": "It is very surprising that one can clone a nil encoder when that\u0027s not a usable value by itself, and I wouldn\u0027t expect that this case is supported by looking at either this code or the implementation. Define a newFastTextEncoder helper?",
      "revId": "c77fe0f535ebb7a786dea29ce90b687fd31feb6b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}