{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "4805154f_184f5185",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2023-02-25T14:19:32Z",
      "side": 1,
      "message": "TryBots beginning. Status page: https://farmer.golang.org/try?commit\u003d606c85da\n",
      "tag": "autogenerated:trybots~beginning",
      "revId": "606c85da014fdb73dbf3794b3b763fd9bb546f4b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0002a5bb_c1aa9e17",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2023-02-25T14:21:30Z",
      "side": 1,
      "message": "TryBots are happy.\n\n",
      "parentUuid": "4805154f_184f5185",
      "tag": "autogenerated:trybots~happy",
      "revId": "606c85da014fdb73dbf3794b3b763fd9bb546f4b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "324390f9_2b87e0eb",
        "filename": "slog/slogtest/example_test.go",
        "patchSetId": 4
      },
      "lineNbr": 13,
      "author": {
        "id": 57259
      },
      "writtenOn": "2023-04-03T16:36:23Z",
      "side": 1,
      "message": "delete",
      "range": {
        "startLine": 13,
        "startChar": 67,
        "endLine": 13,
        "endChar": 70
      },
      "revId": "606c85da014fdb73dbf3794b3b763fd9bb546f4b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "af4bc732_7d666476",
        "filename": "slog/slogtest/example_test.go",
        "patchSetId": 4
      },
      "lineNbr": 23,
      "author": {
        "id": 57259
      },
      "writtenOn": "2023-04-03T16:36:23Z",
      "side": 1,
      "message": "This assumes that there are no newlines in the JSON output. Is that sound? Surely not if arbitrary json.Marshaler implementations are considered.",
      "revId": "606c85da014fdb73dbf3794b3b763fd9bb546f4b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "573ec845_bee603f7",
        "filename": "slog/slogtest/slogtest.go",
        "patchSetId": 4
      },
      "lineNbr": 41,
      "author": {
        "id": 57259
      },
      "writtenOn": "2023-04-03T16:36:23Z",
      "side": 1,
      "message": "This assumes that all Handlers under test preserve the entire structure of the output. Doesn\u0027t that preclude writing a test for a handler that is intentionally lossy?",
      "range": {
        "startLine": 37,
        "startChar": 0,
        "endLine": 41,
        "endChar": 2
      },
      "revId": "606c85da014fdb73dbf3794b3b763fd9bb546f4b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "06972c1e_0b6dcddc",
        "filename": "slog/slogtest/slogtest.go",
        "patchSetId": 4
      },
      "lineNbr": 169,
      "author": {
        "id": 57259
      },
      "writtenOn": "2023-04-03T16:36:23Z",
      "side": 1,
      "message": "The use of generation seems unnecessarily complicated. If the goal is to make it easy to identify the failing iteration of the loop, then use the explanation field. You could append a numeric suffix to the last nonempty one:\n\n   \"a Handler should ignore a zero Record.Time (+ 2)\".\n\nor use a reflect.Callers-based helper to append the line number:\n\n   explanation: withLine(\"a Handler should ignore a zero Record.Time\"),\n\n   -\u003e \"a Handler should ignore a zero Record.Time (line 82)\".\n\nor just assert that it is nonempty.",
      "revId": "606c85da014fdb73dbf3794b3b763fd9bb546f4b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dafd77a2_dd1937c8",
        "filename": "slog/slogtest/slogtest_test.go",
        "patchSetId": 4
      },
      "lineNbr": 68,
      "author": {
        "id": 57259
      },
      "writtenOn": "2023-04-03T16:36:23Z",
      "side": 1,
      "message": "This doesn\u0027t look correct if the output includes a quoted space. Parsing the text output format is inherently a left-to-right scan, I think.",
      "revId": "606c85da014fdb73dbf3794b3b763fd9bb546f4b",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}