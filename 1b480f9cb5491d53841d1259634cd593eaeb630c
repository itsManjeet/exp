{
  "comments": [
    {
      "key": {
        "uuid": "c87c5323_241a12d5",
        "filename": "errors/format.go",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 5305
      },
      "writtenOn": "2018-10-04T21:59:38Z",
      "side": 1,
      "message": "Continuing discussion from https://go-review.googlesource.com/c/exp/+/136539:\n\nNaming this method Format makes it impossible for an error type to support %+v detailed output when used with the fmt package from any currently released Go version. There\u0027s no way for e.g., github.com/pkg/errors to adopt the new formatting interfaces without losing some of its existing features on current Go versions.\n\nI think we need to think more about how users can incrementally adopt these proposed changes.",
      "revId": "1b480f9cb5491d53841d1259634cd593eaeb630c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8bd1a739_1287a91f",
        "filename": "errors/format.go",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 5182
      },
      "writtenOn": "2018-10-11T12:25:17Z",
      "side": 1,
      "message": "If the issue is just a matter of transition, we could support FormatError to support transition as a hidden interface. I\u0027ve added support for that. The code now also handles fmt.Formatter as last error in the chain, preserving their details mode. That covers handling all features I\u0027m aware of of old packages (please let me know if you know of more).\n\nI think that supporting Format and FormatError are quite confusing. People would have to remember that errors.Formatter trumps fmt.Formatter trumps error and remember to change both pieces of code. It is a feature to not be able to implement both. \n\nI see that keeping semantic versioning into account, the API cannot be changed in a backwards incompatible way. However, users should not use Format directly. Indeed, most packages do not expose the Format method in their API (e.g. pkg/errors, uber/multierr, spacemonkeygo/errors, and ergo/errors). So we\u0027re good there. Juju errors does, but it has no semantic version.\n\nNote also that it is okay for packages to require new Go releases.",
      "parentUuid": "c87c5323_241a12d5",
      "revId": "1b480f9cb5491d53841d1259634cd593eaeb630c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "643427eb_dfd0691c",
        "filename": "errors/format.go",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 5305
      },
      "writtenOn": "2018-10-11T15:26:22Z",
      "side": 1,
      "message": "Users already need to remember that fmt.Format trumps error trumps fmt.Stringer. Is adding one more item to that list really that confusing? There\u0027s even a nice balance: formatting methods trump string-return ones, and error-specific methods trump general-purpose ones.\n\nIf we provide an adapter from FormatError to Format, there is no concern about changing both pieces of code:\n\n  func (err errType) Format(s fmt.State, r rune) { fmt.FormatError(err, s, r) }\n  func (err errType) FormatError(p errors.Printer) (next error) { ... }\n\nAnd yes, it\u0027s okay for packages to require new Go releases, but we need to be able to demonstrate the value of these interfaces before they can go into a release.",
      "parentUuid": "8bd1a739_1287a91f",
      "revId": "1b480f9cb5491d53841d1259634cd593eaeb630c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f56daa5f_c38fe9aa",
        "filename": "errors/format.go",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 5182
      },
      "writtenOn": "2018-10-12T06:55:54Z",
      "side": 1,
      "message": "To be complete, it would be FormatError beats Formats beats (GoStringer | Error beats String).\n\nLet\u0027s approach it a different way, though. Aside from transition, what is the value of providing both methods?\n\nHere are the arguments agains:\n- FormatError is longer to type\n- Format would never be called by fmt. Users usually don\u0027t and shouldn\u0027t create their own state, so this means a matching Format implementation would be dead code.\n- It is almost certainly wrong to call Format from within another implementations of Format when it concerns printing errors. To avoid confusion, it is better not to have the possibility.\n- Pretty much all implementations of Format for errors outside of the stdlib already break the usual functionality of printing errors by fmt in some relevant way (%+q, %#v, etc.); it is hard to get it right. This will only get worse with FormatError, as now order matters too. Using Format to print errors should be highly discouraged once this alternative is available.\n\nIn general, I don\u0027t see any upside to support both in the long run. Do you have any examples to the contrary not related to transitioning?\n\nI\u0027m not saying I\u0027m fully opposed to calling it FormatError, but I\u0027m still not convinced of the upside.\n\nI don\u0027t understand how the adaptor would work. It would rely on a newer version of Go that would already ignore the fmt.Format implementation. Any other use of calling Format (like passing the state on from within another format call) is very likely to be incorrect and should be discouraged.\n\nAnother solution to providing both versions during a transition would be to use build tags.\n\nAnother way to address my issues above is to have a vet rule that complains about errors implementing fmt.Formatter. That would make FormatError just longer to type. I like the idea of the compiler taking care of it though.",
      "parentUuid": "643427eb_dfd0691c",
      "revId": "1b480f9cb5491d53841d1259634cd593eaeb630c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9ea95f18_0a2f2443",
        "filename": "errors/format.go",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 5305
      },
      "writtenOn": "2018-10-13T16:52:45Z",
      "side": 1,
      "message": "I agree that just having one method would be fine if we were starting ab initio. I don\u0027t think we can ignore the transitional period, however.\n\n- We need to be able to use the experimental errors and fmt packages to prove these concepts in practice before adopting them in the standard library. That means something that works with Go 1.11.\n\n- You\u0027ve proposed using vendoring for so that \"errors\" and \"fmt\" are replaced with the experimental version. I don\u0027t think this works, since a vendor directory will only replace packages in the current module. If two modules both vendor the experimental errors packages in, they won\u0027t share a definition of errors.Printer.\n\n\u003e I don\u0027t understand how the adaptor would work. It would rely on a newer version of Go that would already ignore the fmt.Format implementation.\n\nNo, the adapter would rely on a package (possibly this one) that would be compatible with any version of Go.",
      "parentUuid": "f56daa5f_c38fe9aa",
      "revId": "1b480f9cb5491d53841d1259634cd593eaeb630c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "21c4b2fa_60fa5529",
        "filename": "errors/format.go",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 5182
      },
      "writtenOn": "2018-10-15T10:04:11Z",
      "side": 1,
      "message": "\u003e I don\u0027t think we can ignore the transitional period\n\nWhat is wrong with the build tag approach? I makes reality very explicit: in new Go versions, fmt.Format will _never_ be used by package fmt and should not be used by users either.\n\n\u003e vendoring ... I don\u0027t think this works, since a vendor directory will only replace packages in the current module\n\ngo mod vendor puts the transitive dependencies of all packages in the vendor directory. It does not seem to support vendoring of core libs, but after vendoring one can switch to GOPATH mode, which will. The result is that, after copying in fmt and errors, all transitive dependencies will use the replacement packages. I verified this works. Clearly not production-worthy or winning any beauty contest, but it is relatively straightforward to test out the impact of these packages across a project.\n\n\u003e the adapter would rely on a package (possibly this one) that would be compatible with any version of Go.\n\nYes, but the adaptor would be included in a new Go releases, at which point package fmt will never call it and users calling it will most likely be incorrect. It is probably possible to make an adaptor that tracks the origin of the fmt.State and finagles the flags and verb to approximate correct results, but I don\u0027t think we want to go there.",
      "parentUuid": "9ea95f18_0a2f2443",
      "revId": "1b480f9cb5491d53841d1259634cd593eaeb630c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0cef5d23_03f03904",
        "filename": "errors/format.go",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 5182
      },
      "writtenOn": "2018-10-15T10:08:50Z",
      "side": 1,
      "message": "One more note on build tags: one already needs to use build tags if one implements errors.Formatter while wanting to stay backwards compatible with Go, as the implementation would have to refer to errors.Printer.",
      "parentUuid": "21c4b2fa_60fa5529",
      "revId": "1b480f9cb5491d53841d1259634cd593eaeb630c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a9780c1b_1a345309",
        "filename": "errors/format.go",
        "patchSetId": 1
      },
      "lineNbr": 17,
      "author": {
        "id": 14570
      },
      "writtenOn": "2018-10-05T15:12:17Z",
      "side": 1,
      "message": "fmt dot something? A type in the fmt package?",
      "range": {
        "startLine": 17,
        "startChar": 29,
        "endLine": 17,
        "endChar": 32
      },
      "revId": "1b480f9cb5491d53841d1259634cd593eaeb630c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fa3639d7_05cea10d",
        "filename": "errors/format.go",
        "patchSetId": 1
      },
      "lineNbr": 17,
      "author": {
        "id": 5182
      },
      "writtenOn": "2018-10-11T12:25:17Z",
      "side": 1,
      "message": "I\u0027ve reworded it a bit.",
      "parentUuid": "a9780c1b_1a345309",
      "range": {
        "startLine": 17,
        "startChar": 29,
        "endLine": 17,
        "endChar": 32
      },
      "revId": "1b480f9cb5491d53841d1259634cd593eaeb630c",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    }
  ]
}