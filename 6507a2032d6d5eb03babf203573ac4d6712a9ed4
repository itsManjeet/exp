{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "89e45e8b_01f77bb7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2023-06-23T13:23:11Z",
      "side": 1,
      "message": "TryBots beginning. Status page: https://farmer.golang.org/try?commit\u003d6507a203\n",
      "tag": "autogenerated:trybots~beginning",
      "revId": "6507a2032d6d5eb03babf203573ac4d6712a9ed4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "84bfd507_115918b9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2023-06-23T13:25:09Z",
      "side": 1,
      "message": "TryBots are happy.\n\n",
      "parentUuid": "89e45e8b_01f77bb7",
      "tag": "autogenerated:trybots~happy",
      "revId": "6507a2032d6d5eb03babf203573ac4d6712a9ed4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2e8b5200_d089fb9b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 30947
      },
      "writtenOn": "2023-06-23T15:59:58Z",
      "side": 1,
      "message": "Thanks for including me on the review, definitely interested in learning more about the internals.",
      "revId": "6507a2032d6d5eb03babf203573ac4d6712a9ed4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9ffa8085_5692cce5",
        "filename": "apidiff/correspondence.go",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 31647
      },
      "writtenOn": "2023-06-23T18:54:32Z",
      "side": 1,
      "message": "FWIW, reading this package for the first time, I\u0027m not sure this docstring makes sense.\n\nIf old and new are structs, we don\u0027t use types.Identical to check if they correspond. (in fact, I\u0027m not sure that types.Identical is even necessary in this package, as it fundamentally doesn\u0027t work for this purpose).\n\nHow about something like:\n\n\"Two types correspond if they have would be identical (as defined by go/types.Identical) under the weaker assumptions that two packages with the same path are equivalent.\n\nWhereas go/types compares Named types by their pointer identity, correspond considers Named types to be equivalent if they have the same Id in an equivalent package.\"",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 10,
        "endChar": 25
      },
      "revId": "6507a2032d6d5eb03babf203573ac4d6712a9ed4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d4f66aa1_f96a3a9d",
        "filename": "apidiff/correspondence.go",
        "patchSetId": 1
      },
      "lineNbr": 33,
      "author": {
        "id": 31647
      },
      "writtenOn": "2023-06-23T18:54:32Z",
      "side": 1,
      "message": "This could just check old.Kind() \u003d\u003d new.Kind()\n\nCalling into types.Identical here is a bit confusing, IMO, whereas elsewhere this code mimics the structure of Identical.",
      "range": {
        "startLine": 33,
        "startChar": 2,
        "endLine": 33,
        "endChar": 33
      },
      "revId": "6507a2032d6d5eb03babf203573ac4d6712a9ed4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3779f1d1_25562510",
        "filename": "apidiff/correspondence.go",
        "patchSetId": 1
      },
      "lineNbr": 161,
      "author": {
        "id": 31647
      },
      "writtenOn": "2023-06-23T18:54:32Z",
      "side": 1,
      "message": "Should this be called something like \u0027existing\u0027? It is confusing that this name has \u0027old\u0027 in it, yet comes from the \u0027new\u0027 realm.",
      "range": {
        "startLine": 161,
        "startChar": 1,
        "endLine": 161,
        "endChar": 5
      },
      "revId": "6507a2032d6d5eb03babf203573ac4d6712a9ed4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4956bb7f_b6a110c5",
        "filename": "apidiff/correspondence.go",
        "patchSetId": 1
      },
      "lineNbr": 164,
      "author": {
        "id": 31647
      },
      "writtenOn": "2023-06-23T18:54:32Z",
      "side": 1,
      "message": "Unless I\u0027m missing something, this comment is inaccurate, since there is handling for old.Obj().Pkg() !\u003d d.old, etc.?",
      "range": {
        "startLine": 163,
        "startChar": 2,
        "endLine": 164,
        "endChar": 36
      },
      "revId": "6507a2032d6d5eb03babf203573ac4d6712a9ed4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fc54edc6_dc8e4f10",
        "filename": "apidiff/correspondence.go",
        "patchSetId": 1
      },
      "lineNbr": 186,
      "author": {
        "id": 31647
      },
      "writtenOn": "2023-06-23T18:54:32Z",
      "side": 1,
      "message": "I\u0027m having trouble wrapping my head around what we want here, but this doesn\u0027t look correct.\n\nFor example, what if Obj() is exported but from a different package? What if newn is a compatible alias with a different name?\n\nFine to leave as-is, but it might be interesting to talk this through.",
      "range": {
        "startLine": 186,
        "startChar": 4,
        "endLine": 186,
        "endChar": 44
      },
      "revId": "6507a2032d6d5eb03babf203573ac4d6712a9ed4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5b14f81c_49f53329",
        "filename": "apidiff/correspondence.go",
        "patchSetId": 1
      },
      "lineNbr": 223,
      "author": {
        "id": 31647
      },
      "writtenOn": "2023-06-23T18:54:32Z",
      "side": 1,
      "message": "Here also, should we avoid the name \u0027old\u0027 when the type is from the \u0027new\u0027 package?",
      "range": {
        "startLine": 223,
        "startChar": 21,
        "endLine": 223,
        "endChar": 24
      },
      "revId": "6507a2032d6d5eb03babf203573ac4d6712a9ed4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0b20c03f_aca47386",
        "filename": "apidiff/correspondence.go",
        "patchSetId": 1
      },
      "lineNbr": 255,
      "author": {
        "id": 31647
      },
      "writtenOn": "2023-06-23T18:54:32Z",
      "side": 1,
      "message": "FWIW I don\u0027t understand why this handling is necessary. Shouldn\u0027t types.Identical be sufficient when comparing two \u0027new\u0027 types?",
      "range": {
        "startLine": 229,
        "startChar": 0,
        "endLine": 255,
        "endChar": 2
      },
      "revId": "6507a2032d6d5eb03babf203573ac4d6712a9ed4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}