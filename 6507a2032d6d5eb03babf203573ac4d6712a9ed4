{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "89e45e8b_01f77bb7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2023-06-23T13:23:11Z",
      "side": 1,
      "message": "TryBots beginning. Status page: https://farmer.golang.org/try?commit\u003d6507a203\n",
      "tag": "autogenerated:trybots~beginning",
      "revId": "6507a2032d6d5eb03babf203573ac4d6712a9ed4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "84bfd507_115918b9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2023-06-23T13:25:09Z",
      "side": 1,
      "message": "TryBots are happy.\n\n",
      "parentUuid": "89e45e8b_01f77bb7",
      "tag": "autogenerated:trybots~happy",
      "revId": "6507a2032d6d5eb03babf203573ac4d6712a9ed4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2e8b5200_d089fb9b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 30947
      },
      "writtenOn": "2023-06-23T15:59:58Z",
      "side": 1,
      "message": "Thanks for including me on the review, definitely interested in learning more about the internals.",
      "revId": "6507a2032d6d5eb03babf203573ac4d6712a9ed4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2641f415_91535637",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 14570
      },
      "writtenOn": "2023-07-07T18:31:48Z",
      "side": 1,
      "message": "Thanks for thinking about this carefully! Sorry for the delay; I wasn\u0027t able to page this stuff back in before I left for Berlin.\n\nAs I say below, the changes you suggest (flaws you point out) are worth digging into, but not for this CL, which fixes a specific bug. I will address all your comments in a subsequent CL.\n\nWhen I did this work 5 years ago, Gri was the only type expert. He helped me a lot with the definitions but he didn\u0027t have time to review the code in great detail. So I\u0027m excited get into the details with you.",
      "revId": "6507a2032d6d5eb03babf203573ac4d6712a9ed4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "da0da13d_d5570789",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 31647
      },
      "writtenOn": "2023-07-10T14:53:25Z",
      "side": 1,
      "message": "Sure, let\u0027s merge this and I\u0027ll review your follow up.\n\nI have a lot to page back in now, too ðŸ˜Š\nJust getting back from vacation.",
      "parentUuid": "2641f415_91535637",
      "revId": "6507a2032d6d5eb03babf203573ac4d6712a9ed4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9ffa8085_5692cce5",
        "filename": "apidiff/correspondence.go",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 31647
      },
      "writtenOn": "2023-06-23T18:54:32Z",
      "side": 1,
      "message": "FWIW, reading this package for the first time, I\u0027m not sure this docstring makes sense.\n\nIf old and new are structs, we don\u0027t use types.Identical to check if they correspond. (in fact, I\u0027m not sure that types.Identical is even necessary in this package, as it fundamentally doesn\u0027t work for this purpose).\n\nHow about something like:\n\n\"Two types correspond if they have would be identical (as defined by go/types.Identical) under the weaker assumptions that two packages with the same path are equivalent.\n\nWhereas go/types compares Named types by their pointer identity, correspond considers Named types to be equivalent if they have the same Id in an equivalent package.\"",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 10,
        "endChar": 25
      },
      "revId": "6507a2032d6d5eb03babf203573ac4d6712a9ed4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "dd97648d_ae409427",
        "filename": "apidiff/correspondence.go",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 14570
      },
      "writtenOn": "2023-07-07T18:31:48Z",
      "side": 1,
      "message": "That sentence is a shorthand for what is actually happening, which is that we implement identity as defined in the spec, except that we use correspondence for defined types.\n\nhttps://go.googlesource.com/exp/+/refs/heads/master/apidiff/README.md#type-correspondence goes into more detail on all this. It also explains why your definition is too strict: corresponding types can have different names.",
      "parentUuid": "9ffa8085_5692cce5",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 10,
        "endChar": 25
      },
      "revId": "6507a2032d6d5eb03babf203573ac4d6712a9ed4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d4f66aa1_f96a3a9d",
        "filename": "apidiff/correspondence.go",
        "patchSetId": 1
      },
      "lineNbr": 33,
      "author": {
        "id": 31647
      },
      "writtenOn": "2023-06-23T18:54:32Z",
      "side": 1,
      "message": "This could just check old.Kind() \u003d\u003d new.Kind()\n\nCalling into types.Identical here is a bit confusing, IMO, whereas elsewhere this code mimics the structure of Identical.",
      "range": {
        "startLine": 33,
        "startChar": 2,
        "endLine": 33,
        "endChar": 33
      },
      "revId": "6507a2032d6d5eb03babf203573ac4d6712a9ed4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "15a135d2_990f9f93",
        "filename": "apidiff/correspondence.go",
        "patchSetId": 1
      },
      "lineNbr": 33,
      "author": {
        "id": 14570
      },
      "writtenOn": "2023-07-07T18:31:48Z",
      "side": 1,
      "message": "I\u0027d like to confine this CL to the bugfix at hand, but I will make this change in a followup CL.",
      "parentUuid": "d4f66aa1_f96a3a9d",
      "range": {
        "startLine": 33,
        "startChar": 2,
        "endLine": 33,
        "endChar": 33
      },
      "revId": "6507a2032d6d5eb03babf203573ac4d6712a9ed4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1fbdd027_e39267ac",
        "filename": "apidiff/correspondence.go",
        "patchSetId": 1
      },
      "lineNbr": 33,
      "author": {
        "id": 14570
      },
      "writtenOn": "2023-07-08T18:24:11Z",
      "side": 1,
      "message": "Done in https://go.dev/cl/508495.",
      "parentUuid": "15a135d2_990f9f93",
      "range": {
        "startLine": 33,
        "startChar": 2,
        "endLine": 33,
        "endChar": 33
      },
      "revId": "6507a2032d6d5eb03babf203573ac4d6712a9ed4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3779f1d1_25562510",
        "filename": "apidiff/correspondence.go",
        "patchSetId": 1
      },
      "lineNbr": 161,
      "author": {
        "id": 31647
      },
      "writtenOn": "2023-06-23T18:54:32Z",
      "side": 1,
      "message": "Should this be called something like \u0027existing\u0027? It is confusing that this name has \u0027old\u0027 in it, yet comes from the \u0027new\u0027 realm.",
      "range": {
        "startLine": 161,
        "startChar": 1,
        "endLine": 161,
        "endChar": 5
      },
      "revId": "6507a2032d6d5eb03babf203573ac4d6712a9ed4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4ffe284c_72a74907",
        "filename": "apidiff/correspondence.go",
        "patchSetId": 1
      },
      "lineNbr": 161,
      "author": {
        "id": 14570
      },
      "writtenOn": "2023-07-07T18:31:48Z",
      "side": 1,
      "message": "ditto",
      "parentUuid": "3779f1d1_25562510",
      "range": {
        "startLine": 161,
        "startChar": 1,
        "endLine": 161,
        "endChar": 5
      },
      "revId": "6507a2032d6d5eb03babf203573ac4d6712a9ed4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "16d7179d_c385d2fc",
        "filename": "apidiff/correspondence.go",
        "patchSetId": 1
      },
      "lineNbr": 161,
      "author": {
        "id": 14570
      },
      "writtenOn": "2023-07-08T18:24:11Z",
      "side": 1,
      "message": "Done in https://go.dev/cl/508500.",
      "parentUuid": "4ffe284c_72a74907",
      "range": {
        "startLine": 161,
        "startChar": 1,
        "endLine": 161,
        "endChar": 5
      },
      "revId": "6507a2032d6d5eb03babf203573ac4d6712a9ed4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4956bb7f_b6a110c5",
        "filename": "apidiff/correspondence.go",
        "patchSetId": 1
      },
      "lineNbr": 164,
      "author": {
        "id": 31647
      },
      "writtenOn": "2023-06-23T18:54:32Z",
      "side": 1,
      "message": "Unless I\u0027m missing something, this comment is inaccurate, since there is handling for old.Obj().Pkg() !\u003d d.old, etc.?",
      "range": {
        "startLine": 163,
        "startChar": 2,
        "endLine": 164,
        "endChar": 36
      },
      "revId": "6507a2032d6d5eb03babf203573ac4d6712a9ed4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3a1ea11c_d56bdcd6",
        "filename": "apidiff/correspondence.go",
        "patchSetId": 1
      },
      "lineNbr": 164,
      "author": {
        "id": 14570
      },
      "writtenOn": "2023-07-07T18:31:48Z",
      "side": 1,
      "message": "Probably. See below.",
      "parentUuid": "4956bb7f_b6a110c5",
      "range": {
        "startLine": 163,
        "startChar": 2,
        "endLine": 164,
        "endChar": 36
      },
      "revId": "6507a2032d6d5eb03babf203573ac4d6712a9ed4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ad1b5bc7_2dc764b0",
        "filename": "apidiff/correspondence.go",
        "patchSetId": 1
      },
      "lineNbr": 164,
      "author": {
        "id": 14570
      },
      "writtenOn": "2023-07-08T18:24:11Z",
      "side": 1,
      "message": "Done in https://go.dev/cl/508500.",
      "parentUuid": "3a1ea11c_d56bdcd6",
      "range": {
        "startLine": 163,
        "startChar": 2,
        "endLine": 164,
        "endChar": 36
      },
      "revId": "6507a2032d6d5eb03babf203573ac4d6712a9ed4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fc54edc6_dc8e4f10",
        "filename": "apidiff/correspondence.go",
        "patchSetId": 1
      },
      "lineNbr": 186,
      "author": {
        "id": 31647
      },
      "writtenOn": "2023-06-23T18:54:32Z",
      "side": 1,
      "message": "I\u0027m having trouble wrapping my head around what we want here, but this doesn\u0027t look correct.\n\nFor example, what if Obj() is exported but from a different package? What if newn is a compatible alias with a different name?\n\nFine to leave as-is, but it might be interesting to talk this through.",
      "range": {
        "startLine": 186,
        "startChar": 4,
        "endLine": 186,
        "endChar": 44
      },
      "revId": "6507a2032d6d5eb03babf203573ac4d6712a9ed4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "08ca481a_f7ddcee3",
        "filename": "apidiff/correspondence.go",
        "patchSetId": 1
      },
      "lineNbr": 186,
      "author": {
        "id": 14570
      },
      "writtenOn": "2023-07-07T18:31:48Z",
      "side": 1,
      "message": "Agreed, let\u0027s talk about it later. I\u0027ll have to page a lot of this back in.",
      "parentUuid": "fc54edc6_dc8e4f10",
      "range": {
        "startLine": 186,
        "startChar": 4,
        "endLine": 186,
        "endChar": 44
      },
      "revId": "6507a2032d6d5eb03babf203573ac4d6712a9ed4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9aa87535_e9109086",
        "filename": "apidiff/correspondence.go",
        "patchSetId": 1
      },
      "lineNbr": 186,
      "author": {
        "id": 14570
      },
      "writtenOn": "2023-07-08T18:24:11Z",
      "side": 1,
      "message": "I don\u0027t know what I was thinking when I wrote this. I must have thought the Id() was more unique than it is, probably pkgPath + \".\" + name.\n\nWhat if we used that? I think that would be OK: it would be making the assumption that all packages other than old and new remain the same w.r.t. API. I think that is a reasonable assumption, and probably what I originally intended.",
      "parentUuid": "08ca481a_f7ddcee3",
      "range": {
        "startLine": 186,
        "startChar": 4,
        "endLine": 186,
        "endChar": 44
      },
      "revId": "6507a2032d6d5eb03babf203573ac4d6712a9ed4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5b14f81c_49f53329",
        "filename": "apidiff/correspondence.go",
        "patchSetId": 1
      },
      "lineNbr": 223,
      "author": {
        "id": 31647
      },
      "writtenOn": "2023-06-23T18:54:32Z",
      "side": 1,
      "message": "Here also, should we avoid the name \u0027old\u0027 when the type is from the \u0027new\u0027 package?",
      "range": {
        "startLine": 223,
        "startChar": 21,
        "endLine": 223,
        "endChar": 24
      },
      "revId": "6507a2032d6d5eb03babf203573ac4d6712a9ed4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e006d6ac_8e918dde",
        "filename": "apidiff/correspondence.go",
        "patchSetId": 1
      },
      "lineNbr": 223,
      "author": {
        "id": 14570
      },
      "writtenOn": "2023-07-07T18:31:48Z",
      "side": 1,
      "message": "Yes.",
      "parentUuid": "5b14f81c_49f53329",
      "range": {
        "startLine": 223,
        "startChar": 21,
        "endLine": 223,
        "endChar": 24
      },
      "revId": "6507a2032d6d5eb03babf203573ac4d6712a9ed4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "df53372d_7803501f",
        "filename": "apidiff/correspondence.go",
        "patchSetId": 1
      },
      "lineNbr": 223,
      "author": {
        "id": 14570
      },
      "writtenOn": "2023-07-08T18:24:11Z",
      "side": 1,
      "message": "Done in https://go-review.googlesource.com/c/exp/+/508502.",
      "parentUuid": "e006d6ac_8e918dde",
      "range": {
        "startLine": 223,
        "startChar": 21,
        "endLine": 223,
        "endChar": 24
      },
      "revId": "6507a2032d6d5eb03babf203573ac4d6712a9ed4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0b20c03f_aca47386",
        "filename": "apidiff/correspondence.go",
        "patchSetId": 1
      },
      "lineNbr": 255,
      "author": {
        "id": 31647
      },
      "writtenOn": "2023-06-23T18:54:32Z",
      "side": 1,
      "message": "FWIW I don\u0027t understand why this handling is necessary. Shouldn\u0027t types.Identical be sufficient when comparing two \u0027new\u0027 types?",
      "range": {
        "startLine": 229,
        "startChar": 0,
        "endLine": 255,
        "endChar": 2
      },
      "revId": "6507a2032d6d5eb03babf203573ac4d6712a9ed4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a79d13dd_b4d88fa2",
        "filename": "apidiff/correspondence.go",
        "patchSetId": 1
      },
      "lineNbr": 255,
      "author": {
        "id": 14570
      },
      "writtenOn": "2023-07-07T18:31:48Z",
      "side": 1,
      "message": "It\u0027s possible this whole function is confused, starting with the name `oldc` that you called out above. I\u0027m not sure I realized that oldc is from the new package.",
      "parentUuid": "0b20c03f_aca47386",
      "range": {
        "startLine": 229,
        "startChar": 0,
        "endLine": 255,
        "endChar": 2
      },
      "revId": "6507a2032d6d5eb03babf203573ac4d6712a9ed4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "306a8cb3_26cbed76",
        "filename": "apidiff/correspondence.go",
        "patchSetId": 1
      },
      "lineNbr": 255,
      "author": {
        "id": 14570
      },
      "writtenOn": "2023-07-08T18:24:11Z",
      "side": 1,
      "message": "The short answer is that the types.Type of a generic type is not the same as the types.Type of its methods.\n\nConsider\n\n    type GT[V any] struct {}\n    func (GT[V]) M(*GT[V]) {}\n    \n(This is from testdata/tests.go.)\nThe types.Type you get from these declarations are both types.Named and have similar, but not identical, TypeParams. The latter\u0027s receiver type has nil constraints.\n\nSay both old and new have those exact definitions: no change.\n\nWhen I see `type GT[V any]` in both old and new for the first time, I establish a correspondence between them:\n\n    d.correspondMap[oldname] \u003d new\n    \nThat is, between the old *name* and the new types.Type.\n\nWhen I then compare the methods, I look up the old name to get the type\n\n    GT[V any]\n    \nbut the method\u0027s type is\n\n    GT[V]\n    \nI need the extra machinery to get these two to match.",
      "parentUuid": "a79d13dd_b4d88fa2",
      "range": {
        "startLine": 229,
        "startChar": 0,
        "endLine": 255,
        "endChar": 2
      },
      "revId": "6507a2032d6d5eb03babf203573ac4d6712a9ed4",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one Code-Review+2 is required. Self review is not allowed."
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "6507a2032d6d5eb03babf203573ac4d6712a9ed4",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Do-Not-Review",
        "description": {
          "value": "Changes that have DO NOT REVIEW in their commit message are not submittable."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (R|r)(E|e)(V|v)(I|i)(E|e)(W|w).*\""
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:false"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (R|r)(E|e)(V|v)(I|i)(E|e)(W|w).*\""},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (R|r)(E|e)(V|v)(I|i)(E|e)(W|w).*\""]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "6507a2032d6d5eb03babf203573ac4d6712a9ed4",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Do-Not-Submit",
        "description": {
          "value": "Changes that have DO NOT SUBMIT in their commit message are not submittable."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (S|s)(U|u)(B|b)(M|m)(I|i)(T|t).*\""
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:false"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (S|s)(U|u)(B|b)(M|m)(I|i)(T|t).*\""},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (S|s)(U|u)(B|b)(M|m)(I|i)(T|t).*\""]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "6507a2032d6d5eb03babf203573ac4d6712a9ed4",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "No-Holds",
        "description": {
          "value": "Changes with a Hold+1 vote are not submittable."
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "NOT label:Hold\u003d1"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"NOT label:Hold=1"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Hold=1"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "6507a2032d6d5eb03babf203573ac4d6712a9ed4",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "No-Unresolved-Comments",
        "description": {
          "value": "Changes that have unresolved comments are not submittable, unless overriden by adding the hashtag allow-unresolved-comments."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "has:unresolved"
          }
        },
        "submittabilityExpression": {
          "expressionString": "-has:unresolved"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "hashtag:allow-unresolved-comments"
          }
        },
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:unresolved"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["has:unresolved"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-has:unresolved"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"hashtag:allow-unresolved-comments"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "patchSetCommitId": "6507a2032d6d5eb03babf203573ac4d6712a9ed4",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "No-Wait-Release",
        "description": {
          "value": "Changes with the hashtag wait-release cannot be submitted."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "hashtag:wait-release"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:false"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"hashtag:wait-release"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["hashtag:wait-release"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "6507a2032d6d5eb03babf203573ac4d6712a9ed4",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforcement-satisfied_gerrit"],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "6507a2032d6d5eb03babf203573ac4d6712a9ed4",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "TryBots-Pass",
        "description": {
          "value": "Changes must pass TryBots unless TryBot-Bypass+1 is set."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config -label:TryBot-Result\u003dMAX"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:false"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:TryBot-Bypass\u003dMAX"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config -label:TryBot-Result=MAX"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":["label:TryBot-Result=MAX"],"failingAtoms":["branch:refs/meta/config"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:TryBot-Bypass=MAX"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "patchSetCommitId": "6507a2032d6d5eb03babf203573ac4d6712a9ed4",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}