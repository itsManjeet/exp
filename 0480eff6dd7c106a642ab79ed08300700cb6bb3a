{
  "comments": [
    {
      "key": {
        "uuid": "b2c96d3c_d89efc45",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 7,
      "author": {
        "id": 5070
      },
      "writtenOn": "2019-04-12T08:04:53Z",
      "side": 1,
      "message": "How do I reproduce your problem on my computer?",
      "range": {
        "startLine": 7,
        "startChar": 29,
        "endLine": 7,
        "endChar": 91
      },
      "revId": "0480eff6dd7c106a642ab79ed08300700cb6bb3a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5109ebaa_0c0e6ec8",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 7,
      "author": {
        "id": 31814
      },
      "writtenOn": "2019-04-12T14:55:22Z",
      "side": 1,
      "message": "Here is a snippet of the code that caused my problem. I don\u0027t use shiny directly, I use nucular. That GUI framework uses a static fork of shiny as backend. I tracked the problem down to shiny.\n\nTo trigger the problem you have to close the window. It should reopen, but instead opening again fails.\n\n--------------------------------------------------------------------\npackage main\n\nimport (\n\t\"image\"\n\n\t\"github.com/aarzilli/nucular\"\n\t\"github.com/aarzilli/nucular/style\"\n)\n\nvar wndSettings nucular.MasterWindow\n\nfunc main() {\n\t// this call will succeed (and block until you close the window)\n\topenWindow()\n\n\t// this call will fail because window class is already registered\n\topenWindow()\n}\n\nfunc openWindow() {\n\t// build gui\n\tsize :\u003d image.Point{X: 640, Y: 480}\n\tflags :\u003d nucular.WindowNoHScrollbar | nucular.WindowNoScrollbar\n\n\t// create window\n\twndSettings \u003d nucular.NewMasterWindowSize(flags, \"Window Title\", size, guiFn)\n\twndSettings.SetStyle(style.FromTheme(style.DefaultTheme, 1.5))\n\n\t// show window\n\twndSettings.Main()\n\twndSettings \u003d nil\n}\n\nfunc guiFn(w *nucular.Window) {\n\t// fill gui with some test stuff\n\tw.Row(25).Dynamic(1)\n\tw.Label(\"Only some insignificant test content.\", \"LC\")\n\tw.RowScaled(w.LayoutAvailableHeight()).Static()\n}",
      "parentUuid": "b2c96d3c_d89efc45",
      "range": {
        "startLine": 7,
        "startChar": 29,
        "endLine": 7,
        "endChar": 91
      },
      "revId": "0480eff6dd7c106a642ab79ed08300700cb6bb3a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a7552abf_e0192960",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 7,
      "author": {
        "id": 5070
      },
      "writtenOn": "2019-04-12T22:20:38Z",
      "side": 1,
      "message": "Thank you for providing your example.\n\nI think you use golang.org/x/exp/shiny/driver.Main incorrectly. I think it is intended to be called in your program only once. See https://godoc.org/golang.org/x/exp/shiny/driver\n```\nMain is called by the program\u0027s main function to run the graphical application.\n```\n\nI think you change should be reverted.",
      "parentUuid": "5109ebaa_0c0e6ec8",
      "range": {
        "startLine": 7,
        "startChar": 29,
        "endLine": 7,
        "endChar": 91
      },
      "revId": "0480eff6dd7c106a642ab79ed08300700cb6bb3a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9084eae4_4a8eb9d8",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 7,
      "author": {
        "id": 31814
      },
      "writtenOn": "2019-04-13T10:11:41Z",
      "side": 1,
      "message": "It is only called once per graphical application. Main has an infinite loop to render the content of the window. As long as the window is open. As soon as you close the window or call window.Close() the loop stops and the window should get closed correctly. That includes unregistering the class as the API documentation of Microsoft says. So I don\u0027t see any incorrect usage.\n\nWhy in your opinion shouldn\u0027t there be any unregistration of the registered classes?",
      "parentUuid": "a7552abf_e0192960",
      "range": {
        "startLine": 7,
        "startChar": 29,
        "endLine": 7,
        "endChar": 91
      },
      "revId": "0480eff6dd7c106a642ab79ed08300700cb6bb3a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "13ac084f_2fac48bb",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 7,
      "author": {
        "id": 5070
      },
      "writtenOn": "2019-04-14T08:23:14Z",
      "side": 1,
      "message": "\u003e It is only called once per graphical application.\n\nNot true. Your program https://play.golang.org/p/BrBkLbfq6Vb calls golang.org/x/exp/shiny/driver.Main twice. You call openWindow function in your program twice from your main - on line 14 and 17, your openWindow function calls wndSettings.Main on line 30, and wndSettings.Main calls golang.org/x/exp/shiny/driver.Main.\n\nSo your use of golang.org/x/exp/shiny/driver.Main is wrong and unsupported.\n\n\u003e Main has an infinite loop to render the content of the window. As long as the window is open. As soon as you close the window or call window.Close() the loop stops and the window should get closed correctly.\n\nI am not sure what window.Close you are talking about. golang.org/x/exp/shiny/driver.Main is designed to run your whole GUI interaction from beginning to the end. The loop won\u0027t exit, unless you tell it to exit. Some programs require more than one window - these programs do not exit immediately once you close one of their windows.\n\n\u003e That includes unregistering the class as the API documentation of Microsoft says. So I don\u0027t see any incorrect usage.\n\u003e \n\u003e Why in your opinion shouldn\u0027t there be any unregistration of the registered classes?\n\nWhat does calling UnregisterClass achieves? We already registered \"shiny_ScreenWindow\" class once. What is the point of deregistering it and registering it again? The reason why your program happen to call RegisterClass twice is because you called golang.org/x/exp/shiny/driver.Main twice. And you should not be doing that - it is against the design of this package, and it has been documented.\n\nDo you still against me reverting your change?",
      "parentUuid": "9084eae4_4a8eb9d8",
      "range": {
        "startLine": 7,
        "startChar": 29,
        "endLine": 7,
        "endChar": 91
      },
      "revId": "0480eff6dd7c106a642ab79ed08300700cb6bb3a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b7eaee4b_3fc1da32",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 7,
      "author": {
        "id": 31814
      },
      "writtenOn": "2019-04-14T09:18:00Z",
      "side": 1,
      "message": "\u003e \u003e It is only called once per graphical application.\n\u003e \n\u003e Not true. Your program https://play.golang.org/p/BrBkLbfq6Vb calls golang.org/x/exp/shiny/driver.Main twice. You call openWindow function in your program twice from your main - on line 14 and 17, your openWindow function calls wndSettings.Main on line 30, and wndSettings.Main calls golang.org/x/exp/shiny/driver.Main.\n\u003e\n\nSorry, but it is true. But I think there seem to be some misunderstanding with the term \"window\". A \"window\" is for me here the graphical application. The \"screen\" in term of the documentation. I don\u0027t mean a window inside the GUI!\nSo: \"openWindow()\" is called once per *graphical application* and so is driver.Main() - it is *not* called once per window inside the GUI!\n\n\u003e \n\u003e So your use of golang.org/x/exp/shiny/driver.Main is wrong and unsupported.\n\u003e \n\nWhy? I didn\u0027t find any documentation that prohibits closing the GUI and reopening it. Do you have a link for me?\n\n\u003e \n\u003e Some programs require more than one window - these programs do not exit immediately once you close one of their windows.\n\u003e\n\nI don\u0027t know if you are talking about a \"window\" or the \"screen\" (see my first paragraph). But I doubt you are talking about a \"screen\", because that would cause exactly the same error as closing the screen and reopening it. Or do you have a working example for me with multiple screens?\n\n\u003e \n\u003e The reason why your program happen to call RegisterClass twice is because you called golang.org/x/exp/shiny/driver.Main twice. And you should not be doing that - it is against the design of this package, and it has been documented.\n\u003e\n\nWhere? And my application doesn\u0027t have a permanent GUI. It only opens a GUI when it requires it. The rest of the time it runs in the background. And it requires to show and hide the GUI from time to time.\n\n\u003e \n\u003e Do you still against me reverting your change?\n\u003e \n\nYep!",
      "parentUuid": "13ac084f_2fac48bb",
      "range": {
        "startLine": 7,
        "startChar": 29,
        "endLine": 7,
        "endChar": 91
      },
      "revId": "0480eff6dd7c106a642ab79ed08300700cb6bb3a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a3d8c350_79f57757",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 7,
      "author": {
        "id": 5070
      },
      "writtenOn": "2019-04-15T08:11:44Z",
      "side": 1,
      "message": "\u003e \u003e So your use of golang.org/x/exp/shiny/driver.Main is wrong and unsupported.\n\u003e \u003e \n\u003e \n\u003e Why? I didn\u0027t find any documentation that prohibits closing the GUI and reopening it. Do you have a link for me?\n\nThat is not what I said, I said that calling golang.org/x/exp/shiny/driver.Main multiple times in single program is unexpected. See my reply to you from April 13 for documentation reference.\n\n\u003e I don\u0027t know if you are talking about a \"window\" or the \"screen\" (see my first paragraph). But I doubt you are talking about a \"screen\", because that would cause exactly the same error as closing the screen and reopening it. \n\nI am talking about Windows windows.\n\n\u003e Or do you have a working example for me with multiple screens?\n\nI don\u0027t.\n\n\u003e Where?\n\nSee my reply to you from April 13 for documentation reference.\n\n\u003e And my application doesn\u0027t have a permanent GUI. It only opens a GUI when it requires it. The rest of the time it runs in the background. And it requires to show and hide the GUI from time to time.\n\nThat is fine to hide and show you window / windows as your program progress. But you don\u0027t need to exit out of golang.org/x/exp/shiny/driver.Main for that.\n\nPlease reply to my questions in my previous message.\n\nThank you.",
      "parentUuid": "b7eaee4b_3fc1da32",
      "range": {
        "startLine": 7,
        "startChar": 29,
        "endLine": 7,
        "endChar": 91
      },
      "revId": "0480eff6dd7c106a642ab79ed08300700cb6bb3a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "137e610c_2cd7c985",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 7,
      "author": {
        "id": 31814
      },
      "writtenOn": "2019-04-15T09:26:53Z",
      "side": 1,
      "message": "\u003e That is not what I said, I said that calling golang.org/x/exp/shiny/driver.Main multiple times in single program is unexpected. See my reply to you from April 13 for documentation reference.\n\u003e \n\n\"Main is called by the program\u0027s main function to run the graphical application.\nIt calls f on the Screen, possibly in a separate goroutine, as some OS- specific libraries require being on \u0027the main thread\u0027. It returns when f returns.\"\n\nThat is a cite of your mentioned documentation. There is absolutely no word that you are only allowed to call that function once. No warning that opening the GUI multiple times is unsupported or anything that you claim here. Sorry. So please give me a reasonable reference. Like this you are actually not helpful.\n\n\u003e \u003e Or do you have a working example for me with multiple screens?\n\u003e \n\u003e I don\u0027t.\n\nSo you *guess* that my change *could* be a problem?\nSorry but I don\u0027t get the problem. You tell me that I may not call the driver.Main twice. My change only affects (as you can see in the diff: \"defer\"!) leaving the function. When *you* only call the function \"correctly\" once, you are not affected by this change while running your GUI - only when closing the GUI (leaving the driver.Main function). But then the process exits anyway.\n\n\u003e What does calling UnregisterClass achieves? We already registered \"shiny_ScreenWindow\" class once. What is the point of deregistering it and registering it again? The reason why your program happen to call RegisterClass twice is because you called golang.org/x/exp/shiny/driver.Main twice. And you should not be doing that - it is against the design of this package, and it has been documented.\n\n\"shiny_ScreenWindow\" is the screen, not the window! \"shiny_Window\" would be the window!\nhttps://docs.microsoft.com/en-us/windows/desktop/api/winuser/nf-winuser-unregisterclassw\nYou can simply register the class and at the end just exit the process. As you can see in the linked API doc of microsoft this implicitely unregisters the class. But the clean way is to clean up explicitely: unregister the class when you don\u0027t need it anymore. The dirty way before caused exactly the unspecific behavior you mentioned when calling driver.Main twice. But this change fixes (one of) the problem(s) that caused an unspecific behavior of driver.Main when calling it twice. Btw: there was already a TODO that I replaced with my implementation saying \"unregister the classes\". So it was not just my idea, I just implemented it. ;-)",
      "parentUuid": "a3d8c350_79f57757",
      "range": {
        "startLine": 7,
        "startChar": 29,
        "endLine": 7,
        "endChar": 91
      },
      "revId": "0480eff6dd7c106a642ab79ed08300700cb6bb3a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "01e12603_66d5ff1c",
        "filename": "shiny/driver/internal/win32/zsyscall_windows.go",
        "patchSetId": 2
      },
      "lineNbr": 65,
      "author": {
        "id": 5070
      },
      "writtenOn": "2019-04-12T08:04:53Z",
      "side": 1,
      "message": "This file is generated by running \u0027go generate\u0027 command (see first line in the file). But you adjusted this file manually. Your manual change will be blown away next time someone will run \u0027go generate\u0027 command.",
      "revId": "0480eff6dd7c106a642ab79ed08300700cb6bb3a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a51bbcee_cd327906",
        "filename": "shiny/driver/internal/win32/zsyscall_windows.go",
        "patchSetId": 2
      },
      "lineNbr": 65,
      "author": {
        "id": 31814
      },
      "writtenOn": "2019-04-12T14:55:22Z",
      "side": 1,
      "message": "Ooops! You\u0027re right. I forgot the change to syscall_windows.go - how can I append the missing commit to the change? Do I have to create a new pull request?",
      "parentUuid": "01e12603_66d5ff1c",
      "revId": "0480eff6dd7c106a642ab79ed08300700cb6bb3a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ea776123_b068ed54",
        "filename": "shiny/driver/internal/win32/zsyscall_windows.go",
        "patchSetId": 2
      },
      "lineNbr": 65,
      "author": {
        "id": 5070
      },
      "writtenOn": "2019-04-12T22:20:38Z",
      "side": 1,
      "message": "Your change is already submitted to master branch. You need to create new pull request.",
      "parentUuid": "a51bbcee_cd327906",
      "revId": "0480eff6dd7c106a642ab79ed08300700cb6bb3a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bc7c8878_9e6b9290",
        "filename": "shiny/driver/internal/win32/zsyscall_windows.go",
        "patchSetId": 2
      },
      "lineNbr": 65,
      "author": {
        "id": 31814
      },
      "writtenOn": "2019-04-13T10:11:41Z",
      "side": 1,
      "message": "Thanks. Never used gerrit before.",
      "parentUuid": "ea776123_b068ed54",
      "revId": "0480eff6dd7c106a642ab79ed08300700cb6bb3a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705",
      "unresolved": false
    }
  ]
}