{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "b16eed48_acd17694",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2023-08-01T12:08:02Z",
      "side": 1,
      "message": "TryBots beginning. Status page: https://farmer.golang.org/try?commit\u003dd8e44b77\n",
      "tag": "autogenerated:trybots~beginning",
      "revId": "d8e44b774ce65dcc1d4600889a2fb568da2cb10a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "36a009dd_c01208d7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 5976
      },
      "writtenOn": "2023-08-01T12:10:14Z",
      "side": 1,
      "message": "TryBots are happy.\n\n",
      "parentUuid": "b16eed48_acd17694",
      "tag": "autogenerated:trybots~happy",
      "revId": "d8e44b774ce65dcc1d4600889a2fb568da2cb10a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1341c6d0_129022cc",
        "filename": "apidiff/correspondence.go",
        "patchSetId": 3
      },
      "lineNbr": 87,
      "author": {
        "id": 31647
      },
      "writtenOn": "2023-08-02T18:08:58Z",
      "side": 1,
      "message": "Throughout: please use `Var.Embedded` (I forgot that `Anonymous` even existed).\n\nNot for this CL.",
      "range": {
        "startLine": 87,
        "startChar": 10,
        "endLine": 87,
        "endChar": 19
      },
      "revId": "d8e44b774ce65dcc1d4600889a2fb568da2cb10a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2b1a2dfd_f842d254",
        "filename": "apidiff/correspondence.go",
        "patchSetId": 3
      },
      "lineNbr": 129,
      "author": {
        "id": 31647
      },
      "writtenOn": "2023-08-02T18:08:58Z",
      "side": 1,
      "message": "Ok, there\u0027s something philosophical that I\u0027m not quite grokking here. Let me take a stab in the dark.\n\nIn this case, we say that we only establish correspondence between old and new if new is Named or Basic. We don\u0027t establish correspondence with other types, I think because we want better error messages.\n\nBut there is also logic in establishCorrespondence that exits early before writing the correspondMap. So this logic of not recording the correspondence is split between the call site here and the internals of establishCorrespondence.\n\nCan we consolidate that logic into establishCorrespondence, so that this callsite is unconditional (i.e. just `d.establishCorrespondence(old, new)`? Inside establishCorrespondence, can we explain which conditions we want to check before writing the correspondMap, and which we want to check after, and why?",
      "range": {
        "startLine": 122,
        "startChar": 0,
        "endLine": 129,
        "endChar": 0
      },
      "revId": "d8e44b774ce65dcc1d4600889a2fb568da2cb10a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "86eade4e_0269afc4",
        "filename": "apidiff/correspondence.go",
        "patchSetId": 3
      },
      "lineNbr": 152,
      "author": {
        "id": 31647
      },
      "writtenOn": "2023-08-02T18:08:58Z",
      "side": 1,
      "message": "FWIW, I don\u0027t really understand this.\n\nDon\u0027t you need to also compare the names of embedded fields.\nWhy does this particular case establish a correspondence between named types.",
      "range": {
        "startLine": 152,
        "startChar": 12,
        "endLine": 152,
        "endChar": 35
      },
      "revId": "d8e44b774ce65dcc1d4600889a2fb568da2cb10a",
      "serverId": "62eb7196-b449-3ce5-99f1-c037f21e1705"
    }
  ]
}